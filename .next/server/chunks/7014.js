"use strict";exports.id=7014,exports.ids=[7014],exports.modules={77014:(e,t,a)=>{a.d(t,{Nu:()=>i,i4:()=>n});var o=a(88403),r=a(24544);class l{constructor(){this.employeeMap=new Map,this.salaryMap=new Map,this.multiplierMap=new Map,console.log("\uD83D\uDD04 Initializing Clockify Import Service...")}async initializeDataMappings(){try{console.log("\uD83D\uDCCA Initializing data mappings from database...");let[e,t,a]=await Promise.all([(0,r.XA)(),(0,r.DD)(),(0,r.Y0)()]);for(let t of(this.employeeMap.clear(),e)){console.log(`üìã Raw employee data for ${t.id}:`,{id:t.id,name:t.name,email:t.email,status:t.status,department:t.department,position:t.position,hireDate:t.hireDate,terminationDate:t.terminationDate});let e={id:t.id,name:t.name,email:t.email??void 0,status:"active"===t.status||"inactive"===t.status?t.status:"active",department:t.department??void 0,position:t.position??void 0,hireDate:t.hireDate??void 0,terminationDate:t.terminationDate??void 0};this.employeeMap.set(t.id,e),console.log(`‚úÖ Converted employee: ${e.name} (${e.id})`,{email:e.email,department:e.department,position:e.position,hireDate:e.hireDate,status:e.status})}for(let a of(console.log(`üë• Loaded ${e.length} employees`),this.salaryMap.clear(),t)){console.log(`üìã Raw salary data for ${a.employeeId}:`,{employeeId:a.employeeId,effectiveDate:a.effectiveDate,endDate:a.endDate,annualSalary:a.annualSalary.toNumber(),hourlyRate:a.hourlyRate.toNumber(),currency:a.currency,notes:a.notes});let e={employeeId:a.employeeId,effectiveDate:a.effectiveDate,endDate:a.endDate??void 0,annualSalary:a.annualSalary.toNumber(),hourlyRate:a.hourlyRate.toNumber(),currency:a.currency,notes:a.notes??void 0},t=this.salaryMap.get(e.employeeId);(!t||new Date(e.effectiveDate)>new Date(t.effectiveDate))&&(this.salaryMap.set(e.employeeId,e),console.log(`‚úÖ Converted salary for employee ${e.employeeId}:`,{effectiveDate:e.effectiveDate,endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate}))}for(let e of(console.log(`üí∞ Loaded ${this.salaryMap.size} employee salaries`),this.multiplierMap.clear(),a)){console.log(`üìã Raw multiplier data for project ${e.projectId}:`,{projectId:e.projectId,projectName:e.projectName,multiplier:e.multiplier.toNumber(),effectiveDate:e.effectiveDate,endDate:e.endDate,notes:e.notes});let t=this.multiplierMap.get(e.projectId);(!t||new Date(e.effectiveDate)>new Date(t.effectiveDate))&&(this.multiplierMap.set(e.projectId,{multiplier:e.multiplier.toNumber(),effectiveDate:e.effectiveDate}),console.log(`‚úÖ Loaded multiplier for project ${e.projectId}: ${e.multiplier.toNumber()}x`))}console.log(`üìà Loaded ${this.multiplierMap.size} project multipliers`),console.log("‚úÖ Data mappings initialized successfully")}catch(e){throw console.error("‚ùå Failed to initialize data mappings:",e),e}}async importTimeEntries(e,t){try{console.log("\uD83D\uDD04 Starting Clockify time entries import..."),console.log(`üìÖ Date range: ${e} to ${t}`),await this.initializeDataMappings();let a=await o.e1.getTimeEntries("",e,t);if(console.log(`üìä Retrieved ${a.length} time entries from Clockify`),0===a.length)return console.log("‚ö†Ô∏è No time entries found for the specified date range"),{success:!0,recordsImported:0,recordsSkipped:0,errors:[],summary:{totalEntries:0,billableHours:0,nonBillableHours:0,totalCost:0,totalBillableValue:0}};let[l,i]=await Promise.all([o.e1.getProjects(),o.e1.getWorkspaces().then(e=>e.length>0?o.e1.getUsers(e[0].id):[])]);console.log(`üìã Retrieved ${l.length} projects and ${i.length} users from Clockify`);let n=0,s=0,c=[],p=0,d=0,m=0,u=0;for(let e of a)try{let t=i.find(t=>t.id===e.userId),a=l.find(t=>t.id===e.projectId);if(!t||!a){let t=`Missing user (${e.userId}) or project (${e.projectId}) for entry ${e.id}`;console.warn(`‚ö†Ô∏è ${t}`),c.push(t),s++;continue}let o=this.employeeMap.get(e.userId);if(!o){console.warn(`‚ö†Ô∏è No employee record found for Clockify user ${e.userId} (${t.name})`),s++;continue}let y=this.salaryMap.get(e.userId);if(!y){console.warn(`‚ö†Ô∏è No salary record found for employee ${e.userId} (${o.name})`),s++;continue}let f=this.multiplierMap.get(e.projectId),h=f?f.multiplier:1,D=this.parseDuration(e.timeInterval.duration),g=e.billable?D:0,b=e.billable?0:D,w=D*y.hourlyRate,v=g*y.hourlyRate*h;p+=g,d+=b,m+=w,u+=v;let I={employeeId:e.userId,employeeName:o.name,projectId:e.projectId,projectName:a.name,date:new Date(e.timeInterval.start).toISOString().split("T")[0],hours:D,billableHours:g,nonBillableHours:b,hourlyRate:y.hourlyRate,projectMultiplier:h,totalCost:w,billableValue:v,efficiency:D>0?g/D:0,description:e.description||"Imported from Clockify",tags:(e.tags?.map(e=>e.name||e.id||"")||[]).filter(Boolean)};await (0,r.jv)(I),console.log(`‚úÖ Imported: ${o.name} - ${a.name} - ${D.toFixed(2)}h (${e.billable?"Billable":"Non-billable"}) - $${w.toFixed(2)}`),n++}catch(a){let t=`Error processing entry ${e.id}: ${a instanceof Error?a.message:String(a)}`;console.error(`‚ùå ${t}`),c.push(t),s++}let y={totalEntries:a.length,billableHours:p,nonBillableHours:d,totalCost:m,totalBillableValue:u};return console.log(`üìä Import completed: ${n} imported, ${s} skipped, ${c.length} errors`),console.log(`üí∞ Summary: ${p.toFixed(2)} billable hours, ${d.toFixed(2)} non-billable hours`),console.log(`üíµ Total cost: $${m.toFixed(2)}, Total billable value: $${u.toFixed(2)}`),c.length>0&&console.warn(`‚ö†Ô∏è ${c.length} errors encountered during import`),{success:n>0,recordsImported:n,recordsSkipped:s,errors:c,summary:y}}catch(e){return console.error("‚ùå Clockify time entries import failed:",e),{success:!1,recordsImported:0,recordsSkipped:0,errors:[e instanceof Error?e.message:String(e)],summary:{totalEntries:0,billableHours:0,nonBillableHours:0,totalCost:0,totalBillableValue:0}}}}parseDuration(e){let t=e.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);return t?parseInt(t[1]||"0")+parseInt(t[2]||"0")/60+parseInt(t[3]||"0")/3600:0}async getImportStatistics(){return{totalEmployees:this.employeeMap.size,totalSalaries:this.salaryMap.size,totalProjectMultipliers:this.multiplierMap.size,lastImportDate:new Date().toISOString()}}}let i=new l,n=async(e,t)=>await i.importTimeEntries(e,t)},24544:(e,t,a)=>{a.d(t,{DD:()=>m,K7:()=>s,XA:()=>d,Xp:()=>r,Y0:()=>u,_B:()=>o.Z,eC:()=>c,eK:()=>l,jv:()=>p,lA:()=>n,te:()=>i});var o=a(9487);async function r(){try{return await o.Z.$connect(),console.log("Database connection successful"),await o.Z.projection.findFirst(),console.log("Database schema already exists"),!0}catch(e){if(console.error("Database connection or schema check failed:",e),e.message?.includes("ENOTFOUND")||e.message?.includes("ECONNREFUSED"))return console.error("‚ùå Database connection failed - check your DATABASE_URL"),console.error("   Current DATABASE_URL:",process.env.DATABASE_URL?"Set":"Not set"),!1;if("P2021"===e.code||e.message?.includes("does not exist"))try{return console.log("Tables do not exist, attempting to create schema..."),await o.Z.projection.create({data:{projectId:"__test__",month:"__test__",value:0}}),await o.Z.projection.deleteMany({where:{projectId:"__test__",month:"__test__"}}),console.log("Database schema created successfully"),!0}catch(e){return console.error("Failed to create database schema:",e),!1}return console.log("Tables do not exist, but Prisma Accelerate will create them automatically"),console.log("Note: With Prisma Accelerate, tables are created automatically when you first insert data"),!1}finally{await o.Z.$disconnect()}}async function l(){try{if(console.log("Creating database schema..."),await r())return console.log("Database schema creation completed successfully"),!0;return console.error("Database schema creation failed"),!1}catch(e){return console.error("Database schema creation failed:",e),!1}}async function i(e){try{let t=await o.Z.bamboohr_config.upsert({where:{subdomain:e.subdomain},update:{api_key:e.apiKey,webhook_secret:e.webhookSecret,is_active:!0,last_sync:new Date,updated_at:new Date},create:{subdomain:e.subdomain,api_key:e.apiKey,webhook_secret:e.webhookSecret,is_active:!0,last_sync:new Date,created_at:new Date,updated_at:new Date}});return console.log(`BambooHR config saved for subdomain: ${e.subdomain}`),t}catch(e){throw console.error("Error saving BambooHR config:",e),e}}async function n(e){try{console.log(`üîÑ Attempting to upsert employee:`,JSON.stringify(e,null,2));let t=await o.Z.employees.upsert({where:{id:e.id},update:{name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hire_date:e.hireDate||null,termination_date:e.terminationDate,updated_at:new Date},create:{id:e.id,name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hire_date:e.hireDate||null,termination_date:e.terminationDate,created_at:new Date,updated_at:new Date}});return console.log(`‚úÖ Employee saved: ${e.name} (${e.id})`),t}catch(t){if(console.error("‚ùå Error saving employee:",t),"P2025"===t.code){console.log(`üîÑ Record not found, attempting to create employee: ${e.name} (${e.id})`);try{let t=await o.Z.employees.create({data:{id:e.id,name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hire_date:e.hireDate||null,termination_date:e.terminationDate,created_at:new Date,updated_at:new Date}});return console.log(`‚úÖ Employee created: ${e.name} (${e.id})`),t}catch(e){throw console.error("‚ùå Error creating employee:",e),e}}throw t}}async function s(e){try{console.log(`üîÑ Attempting to upsert employee salary:`,JSON.stringify(e,null,2));let t=await o.Z.employeesSalary.upsert({where:{employeeId_effectiveDate:{employeeId:e.employeeId,effectiveDate:e.effectiveDate}},update:{endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency,notes:e.notes,source:e.source,updatedAt:new Date},create:{employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency||"USD",notes:e.notes,source:e.source||"bamboohr"}});return console.log(`‚úÖ Employee salary saved for ${e.employeeId} effective ${e.effectiveDate}`),t}catch(t){if(console.error("‚ùå Error saving employee salary:",t),"P2025"===t.code){console.log(`üîÑ Record not found, attempting to create employee salary for ${e.employeeId} effective ${e.effectiveDate}`);try{let t=await o.Z.employeesSalary.create({data:{employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency||"USD",notes:e.notes,source:e.source||"bamboohr"}});return console.log(`‚úÖ Employee salary created for ${e.employeeId} effective ${e.effectiveDate}`),t}catch(e){throw console.error("‚ùå Error creating employee salary:",e),e}}throw t}}async function c(e){try{let t=await o.Z.projectsMultiplier.upsert({where:{projectId_effectiveDate:{projectId:e.projectId,effectiveDate:e.effectiveDate}},update:{projectName:e.projectName,multiplier:e.multiplier,endDate:e.endDate,notes:e.notes,updatedAt:new Date},create:{projectId:e.projectId,projectName:e.projectName,multiplier:e.multiplier,effectiveDate:e.effectiveDate,endDate:e.endDate,notes:e.notes}});return console.log(`Project multiplier saved for ${e.projectName} effective ${e.effectiveDate}`),t}catch(e){throw console.error("Error saving project multiplier:",e),e}}async function p(e){try{let t=await o.Z.employeesTimeEntry.upsert({where:{employeeId_projectId_date:{employeeId:e.employeeId,projectId:e.projectId,date:e.date}},update:{employeeName:e.employeeName,projectName:e.projectName,hours:e.hours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:e.hourlyRate,projectMultiplier:e.projectMultiplier,totalCost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency,description:e.description,tags:e.tags,updatedAt:new Date},create:{employeeId:e.employeeId,employeeName:e.employeeName,projectId:e.projectId,projectName:e.projectName,date:e.date,hours:e.hours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:e.hourlyRate,projectMultiplier:e.projectMultiplier,totalCost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency,description:e.description,tags:e.tags}});return console.log(`Time entry saved for ${e.employeeName} on ${e.date}`),t}catch(e){throw console.error("Error saving time entry:",e),e}}async function d(){try{return await o.Z.employees.findMany({include:{salaries:!0}})}catch(e){throw console.error("Error getting all employees:",e),e}}async function m(){try{return await o.Z.employeesSalary.findMany({include:{employee:!0}})}catch(e){throw console.error("Error getting all employee salaries:",e),e}}async function u(){try{return await o.Z.projectsMultiplier.findMany()}catch(e){throw console.error("Error getting all project multipliers:",e),e}}},9487:(e,t,a)=>{a.d(t,{Z:()=>r});var o=a(53524);let r=globalThis.prisma??new o.PrismaClient({log:["error"]})}};