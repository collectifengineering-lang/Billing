"use strict";exports.id=8403,exports.ids=[8403],exports.modules={88403:(e,r,t)=>{t.d(r,{ZP:()=>i,e1:()=>s,wu:()=>n});class o{constructor(){this.apiKey=null,this.workspaceId=null,this.baseUrl="https://api.clockify.me/api/v1",this.reportsBaseUrl="https://reports.api.clockify.me/v1",this._isConfigured=!1,this.apiKey=process.env.CLOCKIFY_API_KEY||null,this.workspaceId=process.env.CLOCKIFY_WORKSPACE_ID||null,this.apiKey&&"your_clockify_api_key_here"!==this.apiKey&&this.workspaceId&&"your_clockify_workspace_id_here"!==this.workspaceId?(this._isConfigured=!0,console.info("Clockify service initialized with valid credentials")):(this._isConfigured=!1,console.warn("Clockify service initialized without valid credentials - will use mock data"),console.warn("Please set CLOCKIFY_API_KEY and CLOCKIFY_WORKSPACE_ID in your environment variables"))}getHeaders(){if(!this.apiKey)throw Error("Clockify API key not configured");return{"X-Api-Key":this.apiKey,"Content-Type":"application/json"}}async makeRequest(e,r){if(!this._isConfigured)throw Error("Clockify service not properly configured");try{let t=new URL(`${this.baseUrl}${e}`);r&&Object.keys(r).forEach(e=>{void 0!==r[e]&&null!==r[e]&&t.searchParams.append(e,r[e])}),console.log(`üîç Clockify API Request: ${t.toString()}`),console.log(`   Headers: ${JSON.stringify(this.getHeaders())}`);let o=await fetch(t.toString(),{method:"GET",headers:this.getHeaders()});if(console.log(`üì° Clockify API Response: ${o.status} ${o.statusText}`),401===o.status)throw Error("Clockify API authentication failed - check your API key");if(403===o.status)throw Error("Clockify API access forbidden - check your workspace ID and permissions");if(404===o.status){let r=`Endpoint not found: ${e}`;throw console.error(`‚ùå 404 Error Details: ${r}`),console.error(`   Full URL: ${t.toString()}`),console.error(`   Workspace ID: ${this.workspaceId}`),console.error(`   API Key configured: ${!!this.apiKey}`),Error(`Clockify API error: 404 Not Found - ${r}`)}if(429===o.status)throw Error("Clockify API rate limit exceeded - try again later");if(!o.ok){let e=await o.text().catch(()=>"Unknown error");throw Error(`Clockify API error: ${o.status} ${o.statusText} - ${e}`)}let s=await o.json();return console.log(`‚úÖ Clockify API Success: ${e}`),s}catch(r){if(r instanceof Error)throw console.error(`‚ùå Clockify API Error in ${e}:`,r.message),r;throw Error(`Clockify API request failed: ${r}`)}}isConfigured(){return this._isConfigured}getConfigurationStatus(){return{configured:this._isConfigured,hasApiKey:!!(this.apiKey&&"your_clockify_api_key_here"!==this.apiKey),hasWorkspaceId:!!(this.workspaceId&&"your_clockify_workspace_id_here"!==this.workspaceId)}}getConfigStatus(){return this.getConfigurationStatus()}setWorkspaceId(e){this.workspaceId=e,this.apiKey&&"your_clockify_api_key_here"!==this.apiKey&&(this._isConfigured=!0)}async getUser(){try{if(!this._isConfigured)return console.log("Clockify not configured, returning mock user"),this.getMockUser();let e=new URL(`${this.baseUrl}/user`);console.log(`üîç Clockify API Request: ${e.toString()}`);let r=await fetch(e.toString(),{method:"GET",headers:this.getHeaders()});if(!r.ok)throw Error(`Clockify API error: ${r.status} ${r.statusText}`);let t=await r.json();return console.log(`‚úÖ Clockify API Success: /user`),t}catch(e){return console.error("Failed to get Clockify user:",e),console.log("Returning mock user due to Clockify API failure"),this.getMockUser()}}async getWorkspaces(){try{return await this.makeRequest("/workspaces")}catch(e){return console.error("Failed to get Clockify workspaces:",e),[{id:"mock-workspace-id",name:"Mock Workspace",hourlyRate:{amount:100,currency:"USD"}}]}}async getProjects(){try{if(!this._isConfigured)return console.log("Clockify not configured, returning mock projects"),this.getMockProjects();if(!this.workspaceId)throw Error("Workspace ID not configured");let e=new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/projects`);console.log(`üîç Clockify API Request: ${e.toString()}`);let r=await fetch(e.toString(),{method:"GET",headers:this.getHeaders()});if(!r.ok)throw Error(`Clockify API error: ${r.status} ${r.statusText}`);let t=await r.json();return console.log(`‚úÖ Clockify API Success: /workspaces/${this.workspaceId}/projects`),t}catch(e){return console.error("Failed to get Clockify projects:",e),console.log("Returning mock projects due to Clockify API failure"),this.getMockProjects()}}async getTimeEntries(e,r,t){try{if(!this._isConfigured)return console.log("Clockify not configured, returning mock data"),this.getMockTimeEntries(e,r,t);if(!this.workspaceId)throw Error("Workspace ID not configured");let o=new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/projects/${e}/time-entries`);o.searchParams.append("start",r),o.searchParams.append("end",t),console.log(`üîç Clockify API Request: ${o.toString()}`);let s=await fetch(o.toString(),{method:"GET",headers:this.getHeaders()});if(!s.ok)throw Error(`Clockify API error: ${s.status} ${s.statusText}`);let i=await s.json();return console.log(`‚úÖ Clockify API Success: /workspaces/${this.workspaceId}/projects/${e}/time-entries`),i}catch(o){return console.error("Failed to get Clockify time entries:",o),console.log("Returning mock time entry data due to Clockify API failure"),this.getMockTimeEntries(e,r,t)}}async getAllTimeEntries(e,r){try{if(!this.workspaceId)throw Error("Workspace ID not configured");try{return console.info("\uD83D\uDD04 Attempting to fetch time entries via Clockify Reports API (requires Pro plan)..."),await this.getTimeEntriesViaReports(e,r)}catch(t){return console.warn("‚ö†Ô∏è Clockify Reports API failed, falling back to user time entries endpoint:",{error:t instanceof Error?t.message:"Unknown error",reason:"Reports API may require Pro plan or may be temporarily unavailable",fallback:"Using user time entries endpoint instead"}),await this.getTimeEntriesViaUserEndpoint(e,r)}}catch(t){return console.error("‚ùå Failed to get all Clockify time entries:",t),console.warn("\uD83C\uDFAD Returning mock time entry data due to Clockify API failure. Check your plan level and API configuration."),[{id:"mock-time-entry-1",description:"Mock work session (Clockify API unavailable)",timeInterval:{start:e,end:r,duration:"PT8H0M"},billable:!0,userId:"mock-user-id",userName:"Mock User",projectId:"mock-project-1",projectName:"Mock Project 1"}]}}async getTimeEntriesViaReports(e,r){let t=new URL(`${this.reportsBaseUrl}/workspaces/${this.workspaceId}/reports/detailed`);console.info(`üîç Clockify Reports API Request: ${t.toString()}`),console.info("   Method: POST (Reports API)"),console.info(`   Headers: ${JSON.stringify(this.getHeaders())}`),console.info(`   Body: ${JSON.stringify({dateRangeStart:e,dateRangeEnd:r,detailedFilter:{pageSize:1e3,sortColumn:"DATE"}})}`);let o=await fetch(t.toString(),{method:"POST",headers:{...this.getHeaders(),"Content-Type":"application/json"},body:JSON.stringify({dateRangeStart:e,dateRangeEnd:r,detailedFilter:{pageSize:1e3,sortColumn:"DATE"}})});if(console.info(`üì° Clockify Reports API Response: ${o.status} ${o.statusText}`),401===o.status)throw Error("Clockify API authentication failed - check your API key");if(403===o.status)throw Error("Clockify API access forbidden - check your workspace ID and permissions. Note: Detailed reports require Pro plan or higher.");if(404===o.status){let e=`Reports endpoint not found: /workspaces/${this.workspaceId}/reports/detailed`;throw console.error(`‚ùå 404 Error Details: ${e}`),console.error(`   Full URL: ${t.toString()}`),console.error(`   Workspace ID: ${this.workspaceId}`),console.error(`   API Key configured: ${!!this.apiKey}`),console.error("   Note: This endpoint requires Clockify Pro plan or higher for detailed reports"),Error(`Clockify API error: 404 Not Found - ${e}. This endpoint requires Pro plan or higher.`)}if(405===o.status)throw Error("Clockify API method not allowed - this endpoint requires POST method");if(429===o.status)throw Error("Clockify API rate limit exceeded - try again later");if(!o.ok){let e=await o.text().catch(()=>"Unknown error");throw console.error(`Clockify Reports API error response body: ${e}`),Error(`Clockify API error: ${o.status} ${o.statusText} - ${e}`)}let s=await o.json();return(console.info(`‚úÖ Clockify Reports API Success: /workspaces/${this.workspaceId}/reports/detailed`),s.timeentries&&Array.isArray(s.timeentries))?(console.info(`üìä Processing ${s.timeentries.length} time entries from Reports API`),s.timeentries.map((t,o)=>{try{let e="PT0H0M";if(void 0!==t.duration&&null!==t.duration){if("number"==typeof t.duration&&t.duration>0){let r=Math.floor(t.duration/3600),o=Math.floor(t.duration%3600/60);e=`PT${r}H${o}M`}else"string"==typeof t.duration&&"PT0H0M"!==t.duration&&(e=t.duration)}if("PT0H0M"===e&&t.timeInterval?.start&&t.timeInterval?.end)try{let r=new Date(t.timeInterval.start),o=new Date(t.timeInterval.end);if(!isNaN(r.getTime())&&!isNaN(o.getTime())&&o>r){let t=(o.getTime()-r.getTime())/36e5,s=Math.floor(t);e=`PT${s}H${Math.floor((t-s)*60)}M`}}catch(e){console.warn(`‚ö†Ô∏è Error calculating duration from start/end times for entry ${o}:`,e)}let r=t.id||`reports-entry-${o}-${Date.now()}`;return o<3&&console.info(`üìù Sample entry ${o}:`,{id:r,duration:t.duration,convertedDuration:e,projectId:t.projectId,userId:t.userId}),{id:r,description:t.description||"No description",timeInterval:{start:t.timeInterval?.start||t.start,end:t.timeInterval?.end||t.end,duration:e},billable:t.billable||!1,userId:t.userId||"unknown-user",userName:t.userName||"Unknown User",projectId:t.projectId||"unknown-project",projectName:t.projectName||"Unknown Project",hourlyRate:t.hourlyRate||0}}catch(s){return console.error(`‚ùå Error processing time entry ${o}:`,s),console.error("   Raw entry data:",t),{id:`error-entry-${o}-${Date.now()}`,description:"Error processing entry",timeInterval:{start:e,end:r,duration:"PT0H0M"},billable:!1,userId:"error-user",userName:"Error User",projectId:"error-project",projectName:"Error Project",hourlyRate:0}}}).filter(e=>null!==e)):(console.warn("‚ö†Ô∏è No time entries found in Reports API response"),[])}async getTimeEntriesViaUserEndpoint(e,r){try{let t=await this.getUser();if(!t?.id)throw Error("Could not get current user for time entries");let o=new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/user/${t.id}/time-entries`);o.searchParams.set("start",e),o.searchParams.set("end",r),console.info(`üîç Clockify User Time Entries API Request (Fallback): ${o.toString()}`),console.info("   Method: GET (User Time Entries - Fallback from Reports API)"),console.info(`   Headers: ${JSON.stringify(this.getHeaders())}`),console.info("   Note: Using fallback method because Reports API failed or requires Pro plan");let s=await fetch(o.toString(),{method:"GET",headers:this.getHeaders()});if(console.info(`üì° Clockify User Time Entries API Response: ${s.status} ${s.statusText}`),!s.ok){let e=await s.text().catch(()=>"Unknown error");throw console.error(`Clockify User Time Entries API error response body: ${e}`),Error(`Clockify User Time Entries API error: ${s.status} ${s.statusText} - ${e}`)}let i=await s.json();if(console.info(`‚úÖ Clockify User Time Entries API Success (Fallback): /workspaces/${this.workspaceId}/user/${t.id}/time-entries`),console.info(`   Retrieved ${i?.length||0} time entries via fallback method`),Array.isArray(i))return i.map((t,o)=>{try{let e="PT0H0M";if(void 0!==t.duration&&null!==t.duration){if("number"==typeof t.duration&&t.duration>0){let r=Math.floor(t.duration/3600),o=Math.floor(t.duration%3600/60);e=`PT${r}H${o}M`}else"string"==typeof t.duration&&"PT0H0M"!==t.duration&&(e=t.duration)}if("PT0H0M"===e&&t.timeInterval?.start&&t.timeInterval?.end)try{let r=new Date(t.timeInterval.start),o=new Date(t.timeInterval.end);if(!isNaN(r.getTime())&&!isNaN(o.getTime())&&o>r){let t=(o.getTime()-r.getTime())/36e5,s=Math.floor(t);e=`PT${s}H${Math.floor((t-s)*60)}M`}}catch(e){console.warn(`‚ö†Ô∏è Error calculating duration from start/end times for fallback entry ${o}:`,e)}let r=t.id||`user-entry-${o}-${Date.now()}`;return o<3&&console.info(`üìù Fallback entry ${o}:`,{id:r,duration:t.duration,convertedDuration:e,projectId:t.projectId,userId:t.userId}),{id:r,description:t.description||"No description",timeInterval:{start:t.timeInterval?.start||t.start,end:t.timeInterval?.end||t.end,duration:e},billable:t.billable||!1,userId:t.userId||"unknown-user",userName:t.userName||"Unknown User",projectId:t.projectId||"unknown-project",projectName:t.projectName||"Unknown Project",hourlyRate:t.hourlyRate||0}}catch(s){return console.error(`‚ùå Error processing fallback time entry ${o}:`,s),console.error("   Raw entry data:",t),{id:`error-fallback-${o}-${Date.now()}`,description:"Error processing fallback entry",timeInterval:{start:e,end:r,duration:"PT0H0M"},billable:!1,userId:"error-user",userName:"Error User",projectId:"error-project",projectName:"Error Project",hourlyRate:0}}}).filter(e=>null!==e);return[]}catch(e){throw console.error("Failed to get time entries via user endpoint (fallback):",e),e}}async getProjectTimeReport(e,r,t){try{if(!this.workspaceId)throw Error("Workspace ID not configured");let o=await this.getTimeEntries(e,r,t),s=await this.getProjects().then(r=>r.find(r=>r.id===e));if(!s)throw Error("Project not found");let i=o.reduce((e,r)=>{let t=r.timeInterval.duration,o=this.parseDuration(t);return e+o},0),n=o.filter(e=>e.billable).reduce((e,r)=>{let t=r.timeInterval.duration,o=this.parseDuration(t);return e+o},0),a=i-n;return{projectId:e,projectName:s.name,totalHours:i,billableHours:n,nonBillableHours:a,totalAmount:i*("object"==typeof s.hourlyRate?s.hourlyRate.amount:s.hourlyRate||0),billableAmount:n*("object"==typeof s.hourlyRate?s.hourlyRate.amount:s.hourlyRate||0),nonBillableAmount:a*("object"==typeof s.hourlyRate?s.hourlyRate.amount:s.hourlyRate||0),entries:o,period:{start:r,end:t}}}catch(e){return console.error("Failed to get project time report:",e),null}}async getAllProjectsTimeSummary(e,r){try{if(!this.workspaceId)throw Error("Workspace ID not configured");let t=await this.getProjects(),o=[];for(let s of t){let t=await this.getProjectTimeReport(s.id,e,r);t&&o.push(t)}return o}catch(e){return console.error("Failed to get all projects time summary:",e),[]}}parseDuration(e){if(!e||"PT0H0M"===e||"PT0H"===e)return 0;let r=e.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?/);if(!r){let r=parseFloat(e);return isNaN(r)?0:r/3600}return parseInt(r[1]||"0")+parseInt(r[2]||"0")/60+parseFloat(r[3]||"0")/3600}getMockTimeEntries(e,r,t){return[{id:`mock-${e}-1`,description:"Mock project work",timeInterval:{start:r,end:t,duration:"PT8H0M"},billable:!0,userId:"mock-user-id",userName:"Mock User",projectId:e,projectName:"Mock Project"}]}getMockProjects(){return[{id:"mock-project-1",name:"Mock Project 1",workspaceId:"mock-workspace",clientId:"mock-client-1",clientName:"Mock Client 1",isPublic:!0,isTemplate:!1,color:"#000000",billable:!0,public:!0,archived:!1,status:"ACTIVE",budget:5e4,hourlyRate:{amount:150,currency:"USD"}}]}getMockUser(){return{id:"mock-user-id",email:"mock@example.com",name:"Mock User",profilePicture:"",status:"ACTIVE",activeWorkspace:"mock-workspace",defaultWorkspace:"mock-workspace"}}async importTimeEntries(e,r){try{console.log("\uD83D\uDD04 Starting Clockify time entries import..."),console.log(`üìÖ Date range: ${e} to ${r}`);let t=await this.getTimeEntries("",e,r);if(console.log(`üìä Found ${t.length} time entries to process`),0===t.length)return console.log("‚ö†Ô∏è No time entries found for the specified date range"),{success:!0,recordsImported:0,errors:[],summary:{totalEntries:0,billableHours:0,nonBillableHours:0,totalCost:0}};let[o,s]=await Promise.all([this.getProjects(),this.getWorkspaces().then(e=>e.length>0?this.getUsers(e[0].id):[])]);console.log(`üìã Retrieved ${o.length} projects and ${s.length} users for mapping`);let i=0,n=[],a=0,l=0,c=0;for(let e of t)try{let r=s.find(r=>r.id===e.userId),t=o.find(r=>r.id===e.projectId);if(!r||!t){let r=`Missing user (${e.userId}) or project (${e.projectId}) for entry ${e.id}`;console.warn(`‚ö†Ô∏è ${r}`),n.push(r);continue}let u=this.parseDuration(e.timeInterval.duration),d=e.billable?u:0,p=e.billable?0:u,h="object"==typeof t.hourlyRate?t.hourlyRate.amount:t.hourlyRate||0,f=u*h;a+=d,l+=p,c+=f,console.log(`‚úÖ Processed entry: ${r.name} - ${t.name} - ${u.toFixed(2)}h (${e.billable?"Billable":"Non-billable"})`),i++}catch(t){let r=`Error processing entry ${e.id}: ${t}`;console.error(`‚ùå ${r}`),n.push(r)}let u={totalEntries:t.length,billableHours:a,nonBillableHours:l,totalCost:c};return console.log(`üìä Import completed: ${i}/${t.length} entries processed successfully`),console.log(`üí∞ Summary: ${a.toFixed(2)} billable hours, ${l.toFixed(2)} non-billable hours, $${c.toFixed(2)} total cost`),n.length>0&&console.warn(`‚ö†Ô∏è ${n.length} errors encountered during import`),{success:i>0,recordsImported:i,errors:n,summary:u}}catch(e){return console.error("‚ùå Clockify time entries import failed:",e),{success:!1,recordsImported:0,errors:[e instanceof Error?e.message:"Unknown error"],summary:{totalEntries:0,billableHours:0,nonBillableHours:0,totalCost:0}}}}async getUsers(e){try{if(!this.apiKey)throw Error("API key not configured");let r=`${this.baseUrl}/workspaces/${e}/users`;console.info(`üîç Clockify Users API Request: ${r}`);let t=await fetch(r,{method:"GET",headers:this.getHeaders()});if(!t.ok)throw Error(`Clockify API error: ${t.status} ${t.statusText}`);let o=await t.json();return console.info(`‚úÖ Retrieved ${o.length} users from workspace ${e}`),o}catch(e){return console.error("Failed to get users:",e),[this.getMockUser()]}}}let s=new o,i=s,n=async(e,r)=>{try{return await s.getAllProjectsTimeSummary(e,r)}catch(e){return console.error("Error fetching Clockify time summaries:",e),[]}}}};