"use strict";exports.id=928,exports.ids=[928],exports.modules={80645:(e,t,o)=>{o.d(t,{Ui:()=>n,_O:()=>c,configureBambooHR:()=>i,getBambooHRService:()=>s});var a=o(18159);class r{constructor(e){this.config=e,this.baseUrl=`https://api.bamboohr.com/api/gateway.php/${e.subdomain}/v1`}async makeRequest(e,t={}){let o=`${this.baseUrl}${e}`,r=Buffer.from(`${this.config.apiKey}:x`).toString("base64"),l={Authorization:`Basic ${r}`,Accept:"application/json, application/xml","Content-Type":"application/json",...t.headers};try{let r=await fetch(o,{...t,headers:l});if(!r.ok){let e=await r.text().catch(()=>"");throw Error(`BambooHR API error: ${r.status} ${r.statusText} ${e?`- ${e}`:""}`)}let i=r.headers.get("content-type")||"";if(!(i.includes("application/xml")||i.includes("text/xml")))return await r.json();{let t=await r.text();console.log(`📄 Parsing XML response from ${e}`);try{return await (0,a.parseStringPromise)(t,{explicitArray:!1,mergeAttrs:!0})}catch(e){throw console.error("❌ XML parsing failed:",e),Error(`Failed to parse XML response: ${e}`)}}}catch(e){throw console.error("BambooHR API request failed:",e),e}}async getAllEmployees(){let e=[],t=1;for(console.log("\uD83D\uDD04 Starting BambooHR employee fetch with pagination...");;){let o=t>1?`?page=${t}`:"",a=`/employees/directory${o}`;try{let o=await this.makeRequest(a),r=[];if(o.employees?r=o.employees:o.employee?r=Array.isArray(o.employee)?o.employee:[o.employee]:o.directory&&o.directory.employee?r=Array.isArray(o.directory.employee)?o.directory.employee:[o.directory.employee]:(console.log(`📄 No employee data found in response format:`,Object.keys(o)),r=[]),console.log(`📄 BambooHR: fetched ${r.length} employees from ${a} (page ${t})`),0===r.length){console.log("\uD83D\uDCC4 No more employees found, ending pagination");break}if(e.push(...r),r.length<500){console.log(`📄 Reached end of results (${r.length} < 500), ending pagination`);break}if((t+=1)>100){console.warn("⚠️ Pagination safety limit reached (100 pages), stopping to prevent infinite loop");break}}catch(e){console.error(`❌ Error fetching page ${t} from BambooHR:`,e);break}}return console.log(`✅ BambooHR: total employees aggregated = ${e.length} from ${t-1} pages`),e.length>500&&(console.log("⚠️ Large employee count detected, ensuring pagination is working correctly"),console.log(`📊 Employee count breakdown: ${e.length} total employees across ${t-1} pages`)),e}async getEmployee(e){return(await this.makeRequest(`/employees/${e}`)).employee}async getEmployeeDirectory(){let e=await this.makeRequest("/employees/directory");return e.employees?e.employees:e.employee?Array.isArray(e.employee)?e.employee:[e.employee]:e.directory&&e.directory.employee?Array.isArray(e.directory.employee)?e.directory.employee:[e.directory.employee]:(console.log("\uD83D\uDCC4 No employee data found in response format:",Object.keys(e)),[])}async getEmployeeCompensation(e){try{console.log(`💰 Fetching compensation for employee ${e}...`);let t=await this.makeRequest(`/employees/${e}/tables/compensation`);if(t.tables&&t.tables.compensation){let o=t.tables.compensation;return console.log(`✅ Found ${o.length} compensation records for employee ${e}`),o.map(t=>({employeeId:e,effectiveDate:t.effectiveDate||t["effective-date"]||"",endDate:t.endDate||t["end-date"]||"",annualSalary:parseFloat(t.annualSalary||t["annual-salary"]||"0"),hourlyRate:parseFloat(t.hourlyRate||t["hourly-rate"]||"0"),currency:t.currency||"USD",payType:t.payType||t["pay-type"]||"salary",paySchedule:t.paySchedule||t["pay-schedule"]||"monthly"}))}return console.log(`⚠️ No compensation data found for employee ${e}`),[]}catch(t){return console.error(`❌ Error fetching compensation for employee ${e}:`,t),[]}}async getCompensationHistory(e,t,o){let a=`/employees/${e}/tables/compensation`,r=new URLSearchParams;t&&r.append("startDate",t),o&&r.append("endDate",o),r.toString()&&(a+=`?${r.toString()}`);try{let t=await this.makeRequest(a);if(t.tables&&t.tables.compensation){let o=t.tables.compensation;return console.log(`✅ Found ${o.length} historical compensation records for employee ${e}`),o.map(t=>({employeeId:e,effectiveDate:t.effectiveDate||t["effective-date"]||"",endDate:t.endDate||t["end-date"]||"",annualSalary:parseFloat(t.annualSalary||t["annual-salary"]||"0"),hourlyRate:parseFloat(t.hourlyRate||t["hourly-rate"]||"0"),currency:t.currency||"USD",payType:t.payType||t["pay-type"]||"salary",paySchedule:t.paySchedule||t["pay-schedule"]||"monthly"}))}return[]}catch(t){return console.error(`❌ Error fetching compensation history for employee ${e}:`,t),[]}}async getEmployeeTimeOff(e){return(await this.makeRequest(`/employees/${e}/timeoff`)).timeOff||[]}async getAllTimeOff(e,t){let o="/timeoff",a=new URLSearchParams;return e&&a.append("startDate",e),t&&a.append("endDate",t),a.toString()&&(o+=`?${a.toString()}`),(await this.makeRequest(o)).timeOff||[]}async getCustomReport(e){return(await this.makeRequest(`/reports/${e}`)).report}async createCustomReport(e){return(await this.makeRequest("/reports",{method:"POST",body:JSON.stringify(e)})).report}async getCompanyInfo(){return(await this.makeRequest("/company")).company}async createWebhook(e){return(await this.makeRequest("/webhooks",{method:"POST",body:JSON.stringify(e)})).webhook}async getWebhooks(){return(await this.makeRequest("/webhooks")).webhooks||[]}async deleteWebhook(e){await this.makeRequest(`/webhooks/${e}`,{method:"DELETE"})}calculateHourlyRate(e,t){let o;switch(t){case"weekly":case"bi-weekly":default:o=2080;break;case"semi-monthly":o=2080.08;break;case"monthly":o=2079.96}return e/o}async importEmployees(){try{console.log("\uD83D\uDD04 Starting employee import from BambooHR...");let e=await this.getAllEmployees();console.log(`👥 BambooHR import: preparing to upsert ${e.length} employees`);let t=[],o=0,a=0;for(let r of e)try{let e={id:r.id,name:r.displayName,email:r.email,status:"active"===r.status?"active":"inactive",department:r.department,position:r.jobTitle,hireDate:r.hireDate,terminationDate:r.terminationDate};t.push(e),o++,console.log(`✅ Employee mapped: ${r.displayName} (${r.id}) - ${r.department}`)}catch(e){a++,console.error(`❌ Error mapping employee ${r.id}:`,e)}return console.log(`📊 Employee import results: ${o} successful, ${a} errors`),t}catch(e){throw console.error("❌ Employee import failed:",e),e}}async importSalaries(){try{console.log("\uD83D\uDD04 Starting salary import from BambooHR...");let e=await this.getAllEmployees();console.log(`💰 BambooHR import: fetching compensation for ${e.length} employees`);let t=[],o=0,a=0,r=0;for(let l of e)try{let e=await this.getEmployeeCompensation(l.id);for(let l of(r+=e.length,e))try{console.log(`💰 Salary record: employeeId=${l.employeeId} effectiveDate=${l.effectiveDate} annualSalary=${l.annualSalary} hourlyRate=${l.hourlyRate}`);let e={employeeId:l.employeeId,effectiveDate:l.effectiveDate,endDate:l.endDate,annualSalary:l.annualSalary,hourlyRate:l.hourlyRate,currency:l.currency,notes:`Imported from BambooHR - ${l.payType} (${l.paySchedule})`};t.push(e),o++}catch(e){a++,console.error(`❌ Error processing compensation for employee ${l.employeeId}:`,e)}}catch(e){a++,console.error(`❌ Error fetching compensation for employee ${l.id}:`,e)}return console.log(`📊 Salary import results: ${o} successful, ${a} errors, ${r} total compensation records`),t}catch(e){throw console.error("❌ Salary import failed:",e),e}}async importAllData(){try{console.log("\uD83D\uDD04 Starting comprehensive BambooHR data import...");let[e,t]=await Promise.all([this.importEmployees(),this.importSalaries()]),o={source:"bamboohr",importDate:new Date().toISOString(),recordsImported:e.length+t.length,errors:[]};return console.log(`✅ Comprehensive import completed: ${e.length} employees, ${t.length} salaries`),o}catch(e){return console.error("❌ Comprehensive import failed:",e),{source:"bamboohr",importDate:new Date().toISOString(),recordsImported:0,errors:[e.message]}}}async searchEmployees(e){return(await this.getAllEmployees()).filter(t=>t.displayName.toLowerCase().includes(e.toLowerCase())||t.email.toLowerCase().includes(e.toLowerCase()))}async getEmployeesByDepartment(e){return(await this.getAllEmployees()).filter(t=>t.department===e)}async getActiveEmployees(){return(await this.getAllEmployees()).filter(e=>"active"===e.status)}}let l=null,i=e=>{l=new r(e),console.log(`BambooHR service configured for subdomain: ${e.subdomain}`)},s=()=>{if(!l)throw Error("BambooHR service not configured. Call configureBambooHR first.");return l},n=async()=>{let e=s();return await e.importEmployees()},c=async()=>{let e=s();return await e.importSalaries()}},24544:(e,t,o)=>{o.d(t,{DD:()=>y,K7:()=>n,XA:()=>p,Xp:()=>r,Y0:()=>u,_B:()=>a.Z,eC:()=>c,eK:()=>l,jv:()=>m,lA:()=>s,te:()=>i});var a=o(9487);async function r(){try{return await a.Z.projection.findFirst(),console.log("Database schema already exists"),!0}catch(e){if(console.log("Tables do not exist, attempting to create schema..."),"P2021"===e.code||e.message?.includes("does not exist"))try{return console.log("Attempting to create database schema..."),await a.Z.projection.create({data:{projectId:"__test__",month:"__test__",value:0}}),await a.Z.projection.deleteMany({where:{projectId:"__test__",month:"__test__"}}),console.log("Database schema created successfully"),!0}catch(e){return console.error("Failed to create database schema:",e),!1}return console.log("Tables do not exist, but Prisma Accelerate will create them automatically"),console.log("Note: With Prisma Accelerate, tables are created automatically when you first insert data"),!1}}async function l(){try{if(console.log("Creating database schema..."),await r())return console.log("Database schema creation completed successfully"),!0;return console.error("Database schema creation failed"),!1}catch(e){return console.error("Database schema creation failed:",e),!1}}async function i(e){try{let t=await a.Z.bambooHRConfig.upsert({where:{subdomain:e.subdomain},update:{apiKey:e.apiKey,webhookSecret:e.webhookSecret,isActive:!0,lastSync:new Date,updatedAt:new Date},create:{subdomain:e.subdomain,apiKey:e.apiKey,webhookSecret:e.webhookSecret,isActive:!0,lastSync:new Date}});return console.log(`BambooHR config saved for subdomain: ${e.subdomain}`),t}catch(e){throw console.error("Error saving BambooHR config:",e),e}}async function s(e){try{let t=await a.Z.employee.upsert({where:{id:e.id},update:{name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hireDate:e.hireDate,terminationDate:e.terminationDate,updatedAt:new Date},create:{id:e.id,name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hireDate:e.hireDate,terminationDate:e.terminationDate}});return console.log(`Employee saved: ${e.name} (${e.id})`),t}catch(e){throw console.error("Error saving employee:",e),e}}async function n(e){try{let t=await a.Z.employeeSalary.upsert({where:{employeeId_effectiveDate:{employeeId:e.employeeId,effectiveDate:e.effectiveDate}},update:{endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency,notes:e.notes,source:e.source,updatedAt:new Date},create:{employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency||"USD",notes:e.notes,source:e.source||"bamboohr"}});return console.log(`Employee salary saved for ${e.employeeId} effective ${e.effectiveDate}`),t}catch(e){throw console.error("Error saving employee salary:",e),e}}async function c(e){try{let t=await a.Z.projectMultiplier.upsert({where:{projectId_effectiveDate:{projectId:e.projectId,effectiveDate:e.effectiveDate}},update:{projectName:e.projectName,multiplier:e.multiplier,endDate:e.endDate,notes:e.notes,updatedAt:new Date},create:{projectId:e.projectId,projectName:e.projectName,multiplier:e.multiplier,effectiveDate:e.effectiveDate,endDate:e.endDate,notes:e.notes}});return console.log(`Project multiplier saved for ${e.projectName} effective ${e.effectiveDate}`),t}catch(e){throw console.error("Error saving project multiplier:",e),e}}async function m(e){try{let t=await a.Z.employeeTimeEntry.upsert({where:{employeeId_projectId_date:{employeeId:e.employeeId,projectId:e.projectId,date:e.date}},update:{employeeName:e.employeeName,projectName:e.projectName,hours:e.hours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:e.hourlyRate,projectMultiplier:e.projectMultiplier,totalCost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency,description:e.description,tags:e.tags,updatedAt:new Date},create:{employeeId:e.employeeId,employeeName:e.employeeName,projectId:e.projectId,projectName:e.projectName,date:e.date,hours:e.hours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:e.hourlyRate,projectMultiplier:e.projectMultiplier,totalCost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency,description:e.description,tags:e.tags}});return console.log(`Time entry saved for ${e.employeeName} on ${e.date}`),t}catch(e){throw console.error("Error saving time entry:",e),e}}async function p(){try{return await a.Z.employee.findMany({include:{salaries:!0}})}catch(e){throw console.error("Error getting all employees:",e),e}}async function y(){try{return await a.Z.employeeSalary.findMany({include:{employee:!0}})}catch(e){throw console.error("Error getting all employee salaries:",e),e}}async function u(){try{return await a.Z.projectMultiplier.findMany()}catch(e){throw console.error("Error getting all project multipliers:",e),e}}},9487:(e,t,o)=>{o.d(t,{Z:()=>r});var a=o(53524);let r=globalThis.prisma??new a.PrismaClient({log:["error"]})},80928:(e,t,o)=>{o.d(t,{HE:()=>i,Lk:()=>s,To:()=>c,XI:()=>n});var a=o(80645),r=o(24544);class l{constructor(){this.employees=new Map,this.salaries=new Map,this.multipliers=new Map,console.log("Payroll service initialized")}mapDbEmployeeToDomain(e){let t=(e.status||"").toLowerCase(),o=e=>{if(e){if("string"==typeof e)return e;if(e instanceof Date)return e.toISOString();try{let t=new Date(e);return isNaN(t.getTime())?void 0:t.toISOString()}catch{return}}};return{id:e.id,name:e.name,email:e.email,status:"active"===t?"active":"inactive",department:e.department??void 0,position:e.position??void 0,hireDate:o(e.hireDate)||"",terminationDate:o(e.terminationDate)}}toNumber(e){if("number"==typeof e)return e;if(e&&"function"==typeof e.toNumber)return e.toNumber();let t=parseFloat(String(e));return Number.isNaN(t)?0:t}mapDbSalariesToDomain(e){return(e||[]).map(e=>({employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate??void 0,annualSalary:this.toNumber(e.annualSalary),hourlyRate:this.toNumber(e.hourlyRate),currency:e.currency??void 0,notes:e.notes??void 0}))}mapDbMultipliersToDomain(e){return(e||[]).map(e=>({projectId:e.projectId,projectName:e.projectName,multiplier:this.toNumber(e.multiplier),effectiveDate:e.effectiveDate,endDate:e.endDate??void 0,notes:e.notes??void 0}))}async addEmployee(e){await (0,r.lA)(e),this.employees.set(e.id,e),console.log(`Employee added: ${e.name} (${e.id})`)}async getEmployee(e){let t=this.employees.get(e);if(!t){let o=(await (0,r.XA)()).find(t=>t.id===e);if(o){let a=this.mapDbEmployeeToDomain(o);this.employees.set(e,a),t=a}}return t||null}async getAllEmployees(){let e=(await (0,r.XA)()).map(e=>this.mapDbEmployeeToDomain(e));for(let t of e)this.employees.set(t.id,t);return e}async updateEmployee(e,t){let o=this.employees.get(e);if(o){let a={...o,...t};await (0,r.lA)(a),this.employees.set(e,a),console.log(`Employee updated: ${o.name}`)}}async addSalary(e){await (0,r.K7)(e);let t=this.salaries.get(e.employeeId)||[];if(!e.endDate){let o=t.find(e=>!e.endDate);o&&(o.endDate=e.effectiveDate,await (0,r.K7)(o))}t.push(e),t.sort((e,t)=>new Date(e.effectiveDate).getTime()-new Date(t.effectiveDate).getTime()),this.salaries.set(e.employeeId,t),console.log(`Salary added for ${e.employeeId} effective ${e.effectiveDate}`)}async getEmployeeSalary(e,t){let o=this.salaries.get(e);if(!o||0===o.length){let t=(await (0,r.DD)()).filter(t=>t.employeeId===e);if(t.length>0){let a=this.mapDbSalariesToDomain(t);this.salaries.set(e,a),o=a}}if(!o)return null;let a=new Date(t);return o.find(e=>{let t=new Date(e.effectiveDate),o=new Date(e.endDate?e.endDate:"9999-12-31");return a>=t&&a<=o})||null}async getEmployeeSalaryHistory(e){let t=this.salaries.get(e);if(!t||0===t.length){let o=(await (0,r.DD)()).filter(t=>t.employeeId===e);if(o.length>0){let a=this.mapDbSalariesToDomain(o);this.salaries.set(e,a),t=a}}return t||[]}async addProjectMultiplier(e){await (0,r.eC)(e);let t=this.multipliers.get(e.projectId)||[];if(!e.endDate){let o=t.find(e=>!e.endDate);o&&(o.endDate=e.effectiveDate,await (0,r.eC)(o))}t.push(e),t.sort((e,t)=>new Date(e.effectiveDate).getTime()-new Date(t.effectiveDate).getTime()),this.multipliers.set(e.projectId,t),console.log(`Multiplier added for project ${e.projectName} effective ${e.effectiveDate}`)}async getProjectMultiplier(e,t){let o=this.multipliers.get(e);if(!o||0===o.length){let t=(await (0,r.Y0)()).filter(t=>t.projectId===e);if(t.length>0){let a=this.mapDbMultipliersToDomain(t);this.multipliers.set(e,a),o=a}}if(!o)return null;let a=new Date(t);return o.find(e=>{let t=new Date(e.effectiveDate),o=new Date(e.endDate?e.endDate:"9999-12-31");return a>=t&&a<=o})||null}async getProjectMultiplierHistory(e){let t=this.multipliers.get(e);if(!t||0===t.length){let o=(await (0,r.Y0)()).filter(t=>t.projectId===e);if(o.length>0){let a=this.mapDbMultipliersToDomain(o);this.multipliers.set(e,a),t=a}}return t||[]}async processTimeEntries(e,t,o){let a=[],l=new Map(t.map(e=>[e.id,e]));for(let t of e){let e=l.get(t.userId);if(!e)continue;let i=new Date(t.timeInterval.start).toISOString().split("T")[0];if(!await this.getEmployee(t.userId))continue;let s=await this.getEmployeeSalary(t.userId,i);if(!s)continue;let n=o.find(e=>e.id===t.projectId);if(!n)continue;let c=await this.getProjectMultiplier(t.projectId,i),m=c?.multiplier||1,p=this.parseDuration(t.timeInterval.duration)/36e5,y=t.billable?p:0,u=t.billable?0:p,d=p*s.hourlyRate,f=y*s.hourlyRate*m,h=p>0?y/p:0,g={employeeId:t.userId,employeeName:e.name,projectId:t.projectId,projectName:n.name,date:i,hours:p,billableHours:y,nonBillableHours:u,hourlyRate:s.hourlyRate,projectMultiplier:m,totalCost:d,billableValue:f,efficiency:h,description:t.description,tags:t.tags.map(e=>e.name)};await (0,r.jv)(g),a.push(g)}return a}async generateProjectProfitabilityReport(e,t,o,a,r){let l=a.filter(a=>a.projectId===e&&a.date>=t&&a.date<=o),i=l.reduce((e,t)=>e+t.hours,0),s=l.reduce((e,t)=>e+t.billableHours,0),n=l.reduce((e,t)=>e+t.totalCost,0),c=l.reduce((e,t)=>e+t.billableValue,0),m=r-n,p=s>0?c/(s*l[0]?.hourlyRate||1):0,y=new Map;for(let e of l){let t=y.get(e.employeeId);t?(t.hours+=e.hours,t.cost+=e.totalCost,t.billableValue+=e.billableValue,t.efficiency=t.hours>0?t.billableValue/(t.hours*e.hourlyRate):0):y.set(e.employeeId,{employeeId:e.employeeId,employeeName:e.employeeName,hours:e.hours,cost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency})}let u=new Map;for(let e of l){let t=e.date.substring(0,7),o=u.get(t);o?(o.hours+=e.hours,o.cost+=e.totalCost):u.set(t,{month:t,hours:e.hours,cost:e.totalCost,revenue:0,profit:0})}return{projectId:e,projectName:l[0]?.projectName||"Unknown Project",period:{start:t,end:o},totalHours:i,totalBillableHours:s,totalCost:n,totalRevenue:r,grossProfit:m,profitMargin:r>0?m/r*100:0,averageMultiplier:p,employeeBreakdown:Array.from(y.values()),monthlyBreakdown:Array.from(u.values())}}async generateEmployeeProfitabilityReport(e,t,o,a){let r=a.filter(a=>a.employeeId===e&&a.date>=t&&a.date<=o),l=r.reduce((e,t)=>e+t.hours,0),i=r.reduce((e,t)=>e+t.billableHours,0),s=r.reduce((e,t)=>e+t.totalCost,0),n=r.reduce((e,t)=>e+t.billableValue,0),c=new Map;for(let e of r){let t=c.get(e.projectId);t?(t.hours+=e.hours,t.cost+=e.totalCost,t.billableValue+=e.billableValue,t.efficiency=t.hours>0?t.billableValue/(t.hours*e.hourlyRate):0):c.set(e.projectId,{projectId:e.projectId,projectName:e.projectName,hours:e.hours,cost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency})}return{employeeId:e,employeeName:r[0]?.employeeName||"Unknown Employee",period:{start:t,end:o},totalHours:l,totalBillableHours:i,totalCost:s,totalBillableValue:n,efficiency:l>0?i/l:0,averageHourlyRate:l>0?s/l:0,projectBreakdown:Array.from(c.values())}}async configurePayrollSystem(e){this.payrollSystem=e,console.log(`Payroll system configured: ${e.name}`)}async configureBambooHR(e){this.bamboohrConfig=e,(0,a.configureBambooHR)(e),await (0,r.te)({subdomain:e.subdomain,apiKey:e.apiKey,webhookSecret:e.webhookSecret}),console.log(`BambooHR configured for subdomain: ${e.subdomain}`)}async importSalariesFromBambooHR(){if(!this.bamboohrConfig)throw Error("BambooHR not configured");try{let e=await (0,a.Ui)();console.log(`BambooHR import: upserting ${e.length} employees to Supabase/Prisma`);let t=0,o=[];for(let a of e)try{await this.addEmployee(a),t+=1}catch(e){console.error("BambooHR employee upsert failed:",{id:a.id,name:a.name,error:e?.message||String(e)}),o.push(`emp:${a.id}:${e?.message||e}`)}let r=await (0,a._O)();console.log(`BambooHR import: upserting ${r.length} salaries to Supabase/Prisma`);let l=0,i=[];for(let e of r)try{await this.addSalary(e),l+=1}catch(t){console.error("BambooHR salary upsert failed:",{employeeId:e.employeeId,effectiveDate:e.effectiveDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,error:t?.message||String(t)}),i.push(`sal:${e.employeeId}:${e.effectiveDate}:${t?.message||t}`)}return console.log(`BambooHR import completed: employees ok=${t}, salaries ok=${l}, empErrors=${o.length}, salErrors=${i.length}`),{source:"bamboohr",importDate:new Date().toISOString(),recordsImported:t+l,errors:[...o,...i]}}catch(e){return{source:"bamboohr",importDate:new Date().toISOString(),recordsImported:0,errors:[e.message]}}}async importSalariesFromPayrollSystem(){if(!this.payrollSystem)throw Error("No payroll system configured");return"bamboohr"===this.payrollSystem.type&&this.bamboohrConfig?await this.importSalariesFromBambooHR():{source:"api",importDate:new Date().toISOString(),recordsImported:0,errors:[`${this.payrollSystem.type} integration not yet implemented`]}}parseDuration(e){let t=e.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);return t?(3600*parseInt(t[1]||"0")+60*parseInt(t[2]||"0")+parseInt(t[3]||"0"))*1e3:0}calculateHourlyRate(e,t=2080){return e/t}normalizeEmployee(e){let t=(e.status||"active").toLowerCase();return{id:e.id,name:e.name,email:e.email,status:"active"===t?"active":"inactive",department:e.department??void 0,position:e.position??void 0,hireDate:e.hireDate,terminationDate:e.terminationDate??void 0}}normalizeSalary(e){let t=e=>e&&"object"==typeof e&&"toNumber"in e?e.toNumber():Number(e);return{employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate??void 0,annualSalary:t(e.annualSalary),hourlyRate:t(e.hourlyRate),currency:e.currency||"USD",notes:e.notes??void 0}}normalizeProjectMultiplier(e){let t;return{projectId:e.projectId,projectName:e.projectName,multiplier:(t=e.multiplier)&&"object"==typeof t&&"toNumber"in t?t.toNumber():Number(t),effectiveDate:e.effectiveDate,endDate:e.endDate??void 0,notes:e.notes??void 0}}async exportData(){return{employees:Array.from(this.employees.values()),salaries:Array.from(this.salaries.entries()),multipliers:Array.from(this.multipliers.entries()),payrollSystem:this.payrollSystem,bamboohrConfig:this.bamboohrConfig}}async importData(e){this.employees=new Map(e.employees.map(e=>[e.id,e])),this.salaries=new Map(e.salaries),this.multipliers=new Map(e.multipliers),this.payrollSystem=e.payrollSystem,this.bamboohrConfig=e.bamboohrConfig,this.bamboohrConfig&&(0,a.configureBambooHR)(this.bamboohrConfig),console.log("Payroll data imported successfully")}}let i=new l,s=async(e,t,o)=>await i.processTimeEntries(e,t,o),n=async(e,t,o,a,r)=>await i.generateProjectProfitabilityReport(e,t,o,a,r),c=async(e,t,o,a)=>await i.generateEmployeeProfitabilityReport(e,t,o,a)}};