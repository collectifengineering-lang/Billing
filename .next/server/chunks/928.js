"use strict";exports.id=928,exports.ids=[928],exports.modules={80928:(e,t,r)=>{r.d(t,{HE:()=>l,Lk:()=>s,To:()=>n,XI:()=>i});var a=r(53123);class o{constructor(){this.employees=new Map,this.salaries=new Map,this.multipliers=new Map,console.log("Payroll service initialized")}async addEmployee(e){this.employees.set(e.id,e),console.log(`Employee added: ${e.name} (${e.id})`)}async getEmployee(e){return this.employees.get(e)||null}async getAllEmployees(){return Array.from(this.employees.values())}async updateEmployee(e,t){let r=this.employees.get(e);r&&(this.employees.set(e,{...r,...t}),console.log(`Employee updated: ${r.name}`))}async addSalary(e){let t=this.salaries.get(e.employeeId)||[];if(!e.endDate){let r=t.find(e=>!e.endDate);r&&(r.endDate=e.effectiveDate)}t.push(e),t.sort((e,t)=>new Date(e.effectiveDate).getTime()-new Date(t.effectiveDate).getTime()),this.salaries.set(e.employeeId,t),console.log(`Salary added for ${e.employeeId} effective ${e.effectiveDate}`)}async getEmployeeSalary(e,t){let r=this.salaries.get(e)||[],a=new Date(t);return r.find(e=>{let t=new Date(e.effectiveDate),r=new Date(e.endDate?e.endDate:"9999-12-31");return a>=t&&a<=r})||null}async getEmployeeSalaryHistory(e){return this.salaries.get(e)||[]}async addProjectMultiplier(e){let t=this.multipliers.get(e.projectId)||[];if(!e.endDate){let r=t.find(e=>!e.endDate);r&&(r.endDate=e.effectiveDate)}t.push(e),t.sort((e,t)=>new Date(e.effectiveDate).getTime()-new Date(t.effectiveDate).getTime()),this.multipliers.set(e.projectId,t),console.log(`Multiplier added for project ${e.projectName} effective ${e.effectiveDate}`)}async getProjectMultiplier(e,t){let r=this.multipliers.get(e)||[],a=new Date(t);return r.find(e=>{let t=new Date(e.effectiveDate),r=new Date(e.endDate?e.endDate:"9999-12-31");return a>=t&&a<=r})||null}async getProjectMultiplierHistory(e){return this.multipliers.get(e)||[]}async processTimeEntries(e,t,r){let a=[],o=new Map(t.map(e=>[e.id,e]));for(let t of e){let e=o.get(t.userId);if(!e)continue;let l=new Date(t.timeInterval.start).toISOString().split("T")[0];if(!await this.getEmployee(t.userId))continue;let s=await this.getEmployeeSalary(t.userId,l);if(!s)continue;let i=r.find(e=>e.id===t.projectId);if(!i)continue;let n=await this.getProjectMultiplier(t.projectId,l),y=n?.multiplier||1,p=this.parseDuration(t.timeInterval.duration)/36e5,u=t.billable?p:0,c=t.billable?0:p,m=p*s.hourlyRate,d=u*s.hourlyRate*y,f=p>0?u/p:0;a.push({employeeId:t.userId,employeeName:e.name,projectId:t.projectId,projectName:i.name,date:l,hours:p,billableHours:u,nonBillableHours:c,hourlyRate:s.hourlyRate,projectMultiplier:y,totalCost:m,billableValue:d,efficiency:f,description:t.description,tags:t.tags.map(e=>e.name)})}return a}async generateProjectProfitabilityReport(e,t,r,a,o){let l=a.filter(a=>a.projectId===e&&a.date>=t&&a.date<=r),s=l.reduce((e,t)=>e+t.hours,0),i=l.reduce((e,t)=>e+t.billableHours,0),n=l.reduce((e,t)=>e+t.totalCost,0),y=l.reduce((e,t)=>e+t.billableValue,0),p=o-n,u=i>0?y/(i*l[0]?.hourlyRate||1):0,c=new Map;for(let e of l){let t=c.get(e.employeeId);t?(t.hours+=e.hours,t.cost+=e.totalCost,t.billableValue+=e.billableValue,t.efficiency=t.hours>0?t.billableValue/(t.hours*e.hourlyRate):0):c.set(e.employeeId,{employeeId:e.employeeId,employeeName:e.employeeName,hours:e.hours,cost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency})}let m=new Map;for(let e of l){let t=e.date.substring(0,7),r=m.get(t);r?(r.hours+=e.hours,r.cost+=e.totalCost):m.set(t,{month:t,hours:e.hours,cost:e.totalCost,revenue:0,profit:0})}return{projectId:e,projectName:l[0]?.projectName||"Unknown Project",period:{start:t,end:r},totalHours:s,totalBillableHours:i,totalCost:n,totalRevenue:o,grossProfit:p,profitMargin:o>0?p/o*100:0,averageMultiplier:u,employeeBreakdown:Array.from(c.values()),monthlyBreakdown:Array.from(m.values())}}async generateEmployeeProfitabilityReport(e,t,r,a){let o=a.filter(a=>a.employeeId===e&&a.date>=t&&a.date<=r),l=o.reduce((e,t)=>e+t.hours,0),s=o.reduce((e,t)=>e+t.billableHours,0),i=o.reduce((e,t)=>e+t.totalCost,0),n=o.reduce((e,t)=>e+t.billableValue,0),y=new Map;for(let e of o){let t=y.get(e.projectId);t?(t.hours+=e.hours,t.cost+=e.totalCost,t.billableValue+=e.billableValue,t.efficiency=t.hours>0?t.billableValue/(t.hours*e.hourlyRate):0):y.set(e.projectId,{projectId:e.projectId,projectName:e.projectName,hours:e.hours,cost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency})}return{employeeId:e,employeeName:o[0]?.employeeName||"Unknown Employee",period:{start:t,end:r},totalHours:l,totalBillableHours:s,totalCost:i,totalBillableValue:n,efficiency:l>0?s/l:0,averageHourlyRate:l>0?i/l:0,projectBreakdown:Array.from(y.values())}}async configurePayrollSystem(e){this.payrollSystem=e,console.log(`Payroll system configured: ${e.name}`)}async configureSurePayroll(e){this.surepayrollConfig=e,(0,a.configureSurePayroll)(e),console.log(`SurePayroll configured for client ID: ${e.clientId}`)}async importSalariesFromSurePayroll(){if(!this.surepayrollConfig)throw Error("SurePayroll not configured");try{let e=await (0,a.lg)();for(let t of e)await this.addEmployee(t);let t=await (0,a.$J)();for(let e of t)await this.addSalary(e);return{source:"surepayroll",importDate:new Date().toISOString(),recordsImported:e.length+t.length,errors:[]}}catch(e){return{source:"surepayroll",importDate:new Date().toISOString(),recordsImported:0,errors:[e.message]}}}async importSalariesFromPayrollSystem(){if(!this.payrollSystem)throw Error("No payroll system configured");return"surepayroll"===this.payrollSystem.type&&this.surepayrollConfig?await this.importSalariesFromSurePayroll():{source:"api",importDate:new Date().toISOString(),recordsImported:0,errors:[`${this.payrollSystem.type} integration not yet implemented`]}}parseDuration(e){let t=e.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);return t?(3600*parseInt(t[1]||"0")+60*parseInt(t[2]||"0")+parseInt(t[3]||"0"))*1e3:0}calculateHourlyRate(e,t=2080){return e/t}async exportData(){return{employees:Array.from(this.employees.values()),salaries:Array.from(this.salaries.entries()),multipliers:Array.from(this.multipliers.entries()),payrollSystem:this.payrollSystem,surepayrollConfig:this.surepayrollConfig}}async importData(e){this.employees=new Map(e.employees.map(e=>[e.id,e])),this.salaries=new Map(e.salaries),this.multipliers=new Map(e.multipliers),this.payrollSystem=e.payrollSystem,this.surepayrollConfig=e.surepayrollConfig,this.surepayrollConfig&&(0,a.configureSurePayroll)(this.surepayrollConfig),console.log("Payroll data imported successfully")}}let l=new o,s=async(e,t,r)=>await l.processTimeEntries(e,t,r),i=async(e,t,r,a,o)=>await l.generateProjectProfitabilityReport(e,t,r,a,o),n=async(e,t,r,a)=>await l.generateEmployeeProfitabilityReport(e,t,r,a)},53123:(e,t,r)=>{r.d(t,{$J:()=>n,configureSurePayroll:()=>l,getSurePayrollService:()=>s,lg:()=>i});class a{constructor(e){this.config=e,this.baseUrl="https://api.surepayroll.com/v1"}async makeRequest(e,t={}){let r=`${this.baseUrl}${e}`,a={Authorization:`Bearer ${this.config.apiKey}`,"X-Client-ID":this.config.clientId,Accept:"application/json","Content-Type":"application/json",...t.headers};try{let e=await fetch(r,{...t,headers:a});if(!e.ok)throw Error(`SurePayroll API error: ${e.status} ${e.statusText}`);return await e.json()}catch(e){throw console.error("SurePayroll API request failed:",e),e}}async getAllEmployees(){return(await this.makeRequest("/employees")).employees||[]}async getEmployee(e){return(await this.makeRequest(`/employees/${e}`)).employee}async getEmployeeDirectory(){return(await this.makeRequest("/employees/directory")).employees||[]}async getEmployeeCompensation(e){return(await this.makeRequest(`/employees/${e}/compensation`)).compensation||[]}async getCompensationHistory(e,t,r){let a=`/employees/${e}/compensation/history`,o=new URLSearchParams;return t&&o.append("startDate",t),r&&o.append("endDate",r),o.toString()&&(a+=`?${o.toString()}`),(await this.makeRequest(a)).compensation||[]}async getEmployeeTimeOff(e){return(await this.makeRequest(`/employees/${e}/timeoff`)).timeOff||[]}async getAllTimeOff(e,t){let r="/timeoff",a=new URLSearchParams;return e&&a.append("startDate",e),t&&a.append("endDate",t),a.toString()&&(r+=`?${a.toString()}`),(await this.makeRequest(r)).timeOff||[]}async getCustomReport(e){return(await this.makeRequest(`/reports/${e}`)).report}async createCustomReport(e){return(await this.makeRequest("/reports",{method:"POST",body:JSON.stringify(e)})).report}async getCompanyInfo(){return(await this.makeRequest("/company")).company}async createWebhook(e){return(await this.makeRequest("/webhooks",{method:"POST",body:JSON.stringify(e)})).webhook}async getWebhooks(){return(await this.makeRequest("/webhooks")).webhooks||[]}async deleteWebhook(e){await this.makeRequest(`/webhooks/${e}`,{method:"DELETE"})}calculateHourlyRate(e,t){let r;switch(t){case"weekly":case"bi-weekly":default:r=2080;break;case"semi-monthly":r=2080.08;break;case"monthly":r=2079.96}return e/r}async importEmployees(){return(await this.getAllEmployees()).map(e=>({id:e.id,name:e.displayName,email:e.email,status:"active"===e.status?"active":"inactive",department:e.department,position:e.jobTitle,hireDate:e.hireDate,terminationDate:e.terminationDate}))}async importSalaries(){let e=await this.getAllEmployees(),t=[];for(let r of e)for(let e of(await this.getEmployeeCompensation(r.id)))t.push({employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency,notes:`Imported from SurePayroll - ${e.payType} (${e.paySchedule})`});return t}async importAllData(){try{let e=await this.importEmployees(),t=await this.importSalaries();return{source:"surepayroll",importDate:new Date().toISOString(),recordsImported:e.length+t.length,errors:[]}}catch(e){return{source:"surepayroll",importDate:new Date().toISOString(),recordsImported:0,errors:[e.message]}}}async searchEmployees(e){return(await this.getAllEmployees()).filter(t=>t.displayName.toLowerCase().includes(e.toLowerCase())||t.email.toLowerCase().includes(e.toLowerCase()))}async getEmployeesByDepartment(e){return(await this.getAllEmployees()).filter(t=>t.department===e)}async getActiveEmployees(){return(await this.getAllEmployees()).filter(e=>"active"===e.status)}}let o=null,l=e=>{o=new a(e),console.log(`SurePayroll service configured for client ID: ${e.clientId}`)},s=()=>{if(!o)throw Error("SurePayroll service not configured. Call configureSurePayroll first.");return o},i=async()=>{let e=s();return await e.importEmployees()},n=async()=>{let e=s();return await e.importSalaries()}}};