"use strict";exports.id=928,exports.ids=[928],exports.modules={80645:(e,t,o)=>{o.d(t,{Ui:()=>s,_O:()=>n,configureBambooHR:()=>l,getBambooHRService:()=>i});class a{constructor(e){this.config=e,this.baseUrl=`https://api.bamboohr.com/api/gateway.php/${this.config.subdomain}/v1`}async makeRequest(e,t={}){let o=`${this.baseUrl}${e}`,a=btoa(`${this.config.apiKey}:x`),r={Authorization:`Basic ${a}`,Accept:"application/json","Content-Type":"application/json",...t.headers};console.log(`üîÑ BambooHR API call to: ${e}`),console.log(`üì° URL: ${o}`);try{let a=await fetch(o,{...t,headers:r});if(!a.ok){let e=await a.text().catch(()=>"");throw Error(`BambooHR API error: ${a.status} ${a.statusText} ${e?`- ${e}`:""}`)}let l=await a.json();return console.log(`‚úÖ JSON response parsed successfully from ${e}`),console.log(`üìä Response structure:`,Object.keys(l)),l}catch(e){throw console.error("BambooHR API request failed:",e),e}}async getAllEmployees(){try{console.log("\uD83D\uDD04 Starting BambooHR employee fetch...");let e=await this.makeRequest("/employees/directory");console.log(`üìä Raw directory response data:`,JSON.stringify(e,null,2));let t=[];if(!(e.employees&&Array.isArray(e.employees)))return console.log(`üìÑ No employee data found in directory response format:`,Object.keys(e)),console.log(`üîç Full directory response structure:`,JSON.stringify(e,null,2)),[];if(t=e.employees,console.log(`‚úÖ Found ${t.length} employees in directory response`),t.length>0&&console.log(`üìã Sample directory employee data:`,{id:t[0].id,firstName:t[0].firstName,lastName:t[0].lastName,preferredName:t[0].preferredName,email:t[0].email,jobTitle:t[0].jobTitle,department:t[0].department}),0===t.length)return console.log("‚ö†Ô∏è No employees found in BambooHR directory - verify data exists and API permissions"),[];console.log(`üîÑ Fetching detailed information for ${t.length} employees...`);let o=await Promise.all(t.map(async e=>{try{let t=await this.getEmployeeDetails(e.id);return console.log(`‚úÖ Fetched details for employee ${e.id}: ${t.firstName} ${t.lastName}`),t}catch(t){return console.error(`‚ùå Error fetching details for employee ${e.id}:`,t),e}}));if(console.log(`‚úÖ Successfully fetched detailed information for ${o.length} employees`),o.length>0){let e=o[0];console.log(`üìã Sample detailed employee data:`,{id:e.id,firstName:e.firstName,lastName:e.lastName,email:e.email,hireDate:e.hireDate,status:e.status,department:e.department,jobTitle:e.jobTitle})}return o}catch(e){throw console.error("‚ùå Error fetching employees from BambooHR:",e),e}}async getEmployeeDetails(e){try{console.log(`üîç Fetching detailed information for employee ${e}...`);let t=`/employees/${e}?fields=hireDate,terminationDate,status,department,jobTitle,workEmail,firstName,lastName,displayName,preferredName,email`,o=await this.makeRequest(t);console.log(`üìä Raw employee details response for ${e}:`,JSON.stringify(o,null,2));let a=null;if(o.employees&&o.employees.length>0?a=o.employees[0]:o.employee?a=o.employee:o.id&&o.firstName?a=o:Array.isArray(o)&&o.length>0?a=o[0]:(console.log(`‚ö†Ô∏è Unexpected response structure for employee ${e}:`,Object.keys(o)),console.log(`üîç Full response:`,JSON.stringify(o,null,2)),o&&"object"==typeof o&&(o.id||o.firstName||o.lastName||o.email)&&(a=o,console.log(`‚úÖ Extracted employee data from response structure for ${e}`))),!a)return console.warn(`‚ö†Ô∏è No employee data found for ID ${e} - response structure: ${JSON.stringify(Object.keys(o))}`),{id:e,firstName:"Unknown",lastName:"Employee",email:void 0,workEmail:void 0,hireDate:new Date().toISOString().split("T")[0],status:"active",department:void 0,jobTitle:void 0,preferredName:void 0,displayName:"Unknown Employee"};return!a.email&&a.workEmail&&(a.email=a.workEmail),a.firstName||(a.firstName="Unknown"),a.lastName||(a.lastName="Employee"),a.id||(a.id=e),a.hireDate||(console.warn(`‚ö†Ô∏è Employee ${e} missing hireDate, using today's date as default`),a.hireDate=new Date().toISOString().split("T")[0]),a.status&&("active"===a.status||"inactive"===a.status)||(console.warn(`‚ö†Ô∏è Employee ${e} has invalid status '${a.status}', defaulting to 'active'`),a.status="active"),console.log(`‚úÖ Detailed employee data for ${e}:`,{id:a.id,firstName:a.firstName,lastName:a.lastName,hireDate:a.hireDate,status:a.status,department:a.department,email:a.email,workEmail:a.workEmail}),a}catch(t){return console.error(`‚ùå Error fetching employee details for ${e}:`,t),console.warn(`‚ö†Ô∏è Returning default employee data for ${e} due to API error`),{id:e,firstName:"Unknown",lastName:"Employee",email:void 0,workEmail:void 0,hireDate:new Date().toISOString().split("T")[0],status:"active",department:void 0,jobTitle:void 0,preferredName:void 0,displayName:"Unknown Employee"}}}async getEmployee(e){return await this.getEmployeeDetails(e)}async getEmployeeDirectory(){return await this.getAllEmployees()}async getEmployeeCompensation(e){try{console.log(`üí∞ Fetching compensation for employee ${e}...`);let t=`/employees/${e}/tables/compensation`,o=await this.makeRequest(t);console.log(`üìä Raw compensation response for employee ${e}:`,JSON.stringify(o,null,2));let a=[];if(Array.isArray(o))a=o,console.log(`üìä Direct array response with ${a.length} compensation records`);else{if(!(o.compensation&&Array.isArray(o.compensation)))return console.log(`‚ö†Ô∏è No compensation data found for employee ${e} - response structure:`,Object.keys(o)),console.log(`üîç Full response:`,JSON.stringify(o,null,2)),[];a=o.compensation,console.log(`üìä Object response with ${a.length} compensation records`)}if(0===a.length)return console.log(`‚ö†Ô∏è No compensation records found for employee ${e}`),[];let r=[];for(let t of a)try{console.log(`üîç Processing compensation record:`,JSON.stringify(t,null,2));let o=t.rate?.value||t.payRate||t.amount,a=t.type?.toLowerCase()||t.payType,l=t.paySchedule||t.paidPer||t.payPeriod||"monthly";if(!o||!a){console.log(`‚ö†Ô∏è Missing payRate or payType for compensation record:`,t);continue}let i=0,s=0;"salary"===a||"annual"===a?(i=parseFloat(o)||0,s=this.calculateHourlyRate(i,l)):"hourly"===a&&(s=parseFloat(o)||0,i=this.calculateAnnualSalary(s,l));let n={employeeId:e,effectiveDate:t.effectiveDate||t.startDate||new Date().toISOString().split("T")[0],endDate:t.endDate||t.stopDate,annualSalary:i,hourlyRate:s,currency:t.currency||t.payCurrency||"USD",payType:a,paySchedule:l};r.push(n),console.log(`‚úÖ Mapped compensation for employee ${e}:`,{payType:n.payType,annualSalary:n.annualSalary,hourlyRate:n.hourlyRate,currency:n.currency,paySchedule:n.paySchedule,effectiveDate:n.effectiveDate})}catch(t){console.error(`‚ùå Error processing compensation record for employee ${e}:`,t)}return 0===r.length&&console.log(`‚ö†Ô∏è No valid compensation records found for employee ${e}`),r}catch(t){return console.error(`‚ùå Error fetching compensation for employee ${e}:`,t),[]}}async getCompensationHistory(e,t,o){return await this.getEmployeeCompensation(e)}async getEmployeeTimeOff(e){return(await this.makeRequest(`/employees/${e}/timeoff`)).timeOff||[]}async getAllTimeOff(e,t){let o="/timeoff",a=new URLSearchParams;return e&&a.append("startDate",e),t&&a.append("endDate",t),a.toString()&&(o+=`?${a.toString()}`),(await this.makeRequest(o)).timeOff||[]}async getCustomReport(e){return(await this.makeRequest(`/reports/${e}`)).report}async createCustomReport(e){return(await this.makeRequest("/reports",{method:"POST",body:JSON.stringify(e)})).report}async getCompanyInfo(){return(await this.makeRequest("/company")).company}async createWebhook(e){return(await this.makeRequest("/webhooks",{method:"POST",body:JSON.stringify(e)})).webhook}async getWebhooks(){return(await this.makeRequest("/webhooks")).webhooks||[]}async deleteWebhook(e){await this.makeRequest(`/webhooks/${e}`,{method:"DELETE"})}calculateHourlyRate(e,t){let o;switch(t.toLowerCase()){case"weekly":case"bi-weekly":case"biweekly":case"yearly":case"year":default:o=2080;break;case"semi-monthly":case"semimonthly":o=2080.08;break;case"monthly":case"month":o=2079.96}return e/o}calculateAnnualSalary(e,t){let o;switch(t.toLowerCase()){case"weekly":case"bi-weekly":case"biweekly":case"yearly":case"year":default:o=2080;break;case"semi-monthly":case"semimonthly":o=2080.08;break;case"monthly":case"month":o=2079.96}return e*o}async importEmployees(){try{console.log("\uD83D\uDD04 Starting employee import from BambooHR...");let e=await this.getAllEmployees();if(0===e.length)return console.log("‚ö†Ô∏è No employees found in BambooHR - verify data exists and API permissions"),[];console.log(`üë• BambooHR import: preparing to upsert ${e.length} employees`);let t=[],o=0,a=0;for(let r of e)try{let e=r.email||r.workEmail||void 0,a=r.hireDate;if(!a){let e=new Date;e.setFullYear(e.getFullYear()-1),a=e.toISOString().split("T")[0],console.log(`‚ö†Ô∏è Employee ${r.id} missing hireDate, using default: ${a}`)}let l={id:r.id,name:r.preferredName||r.displayName||`${r.firstName} ${r.lastName}`,email:e,status:"active"===r.status?"active":"inactive",department:r.department||void 0,position:r.jobTitle||void 0,hireDate:a,terminationDate:r.terminationDate||void 0};t.push(l),o++,console.log(`‚úÖ Employee mapped: ${l.name} (${r.id})`,{email:l.email,department:l.department,position:l.position,hireDate:l.hireDate,status:l.status})}catch(e){a++,console.error(`‚ùå Error mapping employee ${r.id}:`,e)}console.log(`üìä Employee import results: ${o} successful, ${a} errors, 0 skipped`);let r=t.filter(e=>e.hireDate).length,l=t.filter(e=>e.email).length,i=t.filter(e=>e.department).length;return console.log(`üìã Field completion summary:`,{totalEmployees:t.length,withHireDate:r,withEmail:l,withDepartment:i,missingHireDate:t.length-r}),t}catch(e){throw console.error("‚ùå Employee import failed:",e),e}}async importSalaries(){try{console.log("\uD83D\uDD04 Starting salary import from BambooHR...");let e=await this.getAllEmployees();if(0===e.length)return console.log("‚ö†Ô∏è No employees found in BambooHR - verify data exists and API permissions"),[];console.log(`üí∞ BambooHR import: fetching compensation for ${e.length} employees`);let t=[],o=0,a=0,r=0,l=0;for(let i of e)try{if(!i.id){console.log(`‚ö†Ô∏è Skipping employee with missing ID:`,i),r++;continue}let e=await this.getEmployeeCompensation(i.id);if(l+=e.length,0===e.length){console.log(`‚ö†Ô∏è No compensation data found for employee ${i.id} (${i.firstName} ${i.lastName})`);continue}for(let l of e)try{if(!l.annualSalary||!l.hourlyRate){console.log(`‚ö†Ô∏è Skipping compensation record with missing salary data for employee ${l.employeeId}:`,l),r++;continue}console.log(`üí∞ Salary record: employeeId=${l.employeeId} effectiveDate=${l.effectiveDate} annualSalary=${l.annualSalary} hourlyRate=${l.hourlyRate}`);let e={employeeId:l.employeeId,effectiveDate:l.effectiveDate,endDate:l.endDate,annualSalary:l.annualSalary,hourlyRate:l.hourlyRate,currency:l.currency,notes:`Imported from BambooHR - ${l.payType} (${l.paySchedule})`};t.push(e),o++}catch(e){a++,console.error(`‚ùå Error processing compensation for employee ${l.employeeId}:`,e)}}catch(e){a++,console.error(`‚ùå Error fetching compensation for employee ${i.id}:`,e)}if(console.log(`üìä Salary import results: ${o} successful, ${a} errors, ${r} skipped, ${l} total compensation records`),t.length>0){let e=t.reduce((e,t)=>e+t.annualSalary,0),l=e/t.length;console.log(`üí∞ Salary import summary:`,{totalSalaries:t.length,totalAnnualSalary:e.toFixed(2),averageSalary:l.toFixed(2),successRate:(o/(o+a+r)*100).toFixed(2)+"%"})}return t}catch(e){throw console.error("‚ùå Salary import failed:",e),e}}async importAllData(){try{console.log("\uD83D\uDD04 Starting comprehensive BambooHR data import...");let[e,t]=await Promise.all([this.importEmployees(),this.importSalaries()]),o={source:"bamboohr",importDate:new Date().toISOString(),recordsImported:e.length+t.length,errors:[]};return console.log(`‚úÖ Comprehensive import completed: ${e.length} employees, ${t.length} salaries`),o}catch(e){return console.error("‚ùå Comprehensive import failed:",e),{source:"bamboohr",importDate:new Date().toISOString(),recordsImported:0,errors:[e.message]}}}async searchEmployees(e){return(await this.getAllEmployees()).filter(t=>(t.preferredName||t.displayName||`${t.firstName} ${t.lastName}`).toLowerCase().includes(e.toLowerCase())||t.email&&t.email.toLowerCase().includes(e.toLowerCase())||t.workEmail&&t.workEmail.toLowerCase().includes(e.toLowerCase()))}async getEmployeesByDepartment(e){return(await this.getAllEmployees()).filter(t=>t.department===e)}async getActiveEmployees(){return(await this.getAllEmployees()).filter(e=>"active"===e.status)}}let r=null,l=e=>{r=new a(e),console.log(`BambooHR service configured for subdomain: ${e.subdomain}`)},i=()=>{if(!r)throw Error("BambooHR service not configured. Call configureBambooHR first.");return r},s=async()=>{let e=i();return await e.importEmployees()},n=async()=>{let e=i();return await e.importSalaries()}},24544:(e,t,o)=>{o.d(t,{DD:()=>y,K7:()=>n,XA:()=>p,Xp:()=>r,Y0:()=>u,_B:()=>a.Z,eC:()=>c,eK:()=>l,jv:()=>m,lA:()=>s,te:()=>i});var a=o(9487);async function r(){try{return await a.Z.$connect(),console.log("Database connection successful"),await a.Z.projection.findFirst(),console.log("Database schema already exists"),!0}catch(e){if(console.error("Database connection or schema check failed:",e),e.message?.includes("ENOTFOUND")||e.message?.includes("ECONNREFUSED"))return console.error("‚ùå Database connection failed - check your DATABASE_URL"),console.error("   Current DATABASE_URL:",process.env.DATABASE_URL?"Set":"Not set"),!1;if("P2021"===e.code||e.message?.includes("does not exist"))try{return console.log("Tables do not exist, attempting to create schema..."),await a.Z.projection.create({data:{projectId:"__test__",month:"__test__",value:0}}),await a.Z.projection.deleteMany({where:{projectId:"__test__",month:"__test__"}}),console.log("Database schema created successfully"),!0}catch(e){return console.error("Failed to create database schema:",e),!1}return console.log("Tables do not exist, but Prisma Accelerate will create them automatically"),console.log("Note: With Prisma Accelerate, tables are created automatically when you first insert data"),!1}finally{await a.Z.$disconnect()}}async function l(){try{if(console.log("Creating database schema..."),await r())return console.log("Database schema creation completed successfully"),!0;return console.error("Database schema creation failed"),!1}catch(e){return console.error("Database schema creation failed:",e),!1}}async function i(e){try{let t=await a.Z.bamboohr_config.upsert({where:{subdomain:e.subdomain},update:{api_key:e.apiKey,webhook_secret:e.webhookSecret,is_active:!0,last_sync:new Date,updated_at:new Date},create:{subdomain:e.subdomain,api_key:e.apiKey,webhook_secret:e.webhookSecret,is_active:!0,last_sync:new Date,created_at:new Date,updated_at:new Date}});return console.log(`BambooHR config saved for subdomain: ${e.subdomain}`),t}catch(e){throw console.error("Error saving BambooHR config:",e),e}}async function s(e){try{console.log(`üîÑ Attempting to upsert employee:`,JSON.stringify(e,null,2));let t=await a.Z.employees.upsert({where:{id:e.id},update:{name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hire_date:e.hireDate||null,termination_date:e.terminationDate,updated_at:new Date},create:{id:e.id,name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hire_date:e.hireDate||null,termination_date:e.terminationDate,created_at:new Date,updated_at:new Date}});return console.log(`‚úÖ Employee saved: ${e.name} (${e.id})`),t}catch(t){if(console.error("‚ùå Error saving employee:",t),"P2025"===t.code){console.log(`üîÑ Record not found, attempting to create employee: ${e.name} (${e.id})`);try{let t=await a.Z.employees.create({data:{id:e.id,name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hire_date:e.hireDate||null,termination_date:e.terminationDate,created_at:new Date,updated_at:new Date}});return console.log(`‚úÖ Employee created: ${e.name} (${e.id})`),t}catch(e){throw console.error("‚ùå Error creating employee:",e),e}}throw t}}async function n(e){try{console.log(`üîÑ Attempting to upsert employee salary:`,JSON.stringify(e,null,2));let t=await a.Z.employeesSalary.upsert({where:{employeeId_effectiveDate:{employeeId:e.employeeId,effectiveDate:e.effectiveDate}},update:{endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency,notes:e.notes,source:e.source,updatedAt:new Date},create:{employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency||"USD",notes:e.notes,source:e.source||"bamboohr"}});return console.log(`‚úÖ Employee salary saved for ${e.employeeId} effective ${e.effectiveDate}`),t}catch(t){if(console.error("‚ùå Error saving employee salary:",t),"P2025"===t.code){console.log(`üîÑ Record not found, attempting to create employee salary for ${e.employeeId} effective ${e.effectiveDate}`);try{let t=await a.Z.employeesSalary.create({data:{employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency||"USD",notes:e.notes,source:e.source||"bamboohr"}});return console.log(`‚úÖ Employee salary created for ${e.employeeId} effective ${e.effectiveDate}`),t}catch(e){throw console.error("‚ùå Error creating employee salary:",e),e}}throw t}}async function c(e){try{let t=await a.Z.projectsMultiplier.upsert({where:{projectId_effectiveDate:{projectId:e.projectId,effectiveDate:e.effectiveDate}},update:{projectName:e.projectName,multiplier:e.multiplier,endDate:e.endDate,notes:e.notes,updatedAt:new Date},create:{projectId:e.projectId,projectName:e.projectName,multiplier:e.multiplier,effectiveDate:e.effectiveDate,endDate:e.endDate,notes:e.notes}});return console.log(`Project multiplier saved for ${e.projectName} effective ${e.effectiveDate}`),t}catch(e){throw console.error("Error saving project multiplier:",e),e}}async function m(e){try{let t=await a.Z.employeesTimeEntry.upsert({where:{employeeId_projectId_date:{employeeId:e.employeeId,projectId:e.projectId,date:e.date}},update:{employeeName:e.employeeName,projectName:e.projectName,hours:e.hours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:e.hourlyRate,projectMultiplier:e.projectMultiplier,totalCost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency,description:e.description,tags:e.tags,updatedAt:new Date},create:{employeeId:e.employeeId,employeeName:e.employeeName,projectId:e.projectId,projectName:e.projectName,date:e.date,hours:e.hours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:e.hourlyRate,projectMultiplier:e.projectMultiplier,totalCost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency,description:e.description,tags:e.tags}});return console.log(`Time entry saved for ${e.employeeName} on ${e.date}`),t}catch(e){throw console.error("Error saving time entry:",e),e}}async function p(){try{return await a.Z.employees.findMany({include:{salaries:!0}})}catch(e){throw console.error("Error getting all employees:",e),e}}async function y(){try{return await a.Z.employeesSalary.findMany({include:{employee:!0}})}catch(e){throw console.error("Error getting all employee salaries:",e),e}}async function u(){try{return await a.Z.projectsMultiplier.findMany()}catch(e){throw console.error("Error getting all project multipliers:",e),e}}},9487:(e,t,o)=>{o.d(t,{Z:()=>r});var a=o(53524);let r=globalThis.prisma??new a.PrismaClient({log:["error"]})},80928:(e,t,o)=>{o.d(t,{HE:()=>i,Lk:()=>s,To:()=>c,XI:()=>n});var a=o(80645),r=o(24544);class l{constructor(){this.employees=new Map,this.salaries=new Map,this.multipliers=new Map,console.log("Payroll service initialized")}mapDbEmployeeToDomain(e){let t=(e.status||"").toLowerCase(),o=e=>{if(e){if("string"==typeof e)return e;if(e instanceof Date)return e.toISOString();try{let t=new Date(e);return isNaN(t.getTime())?void 0:t.toISOString()}catch{return}}};return{id:e.id,name:e.name,email:e.email,status:"active"===t?"active":"inactive",department:e.department??void 0,position:e.position??void 0,hireDate:o(e.hireDate)||"",terminationDate:o(e.terminationDate)}}toNumber(e){if("number"==typeof e)return e;if(e&&"function"==typeof e.toNumber)return e.toNumber();let t=parseFloat(String(e));return Number.isNaN(t)?0:t}mapDbSalariesToDomain(e){return(e||[]).map(e=>({employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate??void 0,annualSalary:this.toNumber(e.annualSalary),hourlyRate:this.toNumber(e.hourlyRate),currency:e.currency??void 0,notes:e.notes??void 0}))}mapDbMultipliersToDomain(e){return(e||[]).map(e=>({projectId:e.projectId,projectName:e.projectName,multiplier:this.toNumber(e.multiplier),effectiveDate:e.effectiveDate,endDate:e.endDate??void 0,notes:e.notes??void 0}))}async addEmployee(e){await (0,r.lA)(e),this.employees.set(e.id,e),console.log(`Employee added: ${e.name} (${e.id})`)}async getEmployee(e){let t=this.employees.get(e);if(!t){let o=(await (0,r.XA)()).find(t=>t.id===e);if(o){let a=this.mapDbEmployeeToDomain(o);this.employees.set(e,a),t=a}}return t||null}async getAllEmployees(){let e=(await (0,r.XA)()).map(e=>this.mapDbEmployeeToDomain(e));for(let t of e)this.employees.set(t.id,t);return e}async updateEmployee(e,t){let o=this.employees.get(e);if(o){let a={...o,...t};await (0,r.lA)(a),this.employees.set(e,a),console.log(`Employee updated: ${o.name}`)}}async addSalary(e){await (0,r.K7)(e);let t=this.salaries.get(e.employeeId)||[];if(!e.endDate){let o=t.find(e=>!e.endDate);o&&(o.endDate=e.effectiveDate,await (0,r.K7)(o))}t.push(e),t.sort((e,t)=>new Date(e.effectiveDate).getTime()-new Date(t.effectiveDate).getTime()),this.salaries.set(e.employeeId,t),console.log(`Salary added for ${e.employeeId} effective ${e.effectiveDate}`)}async getEmployeeSalary(e,t){let o=this.salaries.get(e);if(!o||0===o.length){let t=(await (0,r.DD)()).filter(t=>t.employeeId===e);if(t.length>0){let a=this.mapDbSalariesToDomain(t);this.salaries.set(e,a),o=a}}if(!o)return null;let a=new Date(t);return o.find(e=>{let t=new Date(e.effectiveDate),o=new Date(e.endDate?e.endDate:"9999-12-31");return a>=t&&a<=o})||null}async getEmployeeSalaryHistory(e){let t=this.salaries.get(e);if(!t||0===t.length){let o=(await (0,r.DD)()).filter(t=>t.employeeId===e);if(o.length>0){let a=this.mapDbSalariesToDomain(o);this.salaries.set(e,a),t=a}}return t||[]}async addProjectMultiplier(e){await (0,r.eC)(e);let t=this.multipliers.get(e.projectId)||[];if(!e.endDate){let o=t.find(e=>!e.endDate);o&&(o.endDate=e.effectiveDate,await (0,r.eC)(o))}t.push(e),t.sort((e,t)=>new Date(e.effectiveDate).getTime()-new Date(t.effectiveDate).getTime()),this.multipliers.set(e.projectId,t),console.log(`Multiplier added for project ${e.projectName} effective ${e.effectiveDate}`)}async getProjectMultiplier(e,t){let o=this.multipliers.get(e);if(!o||0===o.length){let t=(await (0,r.Y0)()).filter(t=>t.projectId===e);if(t.length>0){let a=this.mapDbMultipliersToDomain(t);this.multipliers.set(e,a),o=a}}if(!o)return null;let a=new Date(t);return o.find(e=>{let t=new Date(e.effectiveDate),o=new Date(e.endDate?e.endDate:"9999-12-31");return a>=t&&a<=o})||null}async getProjectMultiplierHistory(e){let t=this.multipliers.get(e);if(!t||0===t.length){let o=(await (0,r.Y0)()).filter(t=>t.projectId===e);if(o.length>0){let a=this.mapDbMultipliersToDomain(o);this.multipliers.set(e,a),t=a}}return t||[]}async processTimeEntries(e,t,o){let a=[],l=new Map(t.map(e=>[e.id,e]));for(let t of e){let e=l.get(t.userId);if(!e)continue;let i=new Date(t.timeInterval.start).toISOString().split("T")[0];if(!await this.getEmployee(t.userId))continue;let s=await this.getEmployeeSalary(t.userId,i);if(!s)continue;let n=o.find(e=>e.id===t.projectId);if(!n)continue;let c=await this.getProjectMultiplier(t.projectId,i),m=c?.multiplier||1,p=this.parseDuration(t.timeInterval.duration)/36e5,y=t.billable?p:0,u=t.billable?0:p,d=p*s.hourlyRate,f=y*s.hourlyRate*m,h=p>0?y/p:0,g={employeeId:t.userId,employeeName:e.name,projectId:t.projectId,projectName:n.name,date:i,hours:p,billableHours:y,nonBillableHours:u,hourlyRate:s.hourlyRate,projectMultiplier:m,totalCost:d,billableValue:f,efficiency:h,description:t.description,tags:t.tags.map(e=>e.name)};await (0,r.jv)(g),a.push(g)}return a}async generateProjectProfitabilityReport(e,t,o,a,r){let l=a.filter(a=>a.projectId===e&&a.date>=t&&a.date<=o),i=l.reduce((e,t)=>e+t.hours,0),s=l.reduce((e,t)=>e+t.billableHours,0),n=l.reduce((e,t)=>e+t.totalCost,0),c=l.reduce((e,t)=>e+t.billableValue,0),m=r-n,p=s>0?c/(s*l[0]?.hourlyRate||1):0,y=new Map;for(let e of l){let t=y.get(e.employeeId);t?(t.hours+=e.hours,t.cost+=e.totalCost,t.billableValue+=e.billableValue,t.efficiency=t.hours>0?t.billableValue/(t.hours*e.hourlyRate):0):y.set(e.employeeId,{employeeId:e.employeeId,employeeName:e.employeeName,hours:e.hours,cost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency})}let u=new Map;for(let e of l){let t=e.date.substring(0,7),o=u.get(t);o?(o.hours+=e.hours,o.cost+=e.totalCost):u.set(t,{month:t,hours:e.hours,cost:e.totalCost,revenue:0,profit:0})}return{projectId:e,projectName:l[0]?.projectName||"Unknown Project",period:{start:t,end:o},totalHours:i,totalBillableHours:s,totalCost:n,totalRevenue:r,grossProfit:m,profitMargin:r>0?m/r*100:0,averageMultiplier:p,employeeBreakdown:Array.from(y.values()),monthlyBreakdown:Array.from(u.values())}}async generateEmployeeProfitabilityReport(e,t,o,a){let r=a.filter(a=>a.employeeId===e&&a.date>=t&&a.date<=o),l=r.reduce((e,t)=>e+t.hours,0),i=r.reduce((e,t)=>e+t.billableHours,0),s=r.reduce((e,t)=>e+t.totalCost,0),n=r.reduce((e,t)=>e+t.billableValue,0),c=new Map;for(let e of r){let t=c.get(e.projectId);t?(t.hours+=e.hours,t.cost+=e.totalCost,t.billableValue+=e.billableValue,t.efficiency=t.hours>0?t.billableValue/(t.hours*e.hourlyRate):0):c.set(e.projectId,{projectId:e.projectId,projectName:e.projectName,hours:e.hours,cost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency})}return{employeeId:e,employeeName:r[0]?.employeeName||"Unknown Employee",period:{start:t,end:o},totalHours:l,totalBillableHours:i,totalCost:s,totalBillableValue:n,efficiency:l>0?i/l:0,averageHourlyRate:l>0?s/l:0,projectBreakdown:Array.from(c.values())}}async configurePayrollSystem(e){this.payrollSystem=e,console.log(`Payroll system configured: ${e.name}`)}async configureBambooHR(e){this.bamboohrConfig=e,(0,a.configureBambooHR)(e),await (0,r.te)({subdomain:e.subdomain,apiKey:e.apiKey,webhookSecret:e.webhookSecret}),console.log(`BambooHR configured for subdomain: ${e.subdomain}`)}async importSalariesFromBambooHR(){if(!this.bamboohrConfig)throw Error("BambooHR not configured");try{let e=await (0,a.Ui)();console.log(`BambooHR import: upserting ${e.length} employees to Supabase/Prisma`);let t=0,o=[];for(let a of e)try{await this.addEmployee(a),t+=1}catch(e){console.error("BambooHR employee upsert failed:",{id:a.id,name:a.name,error:e?.message||String(e)}),o.push(`emp:${a.id}:${e?.message||e}`)}let r=await (0,a._O)();console.log(`BambooHR import: upserting ${r.length} salaries to Supabase/Prisma`);let l=0,i=[];for(let e of r)try{await this.addSalary(e),l+=1}catch(t){console.error("BambooHR salary upsert failed:",{employeeId:e.employeeId,effectiveDate:e.effectiveDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,error:t?.message||String(t)}),i.push(`sal:${e.employeeId}:${e.effectiveDate}:${t?.message||t}`)}return console.log(`BambooHR import completed: employees ok=${t}, salaries ok=${l}, empErrors=${o.length}, salErrors=${i.length}`),{source:"bamboohr",importDate:new Date().toISOString(),recordsImported:t+l,errors:[...o,...i]}}catch(e){return{source:"bamboohr",importDate:new Date().toISOString(),recordsImported:0,errors:[e.message]}}}async importSalariesFromPayrollSystem(){if(!this.payrollSystem)throw Error("No payroll system configured");return"bamboohr"===this.payrollSystem.type&&this.bamboohrConfig?await this.importSalariesFromBambooHR():{source:"api",importDate:new Date().toISOString(),recordsImported:0,errors:[`${this.payrollSystem.type} integration not yet implemented`]}}parseDuration(e){let t=e.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);return t?(3600*parseInt(t[1]||"0")+60*parseInt(t[2]||"0")+parseInt(t[3]||"0"))*1e3:0}calculateHourlyRate(e,t=2080){return e/t}normalizeEmployee(e){let t=(e.status||"active").toLowerCase();return{id:e.id,name:e.name,email:e.email,status:"active"===t?"active":"inactive",department:e.department??void 0,position:e.position??void 0,hireDate:e.hireDate,terminationDate:e.terminationDate??void 0}}normalizeSalary(e){let t=e=>e&&"object"==typeof e&&"toNumber"in e?e.toNumber():Number(e);return{employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate??void 0,annualSalary:t(e.annualSalary),hourlyRate:t(e.hourlyRate),currency:e.currency||"USD",notes:e.notes??void 0}}normalizeProjectMultiplier(e){let t;return{projectId:e.projectId,projectName:e.projectName,multiplier:(t=e.multiplier)&&"object"==typeof t&&"toNumber"in t?t.toNumber():Number(t),effectiveDate:e.effectiveDate,endDate:e.endDate??void 0,notes:e.notes??void 0}}async exportData(){return{employees:Array.from(this.employees.values()),salaries:Array.from(this.salaries.entries()),multipliers:Array.from(this.multipliers.entries()),payrollSystem:this.payrollSystem,bamboohrConfig:this.bamboohrConfig}}async importData(e){this.employees=new Map(e.employees.map(e=>[e.id,e])),this.salaries=new Map(e.salaries),this.multipliers=new Map(e.multipliers),this.payrollSystem=e.payrollSystem,this.bamboohrConfig=e.bamboohrConfig,this.bamboohrConfig&&(0,a.configureBambooHR)(this.bamboohrConfig),console.log("Payroll data imported successfully")}}let i=new l,s=async(e,t,o)=>await i.processTimeEntries(e,t,o),n=async(e,t,o,a,r)=>await i.generateProjectProfitabilityReport(e,t,o,a,r),c=async(e,t,o,a)=>await i.generateEmployeeProfitabilityReport(e,t,o,a)}};