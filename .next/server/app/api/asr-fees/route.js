"use strict";(()=>{var e={};e.id=9778,e.ids=[9778],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},41762:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>b,patchFetch:()=>g,requestAsyncStorage:()=>y,routeModule:()=>m,serverHooks:()=>h,staticGenerationAsyncStorage:()=>f});var r={};a.r(r),a.d(r,{GET:()=>p,POST:()=>d,dynamic:()=>u});var o=a(49303),n=a(88716),s=a(60670),i=a(87070),l=a(9487),c=a(24544);let u="force-dynamic";async function p(){try{if(!await (0,c.Xp)())return console.log("Tables do not exist yet, returning empty ASR fees"),i.NextResponse.json({});let e=(await l.Z.asrFee.findMany()).reduce((e,t)=>(e[t.projectId]=t.value,e),{});return i.NextResponse.json(e)}catch(e){if(console.error("Error fetching ASR fees:",e),e instanceof Error&&(e.message?.includes("does not exist")||"code"in e&&"P2021"===e.code))return console.log("Tables do not exist, returning empty ASR fees"),i.NextResponse.json({});return i.NextResponse.json({error:"Failed to fetch ASR fees"},{status:500})}}async function d(e){let{projectId:t,value:a}=await e.json();try{return await (0,c.Xp)()||(console.log("Tables do not exist yet, but Prisma Accelerate will create them on first insert"),console.log("Attempting to create table by inserting data...")),await l.Z.asrFee.upsert({where:{projectId:t},update:{value:a},create:{projectId:t,value:a}}),i.NextResponse.json({success:!0})}catch(e){if(console.error("Error updating ASR fee:",e),e instanceof Error&&(e.message?.includes("does not exist")||"code"in e&&"P2021"===e.code)){console.log("Table does not exist, attempting to create schema...");try{return await l.Z.asrFee.create({data:{projectId:"__test__",value:0}}),await l.Z.asrFee.deleteMany({where:{projectId:"__test__"}}),await l.Z.asrFee.upsert({where:{projectId:t},update:{value:a},create:{projectId:t,value:a}}),i.NextResponse.json({success:!0})}catch(e){return console.error("Failed to create table:",e),i.NextResponse.json({error:"Database schema not ready. Please run database setup first."},{status:500})}}return i.NextResponse.json({error:"Failed to update ASR fee"},{status:500})}}let m=new o.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/asr-fees/route",pathname:"/api/asr-fees",filename:"route",bundlePath:"app/api/asr-fees/route"},resolvedPagePath:"C:\\Users\\Jonathan\\Desktop\\Billing\\app\\api\\asr-fees\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:y,staticGenerationAsyncStorage:f,serverHooks:h}=m,b="/api/asr-fees/route";function g(){return(0,s.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:f})}},24544:(e,t,a)=>{a.d(t,{DD:()=>d,K7:()=>l,XA:()=>p,Xp:()=>o,Y0:()=>m,_B:()=>r.Z,eC:()=>c,eK:()=>n,jv:()=>u,lA:()=>i,te:()=>s});var r=a(9487);async function o(){try{return await r.Z.projection.findFirst(),console.log("Database schema already exists"),!0}catch(e){if(console.log("Tables do not exist, attempting to create schema..."),"P2021"===e.code||e.message?.includes("does not exist"))try{return console.log("Attempting to create database schema..."),await r.Z.projection.create({data:{projectId:"__test__",month:"__test__",value:0}}),await r.Z.projection.deleteMany({where:{projectId:"__test__",month:"__test__"}}),console.log("Database schema created successfully"),!0}catch(e){return console.error("Failed to create database schema:",e),!1}return console.log("Tables do not exist, but Prisma Accelerate will create them automatically"),console.log("Note: With Prisma Accelerate, tables are created automatically when you first insert data"),!1}}async function n(){try{if(console.log("Creating database schema..."),await o())return console.log("Database schema creation completed successfully"),!0;return console.error("Database schema creation failed"),!1}catch(e){return console.error("Database schema creation failed:",e),!1}}async function s(e){try{let t=await r.Z.bambooHRConfig.upsert({where:{subdomain:e.subdomain},update:{apiKey:e.apiKey,webhookSecret:e.webhookSecret,isActive:!0,lastSync:new Date,updatedAt:new Date},create:{subdomain:e.subdomain,apiKey:e.apiKey,webhookSecret:e.webhookSecret,isActive:!0,lastSync:new Date}});return console.log(`BambooHR config saved for subdomain: ${e.subdomain}`),t}catch(e){throw console.error("Error saving BambooHR config:",e),e}}async function i(e){try{let t=await r.Z.employee.upsert({where:{id:e.id},update:{name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hireDate:e.hireDate,terminationDate:e.terminationDate,updatedAt:new Date},create:{id:e.id,name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hireDate:e.hireDate,terminationDate:e.terminationDate}});return console.log(`Employee saved: ${e.name} (${e.id})`),t}catch(e){throw console.error("Error saving employee:",e),e}}async function l(e){try{let t=await r.Z.employeeSalary.upsert({where:{employeeId_effectiveDate:{employeeId:e.employeeId,effectiveDate:e.effectiveDate}},update:{endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency,notes:e.notes,source:e.source,updatedAt:new Date},create:{employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency||"USD",notes:e.notes,source:e.source||"bamboohr"}});return console.log(`Employee salary saved for ${e.employeeId} effective ${e.effectiveDate}`),t}catch(e){throw console.error("Error saving employee salary:",e),e}}async function c(e){try{let t=await r.Z.projectMultiplier.upsert({where:{projectId_effectiveDate:{projectId:e.projectId,effectiveDate:e.effectiveDate}},update:{projectName:e.projectName,multiplier:e.multiplier,endDate:e.endDate,notes:e.notes,updatedAt:new Date},create:{projectId:e.projectId,projectName:e.projectName,multiplier:e.multiplier,effectiveDate:e.effectiveDate,endDate:e.endDate,notes:e.notes}});return console.log(`Project multiplier saved for ${e.projectName} effective ${e.effectiveDate}`),t}catch(e){throw console.error("Error saving project multiplier:",e),e}}async function u(e){try{let t=await r.Z.employeeTimeEntry.upsert({where:{employeeId_projectId_date:{employeeId:e.employeeId,projectId:e.projectId,date:e.date}},update:{employeeName:e.employeeName,projectName:e.projectName,hours:e.hours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:e.hourlyRate,projectMultiplier:e.projectMultiplier,totalCost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency,description:e.description,tags:e.tags,updatedAt:new Date},create:{employeeId:e.employeeId,employeeName:e.employeeName,projectId:e.projectId,projectName:e.projectName,date:e.date,hours:e.hours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:e.hourlyRate,projectMultiplier:e.projectMultiplier,totalCost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency,description:e.description,tags:e.tags}});return console.log(`Time entry saved for ${e.employeeName} on ${e.date}`),t}catch(e){throw console.error("Error saving time entry:",e),e}}async function p(){try{return await r.Z.employee.findMany({include:{salaries:!0}})}catch(e){throw console.error("Error getting all employees:",e),e}}async function d(){try{return await r.Z.employeeSalary.findMany({include:{employee:!0}})}catch(e){throw console.error("Error getting all employee salaries:",e),e}}async function m(){try{return await r.Z.projectMultiplier.findMany()}catch(e){throw console.error("Error getting all project multipliers:",e),e}}},9487:(e,t,a)=>{a.d(t,{Z:()=>o});var r=a(53524);let o=globalThis.prisma??new r.PrismaClient({log:["error"]})}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[9276,5972],()=>a(41762));module.exports=r})();