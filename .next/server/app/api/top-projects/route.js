"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/top-projects/route";
exports.ids = ["app/api/top-projects/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftop-projects%2Froute&page=%2Fapi%2Ftop-projects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftop-projects%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftop-projects%2Froute&page=%2Fapi%2Ftop-projects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftop-projects%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Jonathan_Desktop_Billing_app_api_top_projects_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/top-projects/route.ts */ \"(rsc)/./app/api/top-projects/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/top-projects/route\",\n        pathname: \"/api/top-projects\",\n        filename: \"route\",\n        bundlePath: \"app/api/top-projects/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\Billing\\\\app\\\\api\\\\top-projects\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Jonathan_Desktop_Billing_app_api_top_projects_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/top-projects/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0b3AtcHJvamVjdHMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnRvcC1wcm9qZWN0cyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnRvcC1wcm9qZWN0cyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUN1QjtBQUNwRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8/NDgyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxKb25hdGhhblxcXFxEZXNrdG9wXFxcXEJpbGxpbmdcXFxcYXBwXFxcXGFwaVxcXFx0b3AtcHJvamVjdHNcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3RvcC1wcm9qZWN0cy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3RvcC1wcm9qZWN0c1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdG9wLXByb2plY3RzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcSm9uYXRoYW5cXFxcRGVza3RvcFxcXFxCaWxsaW5nXFxcXGFwcFxcXFxhcGlcXFxcdG9wLXByb2plY3RzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS90b3AtcHJvamVjdHMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftop-projects%2Froute&page=%2Fapi%2Ftop-projects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftop-projects%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/top-projects/route.ts":
/*!***************************************!*\
  !*** ./app/api/top-projects/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_zoho__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/zoho */ \"(rsc)/./lib/zoho.ts\");\n/* harmony import */ var _lib_clockify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/clockify */ \"(rsc)/./lib/clockify.ts\");\n\n\n\n// Force dynamic rendering to prevent static generation errors\nconst dynamic = \"force-dynamic\";\nasync function GET(request) {\n    try {\n        console.log(\"\\uD83D\\uDE80 Top Projects API called - starting data collection...\");\n        const now = new Date();\n        const currentYear = now.getFullYear();\n        const currentYearStart = new Date(currentYear, 0, 1);\n        console.log(\"\\uD83D\\uDCC5 Date range calculated:\", {\n            currentYear,\n            currentYearStart: currentYearStart.toISOString()\n        });\n        // Initialize data containers\n        let projects = [];\n        let invoices = [];\n        let clockifyData = null;\n        // Fetch Zoho data\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting Zoho data fetch...\");\n            [projects, invoices] = await Promise.all([\n                _lib_zoho__WEBPACK_IMPORTED_MODULE_1__.zohoService.getProjects(),\n                _lib_zoho__WEBPACK_IMPORTED_MODULE_1__.zohoService.getInvoices()\n            ]);\n            console.log(\"✅ Zoho data fetched:\", {\n                projectsCount: projects.length,\n                invoicesCount: invoices.length\n            });\n        } catch (error) {\n            console.error(\"❌ Failed to fetch Zoho data:\", error);\n            projects = [];\n            invoices = [];\n        }\n        // Fetch Clockify data for time tracking\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting Clockify data fetch...\");\n            const clockifyConfig = _lib_clockify__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getConfigurationStatus();\n            if (clockifyConfig.configured) {\n                console.log(\"⏰ Clockify configured, fetching real data...\");\n                const timeEntries = await _lib_clockify__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getAllTimeEntries(currentYearStart.toISOString(), now.toISOString());\n                // Group time entries by project\n                const projectTimeMap = new Map();\n                timeEntries.forEach((entry)=>{\n                    const projectId = entry.projectId;\n                    if (!projectTimeMap.has(projectId)) {\n                        projectTimeMap.set(projectId, {\n                            totalHours: 0,\n                            billableHours: 0,\n                            nonBillableHours: 0\n                        });\n                    }\n                    const duration = entry.timeInterval?.duration || \"PT0H\";\n                    const hours = parseDuration(duration);\n                    const projectData = projectTimeMap.get(projectId);\n                    projectData.totalHours += hours;\n                    if (entry.billable) {\n                        projectData.billableHours += hours;\n                    } else {\n                        projectData.nonBillableHours += hours;\n                    }\n                });\n                clockifyData = projectTimeMap;\n                console.log(\"✅ Clockify data processed for\", projectTimeMap.size, \"projects\");\n            } else {\n                console.log(\"\\uD83C\\uDFAD Clockify not configured, using mock data\");\n                clockifyData = new Map();\n            }\n        } catch (error) {\n            console.warn(\"⚠️ Failed to fetch Clockify data, using defaults:\", error);\n            clockifyData = new Map();\n        }\n        // Calculate project performance metrics\n        const projectMetrics = projects.filter((p)=>p.status === \"active\").map((project)=>{\n            // Get invoice data for this project\n            const projectInvoices = invoices.filter((inv)=>inv.project_id === project.project_id);\n            const totalRevenue = projectInvoices.reduce((sum, inv)=>sum + (inv.total || 0), 0);\n            // Get time tracking data for this project\n            const projectTimeData = clockifyData.get(project.project_id) || {\n                totalHours: 0,\n                billableHours: 0,\n                nonBillableHours: 0\n            };\n            // Calculate efficiency\n            const efficiency = projectTimeData.totalHours > 0 ? projectTimeData.billableHours / projectTimeData.totalHours : 0.85; // Default efficiency\n            // Calculate hourly rate (use project rate or default)\n            const hourlyRate = project.rate_per_hour || 125;\n            // Calculate project cost (estimated based on hours and rate)\n            const estimatedCost = projectTimeData.totalHours * hourlyRate;\n            // Calculate multiplier (revenue/cost ratio) - higher is better\n            const multiplier = estimatedCost > 0 ? totalRevenue / estimatedCost : 0;\n            return {\n                id: project.project_id,\n                name: project.project_code || project.project_name,\n                customer: project.customer_name,\n                status: project.status,\n                startDate: project.start_date,\n                budget: project.budget_amount || totalRevenue * 1.2,\n                billed: totalRevenue,\n                hours: projectTimeData.totalHours || Math.floor(Math.random() * 400) + 200,\n                efficiency: efficiency,\n                revenue: totalRevenue,\n                profitMargin: 0.25,\n                hourlyRate: hourlyRate,\n                billableHours: projectTimeData.billableHours || 0,\n                nonBillableHours: projectTimeData.nonBillableHours || 0,\n                multiplier: multiplier,\n                estimatedCost: estimatedCost\n            };\n        }).filter((project)=>project.revenue > 0 || project.hours > 0) // Only include projects with activity\n        .sort((a, b)=>b.multiplier - a.multiplier) // Sort by multiplier (highest first)\n        .slice(0, 10); // Top 10 projects\n        console.log(\"✅ Top projects data generated for\", projectMetrics.length, \"projects\");\n        console.log(\"\\uD83D\\uDE80 Returning top projects data to client...\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: projectMetrics,\n            count: projectMetrics.length\n        });\n    } catch (error) {\n        console.error(\"❌ Top Projects API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to generate top projects data\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// Helper function to parse duration strings (e.g., \"PT2H30M\")\nfunction parseDuration(duration) {\n    if (!duration) return 0;\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/;\n    const match = duration.match(regex);\n    if (!match) return 0;\n    const hours = parseInt(match[1] || \"0\");\n    const minutes = parseInt(match[2] || \"0\");\n    const seconds = parseInt(match[3] || \"0\");\n    return hours + minutes / 60 + seconds / 3600;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/top-projects/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/clockify.ts":
/*!*************************!*\
  !*** ./lib/clockify.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clockifyService: () => (/* binding */ clockifyService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fetchAllClockifyTimeSummaries: () => (/* binding */ fetchAllClockifyTimeSummaries),\n/* harmony export */   fetchClockifyProjects: () => (/* binding */ fetchClockifyProjects),\n/* harmony export */   fetchClockifyTimeEntries: () => (/* binding */ fetchClockifyTimeEntries),\n/* harmony export */   fetchClockifyTimeReport: () => (/* binding */ fetchClockifyTimeReport)\n/* harmony export */ });\nclass ClockifyService {\n    constructor(){\n        this.apiKey = null;\n        this.workspaceId = null;\n        this.baseUrl = \"https://api.clockify.me/api/v1\";\n        this._isConfigured = false;\n        this.apiKey = process.env.CLOCKIFY_API_KEY || null;\n        this.workspaceId = process.env.CLOCKIFY_WORKSPACE_ID || null;\n        // Check if we have valid credentials\n        if (this.apiKey && this.apiKey !== \"your_clockify_api_key_here\" && this.workspaceId && this.workspaceId !== \"your_clockify_workspace_id_here\") {\n            this._isConfigured = true;\n            console.log(\"Clockify service initialized with valid credentials\");\n        } else {\n            this._isConfigured = false;\n            console.warn(\"Clockify service initialized without valid credentials - will use mock data\");\n            console.warn(\"Please set CLOCKIFY_API_KEY and CLOCKIFY_WORKSPACE_ID in your environment variables\");\n        }\n    }\n    getHeaders() {\n        if (!this.apiKey) {\n            throw new Error(\"Clockify API key not configured\");\n        }\n        return {\n            \"X-Api-Key\": this.apiKey,\n            \"Content-Type\": \"application/json\"\n        };\n    }\n    async makeRequest(endpoint, params) {\n        if (!this._isConfigured) {\n            throw new Error(\"Clockify service not properly configured\");\n        }\n        try {\n            const url = new URL(`${this.baseUrl}${endpoint}`);\n            if (params) {\n                Object.keys(params).forEach((key)=>{\n                    if (params[key] !== undefined && params[key] !== null) {\n                        url.searchParams.append(key, params[key]);\n                    }\n                });\n            }\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            console.log(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            console.log(`📡 Clockify API Response: ${response.status} ${response.statusText}`);\n            if (response.status === 401) {\n                throw new Error(\"Clockify API authentication failed - check your API key\");\n            }\n            if (response.status === 403) {\n                throw new Error(\"Clockify API access forbidden - check your workspace ID and permissions\");\n            }\n            if (response.status === 404) {\n                const errorDetails = `Endpoint not found: ${endpoint}`;\n                console.error(`❌ 404 Error Details: ${errorDetails}`);\n                console.error(`   Full URL: ${url.toString()}`);\n                console.error(`   Workspace ID: ${this.workspaceId}`);\n                console.error(`   API Key configured: ${!!this.apiKey}`);\n                throw new Error(`Clockify API error: 404 Not Found - ${errorDetails}`);\n            }\n            if (response.status === 429) {\n                throw new Error(\"Clockify API rate limit exceeded - try again later\");\n            }\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: ${endpoint}`);\n            return data;\n        } catch (error) {\n            if (error instanceof Error) {\n                console.error(`❌ Clockify API Error in ${endpoint}:`, error.message);\n                throw error;\n            }\n            throw new Error(`Clockify API request failed: ${error}`);\n        }\n    }\n    // Check if the service is properly configured\n    isConfigured() {\n        return this._isConfigured;\n    }\n    // Get configuration status for debugging\n    getConfigurationStatus() {\n        return {\n            configured: this._isConfigured,\n            hasApiKey: !!(this.apiKey && this.apiKey !== \"your_clockify_api_key_here\"),\n            hasWorkspaceId: !!(this.workspaceId && this.workspaceId !== \"your_clockify_workspace_id_here\")\n        };\n    }\n    // Alias for getConfigurationStatus to match API usage\n    getConfigStatus() {\n        return this.getConfigurationStatus();\n    }\n    // Method to set workspace ID dynamically\n    setWorkspaceId(workspaceId) {\n        this.workspaceId = workspaceId;\n        if (this.apiKey && this.apiKey !== \"your_clockify_api_key_here\") {\n            this._isConfigured = true;\n        }\n    }\n    async getUser() {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock user\");\n                return this.getMockUser();\n            }\n            const url = new URL(`${this.baseUrl}/user`);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /user`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify user:\", error);\n            console.log(\"Returning mock user due to Clockify API failure\");\n            return this.getMockUser();\n        }\n    }\n    async getWorkspaces() {\n        try {\n            return await this.makeRequest(\"/workspaces\");\n        } catch (error) {\n            console.error(\"Failed to get Clockify workspaces:\", error);\n            // Return mock workspace data when Clockify fails\n            return [\n                {\n                    id: \"mock-workspace-id\",\n                    name: \"Mock Workspace\",\n                    hourlyRate: {\n                        amount: 100,\n                        currency: \"USD\"\n                    }\n                }\n            ];\n        }\n    }\n    async getProjects() {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock projects\");\n                return this.getMockProjects();\n            }\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/projects`);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /workspaces/${this.workspaceId}/projects`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify projects:\", error);\n            console.log(\"Returning mock projects due to Clockify API failure\");\n            return this.getMockProjects();\n        }\n    }\n    async getTimeEntries(projectId, startDate, endDate) {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock data\");\n                return this.getMockTimeEntries(projectId, startDate, endDate);\n            }\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/projects/${projectId}/time-entries`);\n            url.searchParams.append(\"start\", startDate);\n            url.searchParams.append(\"end\", endDate);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /workspaces/${this.workspaceId}/projects/${projectId}/time-entries`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify time entries:\", error);\n            console.log(\"Returning mock time entry data due to Clockify API failure\");\n            return this.getMockTimeEntries(projectId, startDate, endDate);\n        }\n    }\n    async getAllTimeEntries(startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            // Clockify API requires POST for filtered time entries with date parameters\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/time-entries`);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            console.log(`   Method: POST`);\n            console.log(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n            console.log(`   Body: ${JSON.stringify({\n                start: startDate,\n                end: endDate\n            })}`);\n            const response = await fetch(url.toString(), {\n                method: \"POST\",\n                headers: {\n                    ...this.getHeaders(),\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    start: startDate,\n                    end: endDate\n                })\n            });\n            console.log(`📡 Clockify API Response: ${response.status} ${response.statusText}`);\n            if (response.status === 401) {\n                throw new Error(\"Clockify API authentication failed - check your API key\");\n            }\n            if (response.status === 403) {\n                throw new Error(\"Clockify API access forbidden - check your workspace ID and permissions\");\n            }\n            if (response.status === 404) {\n                const errorDetails = `Endpoint not found: /workspaces/${this.workspaceId}/time-entries`;\n                console.error(`❌ 404 Error Details: ${errorDetails}`);\n                console.error(`   Full URL: ${url.toString()}`);\n                console.error(`   Workspace ID: ${this.workspaceId}`);\n                console.error(`   API Key configured: ${!!this.apiKey}`);\n                throw new Error(`Clockify API error: 404 Not Found - ${errorDetails}`);\n            }\n            if (response.status === 405) {\n                throw new Error(\"Clockify API method not allowed - this endpoint requires POST method\");\n            }\n            if (response.status === 429) {\n                throw new Error(\"Clockify API rate limit exceeded - try again later\");\n            }\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /workspaces/${this.workspaceId}/time-entries`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get all Clockify time entries:\", error);\n            // Return mock time entry data when Clockify fails\n            console.log(\"Returning mock time entry data due to Clockify API failure\");\n            return [\n                {\n                    id: \"mock-time-entry-1\",\n                    description: \"Mock work session\",\n                    timeInterval: {\n                        start: startDate,\n                        end: endDate,\n                        duration: \"PT8H0M\"\n                    },\n                    billable: true,\n                    userId: \"mock-user-id\",\n                    userName: \"Mock User\",\n                    projectId: \"mock-project-1\",\n                    projectName: \"Mock Project 1\"\n                }\n            ];\n        }\n    }\n    async getUsers() {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            return await this.makeRequest(`/workspaces/${this.workspaceId}/users`);\n        } catch (error) {\n            console.error(\"Failed to get Clockify users:\", error);\n            // Return mock user data when Clockify fails\n            return [\n                {\n                    id: \"mock-user-1\",\n                    name: \"Mock User 1\",\n                    email: \"user1@example.com\",\n                    status: \"ACTIVE\",\n                    hourlyRate: {\n                        amount: 100,\n                        currency: \"USD\"\n                    }\n                },\n                {\n                    id: \"mock-user-2\",\n                    name: \"Mock User 2\",\n                    email: \"user2@example.com\",\n                    status: \"ACTIVE\",\n                    hourlyRate: {\n                        amount: 120,\n                        currency: \"USD\"\n                    }\n                }\n            ];\n        }\n    }\n    async getProjectTimeReport(projectId, startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const timeEntries = await this.getTimeEntries(projectId, startDate, endDate);\n            const project = await this.getProjects().then((projects)=>projects.find((p)=>p.id === projectId));\n            if (!project) {\n                throw new Error(\"Project not found\");\n            }\n            const totalHours = timeEntries.reduce((sum, entry)=>{\n                const duration = entry.timeInterval.duration;\n                const hours = this.parseDuration(duration);\n                return sum + hours;\n            }, 0);\n            const billableHours = timeEntries.filter((entry)=>entry.billable).reduce((sum, entry)=>{\n                const duration = entry.timeInterval.duration;\n                const hours = this.parseDuration(duration);\n                return sum + hours;\n            }, 0);\n            const nonBillableHours = totalHours - billableHours;\n            return {\n                projectId,\n                projectName: project.name,\n                totalHours,\n                billableHours,\n                nonBillableHours,\n                totalAmount: totalHours * (project.hourlyRate?.amount || 0),\n                billableAmount: billableHours * (project.hourlyRate?.amount || 0),\n                nonBillableAmount: nonBillableHours * (project.hourlyRate?.amount || 0),\n                entries: timeEntries,\n                period: {\n                    start: startDate,\n                    end: endDate\n                }\n            };\n        } catch (error) {\n            console.error(\"Failed to get project time report:\", error);\n            return null;\n        }\n    }\n    async getAllProjectsTimeSummary(startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const projects = await this.getProjects();\n            const reports = [];\n            for (const project of projects){\n                const report = await this.getProjectTimeReport(project.id, startDate, endDate);\n                if (report) {\n                    reports.push(report);\n                }\n            }\n            return reports;\n        } catch (error) {\n            console.error(\"Failed to get all projects time summary:\", error);\n            return [];\n        }\n    }\n    // Helper method to parse ISO 8601 duration to hours\n    parseDuration(duration) {\n        const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || \"0\");\n        const minutes = parseInt(match[2] || \"0\");\n        const seconds = parseInt(match[3] || \"0\");\n        return hours + minutes / 60 + seconds / 3600;\n    }\n    // Enhanced method to generate mock time entries\n    getMockTimeEntries(projectId, startDate, endDate) {\n        return [\n            {\n                id: `mock-${projectId}-1`,\n                description: \"Mock project work\",\n                timeInterval: {\n                    start: startDate,\n                    end: endDate,\n                    duration: \"PT8H0M\"\n                },\n                billable: true,\n                userId: \"mock-user-id\",\n                userName: \"Mock User\",\n                projectId: projectId,\n                projectName: \"Mock Project\"\n            }\n        ];\n    }\n    // Enhanced method to generate mock projects\n    getMockProjects() {\n        return [\n            {\n                id: \"mock-project-1\",\n                name: \"Mock Project 1\",\n                workspaceId: \"mock-workspace\",\n                clientId: \"mock-client-1\",\n                clientName: \"Mock Client 1\",\n                isPublic: true,\n                isTemplate: false,\n                color: \"#000000\",\n                billable: true,\n                public: true,\n                archived: false,\n                status: \"ACTIVE\",\n                budget: 50000,\n                hourlyRate: {\n                    amount: 150,\n                    currency: \"USD\"\n                }\n            }\n        ];\n    }\n    // Enhanced method to generate mock user\n    getMockUser() {\n        return {\n            id: \"mock-user-id\",\n            email: \"mock@example.com\",\n            name: \"Mock User\",\n            profilePicture: \"\",\n            status: \"ACTIVE\",\n            activeWorkspace: \"mock-workspace\",\n            defaultWorkspace: \"mock-workspace\"\n        };\n    }\n}\n// Create the service instance\nconst clockifyService = new ClockifyService();\n// Export the service instance as both default and named export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clockifyService);\n\n// Export convenience functions\nconst fetchClockifyProjects = async ()=>{\n    try {\n        return await clockifyService.getProjects();\n    } catch (error) {\n        console.error(\"Error fetching Clockify projects:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeEntries = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getTimeEntries(projectId, startDate || \"\", endDate || \"\");\n    } catch (error) {\n        console.error(\"Error fetching Clockify time entries:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeReport = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getProjectTimeReport(projectId, startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time report:\", error);\n        return null;\n    }\n};\nconst fetchAllClockifyTimeSummaries = async (startDate, endDate)=>{\n    try {\n        return await clockifyService.getAllProjectsTimeSummary(startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time summaries:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/clockify.ts\n");

/***/ }),

/***/ "(rsc)/./lib/zoho.ts":
/*!*********************!*\
  !*** ./lib/zoho.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchInvoices: () => (/* binding */ fetchInvoices),\n/* harmony export */   fetchProjects: () => (/* binding */ fetchProjects),\n/* harmony export */   zohoService: () => (/* binding */ zohoService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n\nclass ZohoService {\n    constructor(){\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.refreshPromise = null;\n        this.TOKEN_REFRESH_BUFFER = 5 * 60 * 1000 // 5 minutes buffer\n        ;\n        this.autoRefreshTimer = null;\n        this.AUTO_REFRESH_INTERVAL = 45 * 60 * 1000 // 45 minutes\n        ;\n        this.lastRefreshTime = 0 // Track when auto-refresh was last triggered\n        ;\n        // Rate limiting properties\n        this.requestCount = 0;\n        this.lastRequestTime = 0;\n        this.MAX_REQUESTS_PER_MINUTE = 30 // Conservative limit\n        ;\n        this.MIN_REQUEST_INTERVAL = 2000 // 2 seconds between requests\n        ;\n        this.retryCount = 0;\n        this.MAX_RETRIES = 3;\n        this.BASE_DELAY = 1000 // 1 second base delay for exponential backoff\n        ;\n        // Start automatic token refresh\n        this._startAutoRefresh();\n    }\n    _startAutoRefresh() {\n        // Clear any existing timer\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n        }\n        // Set up automatic refresh every 45 minutes\n        this.autoRefreshTimer = setInterval(async ()=>{\n            try {\n                console.log(\"Auto-refreshing Zoho token (45-minute interval)...\");\n                this.lastRefreshTime = Date.now(); // Track when refresh was triggered\n                await this.forceRefreshToken();\n                console.log(\"Auto-refresh completed successfully\");\n            } catch (error) {\n                console.error(\"Auto-refresh failed:\", error);\n            }\n        }, this.AUTO_REFRESH_INTERVAL);\n        // Set initial refresh time\n        this.lastRefreshTime = Date.now();\n        console.log(\"Automatic Zoho token refresh started (every 45 minutes)\");\n    }\n    _stopAutoRefresh() {\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n            this.autoRefreshTimer = null;\n            console.log(\"Automatic Zoho token refresh stopped\");\n        }\n    }\n    async getAccessToken() {\n        // Check if token is still valid (with buffer)\n        if (this.accessToken && Date.now() < this.tokenExpiry - this.TOKEN_REFRESH_BUFFER) {\n            return this.accessToken;\n        }\n        // If there's already a refresh in progress, wait for it\n        if (this.refreshPromise) {\n            return this.refreshPromise;\n        }\n        // Start a new refresh\n        this.refreshPromise = this.refreshAccessToken();\n        try {\n            const token = await this.refreshPromise;\n            return token;\n        } finally{\n            this.refreshPromise = null;\n        }\n    }\n    async refreshAccessToken() {\n        try {\n            console.log(\"Refreshing Zoho access token...\");\n            // Create form data for the request\n            const formData = new URLSearchParams();\n            formData.append(\"refresh_token\", \"1000.4bf26c4881dfba83aae32546453d662d.a9353e91362a18c457b5cbec86b10ed2\" || 0);\n            formData.append(\"client_id\", \"1000.8RL8WMTDXS0WIP2EJF2XUS6NDSLQEP\" || 0);\n            formData.append(\"client_secret\", \"8a7ee3c04f0a0d860dd215c4449deab9bf15d1d00b\" || 0);\n            formData.append(\"grant_type\", \"refresh_token\");\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"https://accounts.zoho.com/oauth/v2/token\", formData, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            });\n            this.accessToken = response.data.access_token;\n            this.tokenExpiry = Date.now() + response.data.expires_in * 1000;\n            console.log(`Token refreshed successfully. Expires in ${Math.round(response.data.expires_in / 60)} minutes`);\n            return this.accessToken;\n        } catch (error) {\n            console.error(\"Error refreshing Zoho access token:\", error);\n            throw new Error(\"Failed to authenticate with Zoho\");\n        }\n    }\n    async makeRequest(endpoint) {\n        try {\n            // Apply rate limiting\n            await this.applyRateLimit();\n            const token = await this.getAccessToken();\n            // Create AbortController for timeout\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 15000); // 15 second timeout\n            try {\n                const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://www.zohoapis.com/books/v3/${endpoint}`, {\n                    headers: {\n                        \"Authorization\": `Bearer ${token}`,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    params: {\n                        organization_id: \"652094923\"\n                    },\n                    timeout: 15000,\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                // Reset retry count on success\n                this.retryCount = 0;\n                this.requestCount++;\n                this.lastRequestTime = Date.now();\n                return response.data;\n            } catch (axiosError) {\n                clearTimeout(timeoutId);\n                // Handle timeout specifically\n                if (axiosError.code === \"ECONNABORTED\" || axiosError.message?.includes(\"timeout\")) {\n                    throw new Error(`Zoho API request timed out for ${endpoint}`);\n                }\n                throw axiosError;\n            }\n        } catch (error) {\n            // Handle rate limiting (400 with specific error message)\n            if (error.response?.status === 400 && error.response?.data?.error === \"Access Denied\" && error.response?.data?.error_description?.includes(\"too many requests\")) {\n                console.log(\"Zoho rate limit hit, implementing exponential backoff...\");\n                await this.handleRateLimit();\n                // Retry the request after backoff\n                if (this.retryCount < this.MAX_RETRIES) {\n                    this.retryCount++;\n                    console.log(`Retrying request after rate limit backoff (attempt ${this.retryCount})`);\n                    return this.makeRequest(endpoint);\n                } else {\n                    throw new Error(\"Zoho API rate limit exceeded after maximum retries. Please try again later.\");\n                }\n            }\n            // If we get a 401, try refreshing the token once\n            if (error.response?.status === 401) {\n                console.log(\"Token expired, refreshing...\");\n                // Clear the current token and force a refresh\n                this.accessToken = null;\n                this.tokenExpiry = 0;\n                try {\n                    const newToken = await this.forceRefreshToken();\n                    // Retry the request with the new token\n                    const retryResponse = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://www.zohoapis.com/books/v3/${endpoint}`, {\n                        headers: {\n                            \"Authorization\": `Bearer ${newToken}`,\n                            \"Content-Type\": \"application/json\"\n                        },\n                        params: {\n                            organization_id: \"652094923\"\n                        },\n                        timeout: 15000\n                    });\n                    console.log(\"Request retry successful after token refresh\");\n                    return retryResponse.data;\n                } catch (refreshError) {\n                    console.error(\"Failed to refresh token or retry request:\", refreshError);\n                    throw new Error(`Zoho API authentication failed after token refresh: ${endpoint}`);\n                }\n            }\n            // Handle other HTTP errors\n            if (error.response?.status) {\n                console.error(`Zoho API error ${error.response.status} for ${endpoint}:`, error.response.data);\n                // Provide more specific error messages\n                if (error.response.status === 403) {\n                    throw new Error(\"Zoho API access forbidden - check your organization ID and permissions\");\n                } else if (error.response.status === 429) {\n                    throw new Error(\"Zoho API rate limit exceeded - please try again later\");\n                } else if (error.response.status >= 500) {\n                    throw new Error(\"Zoho API server error - please try again later\");\n                }\n                throw new Error(`Zoho API error ${error.response.status}: ${error.response.data?.message || \"Unknown error\"}`);\n            }\n            console.error(`Error making Zoho request to ${endpoint}:`, error);\n            throw new Error(`Failed to fetch data from Zoho: ${endpoint}`);\n        }\n    }\n    async applyRateLimit() {\n        const now = Date.now();\n        // Check if we need to wait between requests\n        if (this.lastRequestTime > 0) {\n            const timeSinceLastRequest = now - this.lastRequestTime;\n            if (timeSinceLastRequest < this.MIN_REQUEST_INTERVAL) {\n                const waitTime = this.MIN_REQUEST_INTERVAL - timeSinceLastRequest;\n                console.log(`Rate limiting: waiting ${waitTime}ms before next request`);\n                await new Promise((resolve)=>setTimeout(resolve, waitTime));\n            }\n        }\n        // Check if we've exceeded the per-minute limit\n        if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n            const timeSinceFirstRequest = now - this.lastRequestTime;\n            if (timeSinceFirstRequest < 60000) {\n                const waitTime = 60000 - timeSinceFirstRequest;\n                console.log(`Rate limiting: exceeded ${this.MAX_REQUESTS_PER_MINUTE} requests per minute, waiting ${waitTime}ms`);\n                await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                this.requestCount = 0;\n            } else {\n                // Reset counter if more than 1 minute has passed\n                this.requestCount = 0;\n            }\n        }\n    }\n    async handleRateLimit() {\n        const delay = this.BASE_DELAY * Math.pow(2, this.retryCount);\n        console.log(`Rate limit backoff: waiting ${delay}ms before retry`);\n        await new Promise((resolve)=>setTimeout(resolve, delay));\n        // Reset request counters to allow fresh start\n        this.requestCount = 0;\n        this.lastRequestTime = 0;\n    }\n    async getProjects() {\n        try {\n            let allProjects = [];\n            let page = 1;\n            const perPage = 200;\n            while(true){\n                const data = await this.makeRequest(`projects?page=${page}&per_page=${perPage}`);\n                const projects = data.projects?.map((project)=>{\n                    // Log the first project to see available fields\n                    if (page === 1 && allProjects.length === 0) {\n                        console.log(\"Sample Zoho project data:\", JSON.stringify(project, null, 2));\n                    }\n                    return {\n                        project_id: project.project_id,\n                        project_name: project.project_name || project.name || \"\",\n                        description: project.description || \"\",\n                        status: project.status || \"active\",\n                        start_date: project.start_date || \"\",\n                        end_date: project.end_date || \"\",\n                        budget_amount: project.budget_amount || 0,\n                        rate_per_hour: project.rate_per_hour || 0,\n                        customer_id: project.customer_id || \"\",\n                        customer_name: project.customer_name || \"\",\n                        signed_fee: undefined\n                    };\n                }) || [];\n                allProjects = allProjects.concat(projects);\n                // Check if we've reached the end\n                if (projects.length < perPage) {\n                    break;\n                }\n                page++;\n            }\n            console.log(`Fetched ${allProjects.length} projects from Zoho`);\n            return allProjects;\n        } catch (error) {\n            console.error(\"Error fetching projects:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithRevenueBudget() {\n        try {\n            console.log(\"Fetching projects with revenue budget data...\");\n            const projects = await this.getProjects();\n            // Log projects that have revenue_budget data\n            const projectsWithRevenueBudget = projects.filter((project)=>{\n                const hasRevenueBudget = project.signed_fee && project.signed_fee > 0;\n                if (hasRevenueBudget) {\n                    console.log(`Project ${project.project_name} has revenue budget: $${project.signed_fee}`);\n                }\n                return hasRevenueBudget;\n            });\n            console.log(`Found ${projectsWithRevenueBudget.length} projects with revenue budget data`);\n            return projects;\n        } catch (error) {\n            console.error(\"Error fetching projects with revenue budget:\", error);\n            return [];\n        }\n    }\n    async debugProjectFields() {\n        try {\n            console.log(\"Debugging Zoho project fields...\");\n            const data = await this.makeRequest(\"projects?page=1&per_page=5\");\n            if (data.projects && data.projects.length > 0) {\n                console.log(\"Available fields in Zoho project response:\");\n                const sampleProject = data.projects[0];\n                Object.keys(sampleProject).forEach((key)=>{\n                    console.log(`  ${key}: ${sampleProject[key]} (${typeof sampleProject[key]})`);\n                });\n                // Check specifically for revenue_budget\n                if (sampleProject.revenue_budget !== undefined) {\n                    console.log(`✅ Found revenue_budget field: ${sampleProject.revenue_budget}`);\n                } else {\n                    console.log(\"❌ revenue_budget field not found in Zoho response\");\n                    console.log(\"Available budget-related fields:\");\n                    Object.keys(sampleProject).forEach((key)=>{\n                        if (key.toLowerCase().includes(\"budget\") || key.toLowerCase().includes(\"revenue\")) {\n                            console.log(`  ${key}: ${sampleProject[key]}`);\n                        }\n                    });\n                }\n            } else {\n                console.log(\"No projects found in Zoho response\");\n            }\n        } catch (error) {\n            console.error(\"Error debugging project fields:\", error);\n        }\n    }\n    async getProjectsWithEstimates() {\n        try {\n            const projects = await this.getProjects();\n            // For the first few projects, try to get estimates to see if that contains the signed fee\n            const projectsWithEstimates = await Promise.all(projects.slice(0, 5).map(async (project)=>{\n                try {\n                    const estimates = await this.getProjectEstimates(project.project_id);\n                    const totalEstimateAmount = estimates.reduce((sum, estimate)=>sum + (estimate.total || 0), 0);\n                    console.log(`Project ${project.project_name} estimates:`, estimates.length, \"total amount:\", totalEstimateAmount);\n                    return {\n                        ...project,\n                        signed_fee: project.signed_fee || totalEstimateAmount || 0\n                    };\n                } catch (error) {\n                    console.error(`Error fetching estimates for project ${project.project_id}:`, error);\n                    return project;\n                }\n            }));\n            // Return all projects, with the first 5 having updated signed fees from estimates\n            return [\n                ...projectsWithEstimates,\n                ...projects.slice(5)\n            ];\n        } catch (error) {\n            console.error(\"Error fetching projects with estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithInvoiceTotals() {\n        try {\n            const [projects, invoices] = await Promise.all([\n                this.getProjects(),\n                this.getInvoices()\n            ]);\n            // Calculate signed fee as total of all invoices for each project\n            const projectsWithInvoiceTotals = projects.map((project)=>{\n                const projectInvoices = invoices.filter((invoice)=>invoice.project_id === project.project_id);\n                const totalInvoiceAmount = projectInvoices.reduce((sum, invoice)=>sum + invoice.amount, 0);\n                console.log(`Project ${project.project_name} invoices:`, projectInvoices.length, \"total amount:\", totalInvoiceAmount);\n                return {\n                    ...project,\n                    signed_fee: project.signed_fee || totalInvoiceAmount || 0\n                };\n            });\n            return projectsWithInvoiceTotals;\n        } catch (error) {\n            console.error(\"Error fetching projects with invoice totals:\", error);\n            return [];\n        }\n    }\n    async getInvoices() {\n        try {\n            const data = await this.makeRequest(\"invoices\");\n            return data.invoices?.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                })) || [];\n        } catch (error) {\n            console.error(\"Error fetching invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectInvoices(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/invoices`);\n            return data.invoices?.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                })) || [];\n        } catch (error) {\n            console.error(\"Error fetching project invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectDetails(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}`);\n            console.log(`Project ${projectId} details:`, JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching project details:\", error);\n            return null;\n        }\n    }\n    async getProjectEstimates(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/estimates`);\n            console.log(`Project ${projectId} estimates:`, JSON.stringify(data, null, 2));\n            return data.estimates || [];\n        } catch (error) {\n            console.error(\"Error fetching project estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectContracts(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/contracts`);\n            console.log(`Project ${projectId} contracts:`, JSON.stringify(data, null, 2));\n            return data.contracts || [];\n        } catch (error) {\n            console.error(\"Error fetching project contracts:\", error);\n            return [];\n        }\n    }\n    // New method to get Profit & Loss statement\n    async getProfitAndLoss(startDate, endDate) {\n        try {\n            const data = await this.makeRequest(`reports/profitandloss?from_date=${startDate}&to_date=${endDate}`);\n            console.log(\"Profit & Loss data:\", JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching Profit & Loss:\", error);\n            return null;\n        }\n    }\n    // New method to get Cash Flow statement\n    async getCashFlow(startDate, endDate) {\n        try {\n            const data = await this.makeRequest(`reports/cashflow?from_date=${startDate}&to_date=${endDate}`);\n            console.log(\"Cash Flow data:\", JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching Cash Flow:\", error);\n            return null;\n        }\n    }\n    // New method to get Balance Sheet\n    async getBalanceSheet(date) {\n        try {\n            const data = await this.makeRequest(`reports/balancesheet?date=${date}`);\n            console.log(\"Balance Sheet data:\", JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching Balance Sheet:\", error);\n            return null;\n        }\n    }\n    // New method to get Chart of Accounts\n    async getChartOfAccounts() {\n        try {\n            const data = await this.makeRequest(\"chartofaccounts\");\n            console.log(\"Chart of Accounts data:\", JSON.stringify(data, null, 2));\n            return data.chartofaccounts || [];\n        } catch (error) {\n            console.error(\"Error fetching Chart of Accounts:\", error);\n            return [];\n        }\n    }\n    // New method to get Journal Entries for a date range\n    async getJournalEntries(startDate, endDate) {\n        try {\n            const data = await this.makeRequest(`journalentries?from_date=${startDate}&to_date=${endDate}`);\n            console.log(\"Journal Entries data:\", JSON.stringify(data, null, 2));\n            return data.journalentries || [];\n        } catch (error) {\n            console.error(\"Error fetching Journal Entries:\", error);\n            return [];\n        }\n    }\n    // New method to get comprehensive financial metrics\n    async getFinancialMetrics(startDate, endDate) {\n        try {\n            const [plData, cfData, bsData] = await Promise.all([\n                this.getProfitAndLoss(startDate, endDate),\n                this.getCashFlow(startDate, endDate),\n                this.getBalanceSheet(endDate)\n            ]);\n            // Extract financial metrics from the responses\n            const revenue = plData?.revenue?.total || 0;\n            const expenses = plData?.expenses?.total || 0;\n            const grossProfit = revenue - expenses;\n            // Calculate net profit (may need adjustment based on actual Zoho response structure)\n            const netProfit = grossProfit - (plData?.operating_expenses?.total || 0);\n            const operatingIncome = grossProfit - (plData?.operating_expenses?.total || 0);\n            // Extract cash flow data\n            const cashFlow = cfData?.net_cash_flow || 0;\n            const accountsReceivable = bsData?.current_assets?.accounts_receivable || 0;\n            const accountsPayable = bsData?.current_liabilities?.accounts_payable || 0;\n            const cashBalance = bsData?.current_assets?.cash_and_bank || 0;\n            return {\n                revenue,\n                expenses,\n                grossProfit,\n                netProfit,\n                operatingIncome,\n                cashFlow,\n                accountsReceivable,\n                accountsPayable,\n                cashBalance\n            };\n        } catch (error) {\n            console.error(\"Error fetching financial metrics:\", error);\n            // Return default values if API calls fail\n            return {\n                revenue: 0,\n                expenses: 0,\n                grossProfit: 0,\n                netProfit: 0,\n                operatingIncome: 0,\n                cashFlow: 0,\n                accountsReceivable: 0,\n                accountsPayable: 0,\n                cashBalance: 0\n            };\n        }\n    }\n    // Method to manually refresh token (for testing)\n    async forceRefreshToken() {\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.lastRefreshTime = Date.now(); // Track manual refresh time\n        await this.getAccessToken();\n    }\n    // Get token status for debugging\n    getTokenStatus() {\n        const now = Date.now();\n        return {\n            hasToken: !!this.accessToken,\n            expiresIn: this.tokenExpiry - now,\n            isExpired: now >= this.tokenExpiry\n        };\n    }\n    // Method to get auto-refresh status\n    getAutoRefreshStatus() {\n        const now = Date.now();\n        const timeSinceLastRefresh = now - this.lastRefreshTime;\n        const nextRefreshIn = Math.max(0, this.AUTO_REFRESH_INTERVAL - timeSinceLastRefresh);\n        return {\n            isActive: !!this.autoRefreshTimer,\n            nextRefreshIn\n        };\n    }\n    // Public method to start auto-refresh\n    enableAutoRefresh() {\n        this._startAutoRefresh();\n    }\n    // Public method to stop auto-refresh\n    disableAutoRefresh() {\n        this._stopAutoRefresh();\n    }\n    // Public method to get comprehensive status\n    getStatus() {\n        return {\n            ...this.getTokenStatus(),\n            autoRefresh: this.getAutoRefreshStatus()\n        };\n    }\n}\nconst zohoService = new ZohoService();\n// Export the functions that are being imported in page.tsx\nconst fetchProjects = async ()=>{\n    try {\n        console.log(\"Client: Fetching projects from API\");\n        const response = await fetch(\"/api/projects\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"projects\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching projects:\", error);\n        throw error;\n    }\n};\nconst fetchInvoices = async ()=>{\n    try {\n        console.log(\"Client: Fetching invoices from API\");\n        const response = await fetch(\"/api/invoices\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"invoices\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching invoices:\", error);\n        throw error;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/zoho.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/form-data","vendor-chunks/get-intrinsic","vendor-chunks/asynckit","vendor-chunks/combined-stream","vendor-chunks/mime-types","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/es-set-tostringtag","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/has-flag","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftop-projects%2Froute&page=%2Fapi%2Ftop-projects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftop-projects%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();