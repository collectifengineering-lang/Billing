"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/payroll/bamboohr/route";
exports.ids = ["app/api/payroll/bamboohr/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayroll%2Fbamboohr%2Froute&page=%2Fapi%2Fpayroll%2Fbamboohr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayroll%2Fbamboohr%2Froute.ts&appDir=%2Fworkspace%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayroll%2Fbamboohr%2Froute&page=%2Fapi%2Fpayroll%2Fbamboohr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayroll%2Fbamboohr%2Froute.ts&appDir=%2Fworkspace%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _workspace_app_api_payroll_bamboohr_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/payroll/bamboohr/route.ts */ \"(rsc)/./app/api/payroll/bamboohr/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/payroll/bamboohr/route\",\n        pathname: \"/api/payroll/bamboohr\",\n        filename: \"route\",\n        bundlePath: \"app/api/payroll/bamboohr/route\"\n    },\n    resolvedPagePath: \"/workspace/app/api/payroll/bamboohr/route.ts\",\n    nextConfigOutput,\n    userland: _workspace_app_api_payroll_bamboohr_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/payroll/bamboohr/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwYXlyb2xsJTJGYmFtYm9vaHIlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnBheXJvbGwlMkZiYW1ib29ociUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnBheXJvbGwlMkZiYW1ib29ociUyRnJvdXRlLnRzJmFwcERpcj0lMkZ3b3Jrc3BhY2UlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRndvcmtzcGFjZSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDSjtBQUN6RTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8/YmI1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvd29ya3NwYWNlL2FwcC9hcGkvcGF5cm9sbC9iYW1ib29oci9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcGF5cm9sbC9iYW1ib29oci9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3BheXJvbGwvYmFtYm9vaHJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3BheXJvbGwvYmFtYm9vaHIvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvd29ya3NwYWNlL2FwcC9hcGkvcGF5cm9sbC9iYW1ib29oci9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvcGF5cm9sbC9iYW1ib29oci9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayroll%2Fbamboohr%2Froute&page=%2Fapi%2Fpayroll%2Fbamboohr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayroll%2Fbamboohr%2Froute.ts&appDir=%2Fworkspace%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/payroll/bamboohr/route.ts":
/*!*******************************************!*\
  !*** ./app/api/payroll/bamboohr/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_payroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../lib/payroll */ \"(rsc)/./lib/payroll.ts\");\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { action, data } = body;\n        switch(action){\n            case \"configure\":\n                {\n                    const config = data;\n                    await _lib_payroll__WEBPACK_IMPORTED_MODULE_1__.payrollService.configureBambooHR(config);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        message: `BambooHR configured for subdomain: ${config.subdomain}`\n                    });\n                }\n            case \"import-data\":\n                {\n                    // Auto-configure from env if not already configured\n                    try {\n                        const status = _lib_payroll__WEBPACK_IMPORTED_MODULE_1__.payrollService.bamboohrConfig;\n                        if (!status && process.env.BAMBOOHR_SUBDOMAIN && process.env.BAMBOOHR_API_KEY) {\n                            await _lib_payroll__WEBPACK_IMPORTED_MODULE_1__.payrollService.configureBambooHR({\n                                subdomain: process.env.BAMBOOHR_SUBDOMAIN,\n                                apiKey: process.env.BAMBOOHR_API_KEY,\n                                webhookSecret: process.env.BAMBOOHR_WEBHOOK_SECRET || undefined\n                            });\n                        }\n                    } catch  {}\n                    const importResult = await _lib_payroll__WEBPACK_IMPORTED_MODULE_1__.payrollService.importSalariesFromBambooHR();\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        result: importResult\n                    });\n                }\n            case \"test-connection\":\n                {\n                    // Test the BambooHR connection by trying to get company info\n                    const { configureBambooHR } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../../lib/bamboohr */ \"(rsc)/./lib/bamboohr.ts\"));\n                    const testConfig = data || {\n                        subdomain: process.env.BAMBOOHR_SUBDOMAIN || \"\",\n                        apiKey: process.env.BAMBOOHR_API_KEY || \"\",\n                        webhookSecret: process.env.BAMBOOHR_WEBHOOK_SECRET || undefined\n                    };\n                    configureBambooHR(testConfig);\n                    const { getBambooHRService } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../../lib/bamboohr */ \"(rsc)/./lib/bamboohr.ts\"));\n                    const service = getBambooHRService();\n                    const companyInfo = await service.getCompanyInfo();\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        message: \"BambooHR connection successful\",\n                        companyInfo\n                    });\n                }\n            case \"get-employees\":\n                {\n                    const { configureBambooHR: configureTest, getBambooHRService: getTestService } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../../lib/bamboohr */ \"(rsc)/./lib/bamboohr.ts\"));\n                    const testConfig = data;\n                    configureTest(testConfig);\n                    const testService = getTestService();\n                    // Handle pagination if BambooHR returns partial results over time; the directory returns all by default\n                    const employees = await testService.getAllEmployees();\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        employees\n                    });\n                }\n            case \"get-compensation\":\n                {\n                    const { configureBambooHR: configureTest2, getBambooHRService: getTestService2 } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../../lib/bamboohr */ \"(rsc)/./lib/bamboohr.ts\"));\n                    const testConfig = data.config;\n                    const employeeId = data.employeeId;\n                    configureTest2(testConfig);\n                    const testService2 = getTestService2();\n                    const compensation = await testService2.getEmployeeCompensation(employeeId);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        compensation\n                    });\n                }\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Invalid action\"\n                }, {\n                    status: 400\n                });\n        }\n    } catch (error) {\n        console.error(\"Error in BambooHR integration:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3BheXJvbGwvYmFtYm9vaHIvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdEO0FBQ0M7QUFHbEQsZUFBZUUsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUUUsSUFBSTtRQUMvQixNQUFNLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUdIO1FBRXpCLE9BQVFFO1lBQ04sS0FBSztnQkFBYTtvQkFDaEIsTUFBTUUsU0FBeUJEO29CQUMvQixNQUFNTix3REFBY0EsQ0FBQ1EsaUJBQWlCLENBQUNEO29CQUN2QyxPQUFPUixxREFBWUEsQ0FBQ0ssSUFBSSxDQUFDO3dCQUN2QkssU0FBUzt3QkFDVEMsU0FBUyxDQUFDLG1DQUFtQyxFQUFFSCxPQUFPSSxTQUFTLENBQUMsQ0FBQztvQkFDbkU7Z0JBQ0Y7WUFFQSxLQUFLO2dCQUFlO29CQUNsQixvREFBb0Q7b0JBQ3BELElBQUk7d0JBQ0YsTUFBTUMsU0FBUyx5REFBd0JDLGNBQWM7d0JBQ3JELElBQUksQ0FBQ0QsVUFBVUUsUUFBUUMsR0FBRyxDQUFDQyxrQkFBa0IsSUFBSUYsUUFBUUMsR0FBRyxDQUFDRSxnQkFBZ0IsRUFBRTs0QkFDN0UsTUFBTWpCLHdEQUFjQSxDQUFDUSxpQkFBaUIsQ0FBQztnQ0FDckNHLFdBQVdHLFFBQVFDLEdBQUcsQ0FBQ0Msa0JBQWtCO2dDQUN6Q0UsUUFBUUosUUFBUUMsR0FBRyxDQUFDRSxnQkFBZ0I7Z0NBQ3BDRSxlQUFlTCxRQUFRQyxHQUFHLENBQUNLLHVCQUF1QixJQUFJQzs0QkFDeEQ7d0JBQ0Y7b0JBQ0YsRUFBRSxPQUFNLENBQUM7b0JBQ1QsTUFBTUMsZUFBZSxNQUFNdEIsd0RBQWNBLENBQUN1QiwwQkFBMEI7b0JBQ3BFLE9BQU94QixxREFBWUEsQ0FBQ0ssSUFBSSxDQUFDO3dCQUN2QkssU0FBUzt3QkFDVGUsUUFBUUY7b0JBQ1Y7Z0JBQ0Y7WUFFQSxLQUFLO2dCQUFtQjtvQkFDdEIsNkRBQTZEO29CQUM3RCxNQUFNLEVBQUVkLGlCQUFpQixFQUFFLEdBQUcsTUFBTSwrSUFBTztvQkFDM0MsTUFBTWlCLGFBQTZCbkIsUUFBUTt3QkFDekNLLFdBQVdHLFFBQVFDLEdBQUcsQ0FBQ0Msa0JBQWtCLElBQUk7d0JBQzdDRSxRQUFRSixRQUFRQyxHQUFHLENBQUNFLGdCQUFnQixJQUFJO3dCQUN4Q0UsZUFBZUwsUUFBUUMsR0FBRyxDQUFDSyx1QkFBdUIsSUFBSUM7b0JBQ3hEO29CQUNBYixrQkFBa0JpQjtvQkFFbEIsTUFBTSxFQUFFQyxrQkFBa0IsRUFBRSxHQUFHLE1BQU0sK0lBQU87b0JBQzVDLE1BQU1DLFVBQVVEO29CQUNoQixNQUFNRSxjQUFjLE1BQU1ELFFBQVFFLGNBQWM7b0JBRWhELE9BQU85QixxREFBWUEsQ0FBQ0ssSUFBSSxDQUFDO3dCQUN2QkssU0FBUzt3QkFDVEMsU0FBUzt3QkFDVGtCO29CQUNGO2dCQUNGO1lBRUEsS0FBSztnQkFBaUI7b0JBQ3BCLE1BQU0sRUFBRXBCLG1CQUFtQnNCLGFBQWEsRUFBRUosb0JBQW9CSyxjQUFjLEVBQUUsR0FBRyxNQUFNLCtJQUFPO29CQUM5RixNQUFNTixhQUE2Qm5CO29CQUNuQ3dCLGNBQWNMO29CQUNkLE1BQU1PLGNBQWNEO29CQUNwQix3R0FBd0c7b0JBQ3hHLE1BQU1FLFlBQVksTUFBTUQsWUFBWUUsZUFBZTtvQkFFbkQsT0FBT25DLHFEQUFZQSxDQUFDSyxJQUFJLENBQUM7d0JBQ3ZCSyxTQUFTO3dCQUNUd0I7b0JBQ0Y7Z0JBQ0Y7WUFFQSxLQUFLO2dCQUFvQjtvQkFDdkIsTUFBTSxFQUFFekIsbUJBQW1CMkIsY0FBYyxFQUFFVCxvQkFBb0JVLGVBQWUsRUFBRSxHQUFHLE1BQU0sK0lBQU87b0JBQ2hHLE1BQU1YLGFBQTZCbkIsS0FBS0MsTUFBTTtvQkFDOUMsTUFBTThCLGFBQWEvQixLQUFLK0IsVUFBVTtvQkFDbENGLGVBQWVWO29CQUNmLE1BQU1hLGVBQWVGO29CQUNyQixNQUFNRyxlQUFlLE1BQU1ELGFBQWFFLHVCQUF1QixDQUFDSDtvQkFFaEUsT0FBT3RDLHFEQUFZQSxDQUFDSyxJQUFJLENBQUM7d0JBQ3ZCSyxTQUFTO3dCQUNUOEI7b0JBQ0Y7Z0JBQ0Y7WUFFQTtnQkFDRSxPQUFPeEMscURBQVlBLENBQUNLLElBQUksQ0FBQztvQkFBRXFDLE9BQU87Z0JBQWlCLEdBQUc7b0JBQUU3QixRQUFRO2dCQUFJO1FBQ3hFO0lBQ0YsRUFBRSxPQUFPNkIsT0FBWTtRQUNuQkMsUUFBUUQsS0FBSyxDQUFDLGtDQUFrQ0E7UUFDaEQsT0FBTzFDLHFEQUFZQSxDQUFDSyxJQUFJLENBQUM7WUFBRXFDLE9BQU9BLE1BQU0vQixPQUFPO1FBQUMsR0FBRztZQUFFRSxRQUFRO1FBQUk7SUFDbkU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8uL2FwcC9hcGkvcGF5cm9sbC9iYW1ib29oci9yb3V0ZS50cz8wOWE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBwYXlyb2xsU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL2xpYi9wYXlyb2xsJztcbmltcG9ydCB7IEJhbWJvb0hSQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL3R5cGVzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgY29uc3QgeyBhY3Rpb24sIGRhdGEgfSA9IGJvZHk7XG5cbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAnY29uZmlndXJlJzoge1xuICAgICAgICBjb25zdCBjb25maWc6IEJhbWJvb0hSQ29uZmlnID0gZGF0YTtcbiAgICAgICAgYXdhaXQgcGF5cm9sbFNlcnZpY2UuY29uZmlndXJlQmFtYm9vSFIoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSwgXG4gICAgICAgICAgbWVzc2FnZTogYEJhbWJvb0hSIGNvbmZpZ3VyZWQgZm9yIHN1YmRvbWFpbjogJHtjb25maWcuc3ViZG9tYWlufWAgXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjYXNlICdpbXBvcnQtZGF0YSc6IHtcbiAgICAgICAgLy8gQXV0by1jb25maWd1cmUgZnJvbSBlbnYgaWYgbm90IGFscmVhZHkgY29uZmlndXJlZFxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IChwYXlyb2xsU2VydmljZSBhcyBhbnkpLmJhbWJvb2hyQ29uZmlnO1xuICAgICAgICAgIGlmICghc3RhdHVzICYmIHByb2Nlc3MuZW52LkJBTUJPT0hSX1NVQkRPTUFJTiAmJiBwcm9jZXNzLmVudi5CQU1CT09IUl9BUElfS0VZKSB7XG4gICAgICAgICAgICBhd2FpdCBwYXlyb2xsU2VydmljZS5jb25maWd1cmVCYW1ib29IUih7XG4gICAgICAgICAgICAgIHN1YmRvbWFpbjogcHJvY2Vzcy5lbnYuQkFNQk9PSFJfU1VCRE9NQUlOLFxuICAgICAgICAgICAgICBhcGlLZXk6IHByb2Nlc3MuZW52LkJBTUJPT0hSX0FQSV9LRVksXG4gICAgICAgICAgICAgIHdlYmhvb2tTZWNyZXQ6IHByb2Nlc3MuZW52LkJBTUJPT0hSX1dFQkhPT0tfU0VDUkVUIHx8IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIHt9XG4gICAgICAgIGNvbnN0IGltcG9ydFJlc3VsdCA9IGF3YWl0IHBheXJvbGxTZXJ2aWNlLmltcG9ydFNhbGFyaWVzRnJvbUJhbWJvb0hSKCk7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IFxuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgICAgIHJlc3VsdDogaW1wb3J0UmVzdWx0IFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY2FzZSAndGVzdC1jb25uZWN0aW9uJzoge1xuICAgICAgICAvLyBUZXN0IHRoZSBCYW1ib29IUiBjb25uZWN0aW9uIGJ5IHRyeWluZyB0byBnZXQgY29tcGFueSBpbmZvXG4gICAgICAgIGNvbnN0IHsgY29uZmlndXJlQmFtYm9vSFIgfSA9IGF3YWl0IGltcG9ydCgnLi4vLi4vLi4vLi4vbGliL2JhbWJvb2hyJyk7XG4gICAgICAgIGNvbnN0IHRlc3RDb25maWc6IEJhbWJvb0hSQ29uZmlnID0gZGF0YSB8fCB7XG4gICAgICAgICAgc3ViZG9tYWluOiBwcm9jZXNzLmVudi5CQU1CT09IUl9TVUJET01BSU4gfHwgJycsXG4gICAgICAgICAgYXBpS2V5OiBwcm9jZXNzLmVudi5CQU1CT09IUl9BUElfS0VZIHx8ICcnLFxuICAgICAgICAgIHdlYmhvb2tTZWNyZXQ6IHByb2Nlc3MuZW52LkJBTUJPT0hSX1dFQkhPT0tfU0VDUkVUIHx8IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgICAgICBjb25maWd1cmVCYW1ib29IUih0ZXN0Q29uZmlnKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHsgZ2V0QmFtYm9vSFJTZXJ2aWNlIH0gPSBhd2FpdCBpbXBvcnQoJy4uLy4uLy4uLy4uL2xpYi9iYW1ib29ocicpO1xuICAgICAgICBjb25zdCBzZXJ2aWNlID0gZ2V0QmFtYm9vSFJTZXJ2aWNlKCk7XG4gICAgICAgIGNvbnN0IGNvbXBhbnlJbmZvID0gYXdhaXQgc2VydmljZS5nZXRDb21wYW55SW5mbygpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSwgXG4gICAgICAgICAgbWVzc2FnZTogJ0JhbWJvb0hSIGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bCcsXG4gICAgICAgICAgY29tcGFueUluZm8gXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjYXNlICdnZXQtZW1wbG95ZWVzJzoge1xuICAgICAgICBjb25zdCB7IGNvbmZpZ3VyZUJhbWJvb0hSOiBjb25maWd1cmVUZXN0LCBnZXRCYW1ib29IUlNlcnZpY2U6IGdldFRlc3RTZXJ2aWNlIH0gPSBhd2FpdCBpbXBvcnQoJy4uLy4uLy4uLy4uL2xpYi9iYW1ib29ocicpO1xuICAgICAgICBjb25zdCB0ZXN0Q29uZmlnOiBCYW1ib29IUkNvbmZpZyA9IGRhdGE7XG4gICAgICAgIGNvbmZpZ3VyZVRlc3QodGVzdENvbmZpZyk7XG4gICAgICAgIGNvbnN0IHRlc3RTZXJ2aWNlID0gZ2V0VGVzdFNlcnZpY2UoKTtcbiAgICAgICAgLy8gSGFuZGxlIHBhZ2luYXRpb24gaWYgQmFtYm9vSFIgcmV0dXJucyBwYXJ0aWFsIHJlc3VsdHMgb3ZlciB0aW1lOyB0aGUgZGlyZWN0b3J5IHJldHVybnMgYWxsIGJ5IGRlZmF1bHRcbiAgICAgICAgY29uc3QgZW1wbG95ZWVzID0gYXdhaXQgdGVzdFNlcnZpY2UuZ2V0QWxsRW1wbG95ZWVzKCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgICBlbXBsb3llZXMgXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjYXNlICdnZXQtY29tcGVuc2F0aW9uJzoge1xuICAgICAgICBjb25zdCB7IGNvbmZpZ3VyZUJhbWJvb0hSOiBjb25maWd1cmVUZXN0MiwgZ2V0QmFtYm9vSFJTZXJ2aWNlOiBnZXRUZXN0U2VydmljZTIgfSA9IGF3YWl0IGltcG9ydCgnLi4vLi4vLi4vLi4vbGliL2JhbWJvb2hyJyk7XG4gICAgICAgIGNvbnN0IHRlc3RDb25maWc6IEJhbWJvb0hSQ29uZmlnID0gZGF0YS5jb25maWc7XG4gICAgICAgIGNvbnN0IGVtcGxveWVlSWQgPSBkYXRhLmVtcGxveWVlSWQ7XG4gICAgICAgIGNvbmZpZ3VyZVRlc3QyKHRlc3RDb25maWcpO1xuICAgICAgICBjb25zdCB0ZXN0U2VydmljZTIgPSBnZXRUZXN0U2VydmljZTIoKTtcbiAgICAgICAgY29uc3QgY29tcGVuc2F0aW9uID0gYXdhaXQgdGVzdFNlcnZpY2UyLmdldEVtcGxveWVlQ29tcGVuc2F0aW9uKGVtcGxveWVlSWQpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSwgXG4gICAgICAgICAgY29tcGVuc2F0aW9uIFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIGFjdGlvbicgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBCYW1ib29IUiBpbnRlZ3JhdGlvbjonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsInBheXJvbGxTZXJ2aWNlIiwiUE9TVCIsInJlcXVlc3QiLCJib2R5IiwianNvbiIsImFjdGlvbiIsImRhdGEiLCJjb25maWciLCJjb25maWd1cmVCYW1ib29IUiIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwic3ViZG9tYWluIiwic3RhdHVzIiwiYmFtYm9vaHJDb25maWciLCJwcm9jZXNzIiwiZW52IiwiQkFNQk9PSFJfU1VCRE9NQUlOIiwiQkFNQk9PSFJfQVBJX0tFWSIsImFwaUtleSIsIndlYmhvb2tTZWNyZXQiLCJCQU1CT09IUl9XRUJIT09LX1NFQ1JFVCIsInVuZGVmaW5lZCIsImltcG9ydFJlc3VsdCIsImltcG9ydFNhbGFyaWVzRnJvbUJhbWJvb0hSIiwicmVzdWx0IiwidGVzdENvbmZpZyIsImdldEJhbWJvb0hSU2VydmljZSIsInNlcnZpY2UiLCJjb21wYW55SW5mbyIsImdldENvbXBhbnlJbmZvIiwiY29uZmlndXJlVGVzdCIsImdldFRlc3RTZXJ2aWNlIiwidGVzdFNlcnZpY2UiLCJlbXBsb3llZXMiLCJnZXRBbGxFbXBsb3llZXMiLCJjb25maWd1cmVUZXN0MiIsImdldFRlc3RTZXJ2aWNlMiIsImVtcGxveWVlSWQiLCJ0ZXN0U2VydmljZTIiLCJjb21wZW5zYXRpb24iLCJnZXRFbXBsb3llZUNvbXBlbnNhdGlvbiIsImVycm9yIiwiY29uc29sZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/payroll/bamboohr/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/bamboohr.ts":
/*!*************************!*\
  !*** ./lib/bamboohr.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BambooHRService: () => (/* binding */ BambooHRService),\n/* harmony export */   bamboohrService: () => (/* binding */ bamboohrService),\n/* harmony export */   configureBambooHR: () => (/* binding */ configureBambooHR),\n/* harmony export */   getBambooHRService: () => (/* binding */ getBambooHRService),\n/* harmony export */   importBambooHRData: () => (/* binding */ importBambooHRData),\n/* harmony export */   importBambooHREmployees: () => (/* binding */ importBambooHREmployees),\n/* harmony export */   importBambooHRSalaries: () => (/* binding */ importBambooHRSalaries)\n/* harmony export */ });\nclass BambooHRService {\n    constructor(config){\n        this.config = config;\n        // Use versioned BambooHR API base\n        this.baseUrl = `https://api.bamboohr.com/api/gateway.php/${config.subdomain}/v1`;\n    }\n    async makeRequest(endpoint, options = {}) {\n        const url = `${this.baseUrl}${endpoint}`;\n        const basic = Buffer.from(`${this.config.apiKey}:x`).toString(\"base64\");\n        const headers = {\n            \"Authorization\": `Basic ${basic}`,\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            ...options.headers\n        };\n        try {\n            const response = await fetch(url, {\n                ...options,\n                headers\n            });\n            if (!response.ok) {\n                const body = await response.text().catch(()=>\"\");\n                throw new Error(`BambooHR API error: ${response.status} ${response.statusText} ${body ? `- ${body}` : \"\"}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"BambooHR API request failed:\", error);\n            throw error;\n        }\n    }\n    // Employee Management\n    async getAllEmployees() {\n        // Attempt to fetch all employees, handling pagination if the API limits to 500 per page\n        const all = [];\n        let page = 1;\n        const pageSize = 500;\n        while(true){\n            const suffix = page > 1 ? `?page=${page}` : \"\";\n            const response = await this.makeRequest(`/employees/directory${suffix}`);\n            const employees = response.employees || [];\n            console.log(`BambooHR: fetched ${employees.length} employees from /v1/employees/directory (page ${page})`);\n            all.push(...employees);\n            if (employees.length < pageSize) {\n                break;\n            }\n            page += 1;\n        }\n        console.log(`BambooHR: total employees aggregated = ${all.length}`);\n        return all;\n    }\n    async getEmployee(employeeId) {\n        const response = await this.makeRequest(`/employees/${employeeId}`);\n        return response.employee;\n    }\n    async getEmployeeDirectory() {\n        const response = await this.makeRequest(\"/employees/directory\");\n        return response.employees || [];\n    }\n    // Compensation Management\n    async getEmployeeCompensation(employeeId) {\n        const response = await this.makeRequest(`/employees/${employeeId}/compensation`);\n        return response.compensation || [];\n    }\n    async getCompensationHistory(employeeId, startDate, endDate) {\n        let endpoint = `/employees/${employeeId}/compensation/history`;\n        const params = new URLSearchParams();\n        if (startDate) params.append(\"startDate\", startDate);\n        if (endDate) params.append(\"endDate\", endDate);\n        if (params.toString()) {\n            endpoint += `?${params.toString()}`;\n        }\n        const response = await this.makeRequest(endpoint);\n        return response.compensation || [];\n    }\n    // Time Off Management\n    async getEmployeeTimeOff(employeeId) {\n        const response = await this.makeRequest(`/employees/${employeeId}/timeoff`);\n        return response.timeOff || [];\n    }\n    async getAllTimeOff(startDate, endDate) {\n        let endpoint = \"/timeoff\";\n        const params = new URLSearchParams();\n        if (startDate) params.append(\"startDate\", startDate);\n        if (endDate) params.append(\"endDate\", endDate);\n        if (params.toString()) {\n            endpoint += `?${params.toString()}`;\n        }\n        const response = await this.makeRequest(endpoint);\n        return response.timeOff || [];\n    }\n    // Reports\n    async getCustomReport(reportId) {\n        const response = await this.makeRequest(`/reports/${reportId}`);\n        return response.report;\n    }\n    async createCustomReport(reportData) {\n        const response = await this.makeRequest(\"/reports\", {\n            method: \"POST\",\n            body: JSON.stringify(reportData)\n        });\n        return response.report;\n    }\n    // Company Information\n    async getCompanyInfo() {\n        const response = await this.makeRequest(\"/company\");\n        return response.company;\n    }\n    // Webhook Management\n    async createWebhook(webhookData) {\n        const response = await this.makeRequest(\"/webhooks\", {\n            method: \"POST\",\n            body: JSON.stringify(webhookData)\n        });\n        return response.webhook;\n    }\n    async getWebhooks() {\n        const response = await this.makeRequest(\"/webhooks\");\n        return response.webhooks || [];\n    }\n    async deleteWebhook(webhookId) {\n        await this.makeRequest(`/webhooks/${webhookId}`, {\n            method: \"DELETE\"\n        });\n    }\n    // Utility Methods\n    calculateHourlyRate(annualSalary, paySchedule) {\n        let hoursPerYear;\n        switch(paySchedule){\n            case \"weekly\":\n                hoursPerYear = 52 * 40; // 40 hours per week\n                break;\n            case \"bi-weekly\":\n                hoursPerYear = 26 * 80; // 80 hours per 2 weeks\n                break;\n            case \"semi-monthly\":\n                hoursPerYear = 24 * 86.67; // 86.67 hours per pay period\n                break;\n            case \"monthly\":\n                hoursPerYear = 12 * 173.33; // 173.33 hours per month\n                break;\n            default:\n                hoursPerYear = 2080; // Standard 40-hour work week\n        }\n        return annualSalary / hoursPerYear;\n    }\n    // Data Import Methods\n    async importEmployees() {\n        const bamboohrEmployees = await this.getAllEmployees();\n        console.log(`BambooHR import: preparing to upsert ${bamboohrEmployees.length} employees`);\n        return bamboohrEmployees.map((emp)=>({\n                id: emp.id,\n                name: emp.displayName,\n                email: emp.email,\n                status: emp.status === \"active\" ? \"active\" : \"inactive\",\n                department: emp.department,\n                position: emp.jobTitle,\n                hireDate: emp.hireDate,\n                terminationDate: emp.terminationDate\n            }));\n    }\n    async importSalaries() {\n        const employees = await this.getAllEmployees();\n        console.log(`BambooHR import: fetching compensation for ${employees.length} employees`);\n        const salaries = [];\n        for (const employee of employees){\n            const compensations = await this.getEmployeeCompensation(employee.id);\n            for (const comp of compensations){\n                // Log the upsert intent; actual DB upsert occurs in saveEmployeeSalary\n                console.log(`BambooHR upsert salary -> employeeId=${comp.employeeId} effectiveDate=${comp.effectiveDate} annualSalary=${comp.annualSalary} hourlyRate=${comp.hourlyRate}`);\n                salaries.push({\n                    employeeId: comp.employeeId,\n                    effectiveDate: comp.effectiveDate,\n                    endDate: comp.endDate,\n                    annualSalary: comp.annualSalary,\n                    hourlyRate: comp.hourlyRate,\n                    currency: comp.currency,\n                    notes: `Imported from BambooHR - ${comp.payType} (${comp.paySchedule})`\n                });\n            }\n        }\n        return salaries;\n    }\n    async importAllData() {\n        try {\n            const employees = await this.importEmployees();\n            const salaries = await this.importSalaries();\n            return {\n                source: \"bamboohr\",\n                importDate: new Date().toISOString(),\n                recordsImported: employees.length + salaries.length,\n                errors: []\n            };\n        } catch (error) {\n            return {\n                source: \"bamboohr\",\n                importDate: new Date().toISOString(),\n                recordsImported: 0,\n                errors: [\n                    error.message\n                ]\n            };\n        }\n    }\n    // Helper Methods\n    async searchEmployees(query) {\n        const employees = await this.getAllEmployees();\n        return employees.filter((emp)=>emp.displayName.toLowerCase().includes(query.toLowerCase()) || emp.email.toLowerCase().includes(query.toLowerCase()));\n    }\n    async getEmployeesByDepartment(department) {\n        const employees = await this.getAllEmployees();\n        return employees.filter((emp)=>emp.department === department);\n    }\n    async getActiveEmployees() {\n        const employees = await this.getAllEmployees();\n        return employees.filter((emp)=>emp.status === \"active\");\n    }\n}\nlet bamboohrService = null;\nconst configureBambooHR = (config)=>{\n    bamboohrService = new BambooHRService(config);\n    console.log(`BambooHR service configured for subdomain: ${config.subdomain}`);\n};\nconst getBambooHRService = ()=>{\n    if (!bamboohrService) {\n        throw new Error(\"BambooHR service not configured. Call configureBambooHR first.\");\n    }\n    return bamboohrService;\n};\nconst importBambooHREmployees = async ()=>{\n    const service = getBambooHRService();\n    return await service.importEmployees();\n};\nconst importBambooHRSalaries = async ()=>{\n    const service = getBambooHRService();\n    return await service.importSalaries();\n};\nconst importBambooHRData = async ()=>{\n    const service = getBambooHRService();\n    return await service.importAllData();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/bamboohr.ts\n");

/***/ }),

/***/ "(rsc)/./lib/database.ts":
/*!*************************!*\
  !*** ./lib/database.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDatabaseSchema: () => (/* binding */ createDatabaseSchema),\n/* harmony export */   ensureDatabaseSchema: () => (/* binding */ ensureDatabaseSchema),\n/* harmony export */   getAllEmployeeSalaries: () => (/* binding */ getAllEmployeeSalaries),\n/* harmony export */   getAllEmployeeTimeEntries: () => (/* binding */ getAllEmployeeTimeEntries),\n/* harmony export */   getAllEmployees: () => (/* binding */ getAllEmployees),\n/* harmony export */   getAllProjectMultipliers: () => (/* binding */ getAllProjectMultipliers),\n/* harmony export */   getBambooHRConfig: () => (/* binding */ getBambooHRConfig),\n/* harmony export */   prisma: () => (/* reexport safe */ _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   saveBambooHRConfig: () => (/* binding */ saveBambooHRConfig),\n/* harmony export */   saveEmployee: () => (/* binding */ saveEmployee),\n/* harmony export */   saveEmployeeSalary: () => (/* binding */ saveEmployeeSalary),\n/* harmony export */   saveEmployeeTimeEntry: () => (/* binding */ saveEmployeeTimeEntry),\n/* harmony export */   saveProjectMultiplier: () => (/* binding */ saveProjectMultiplier),\n/* harmony export */   testDatabaseConnection: () => (/* binding */ testDatabaseConnection)\n/* harmony export */ });\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\n\nasync function ensureDatabaseSchema() {\n    try {\n        // Check if tables already exist by trying to query them\n        await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projection.findFirst();\n        console.log(\"Database schema already exists\");\n        return true; // Tables exist\n    } catch (error) {\n        console.log(\"Tables do not exist, attempting to create schema...\");\n        // If it's a table doesn't exist error, we need to create the schema\n        if (error.code === \"P2021\" || error.message?.includes(\"does not exist\")) {\n            try {\n                // Try to create the schema by running a simple operation\n                // This will trigger Prisma to create the tables if using Prisma Accelerate\n                console.log(\"Attempting to create database schema...\");\n                // Try to create a test record to trigger table creation\n                await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projection.create({\n                    data: {\n                        projectId: \"__test__\",\n                        month: \"__test__\",\n                        value: 0\n                    }\n                });\n                // If successful, delete the test record\n                await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projection.deleteMany({\n                    where: {\n                        projectId: \"__test__\",\n                        month: \"__test__\"\n                    }\n                });\n                console.log(\"Database schema created successfully\");\n                return true;\n            } catch (createError) {\n                console.error(\"Failed to create database schema:\", createError);\n                return false;\n            }\n        }\n        console.log(\"Tables do not exist, but Prisma Accelerate will create them automatically\");\n        console.log(\"Note: With Prisma Accelerate, tables are created automatically when you first insert data\");\n        return false; // Tables don't exist yet\n    }\n}\nasync function createDatabaseSchema() {\n    try {\n        console.log(\"Creating database schema...\");\n        // This will create all tables defined in the schema\n        // We'll use a more direct approach by trying to create the schema\n        const result = await ensureDatabaseSchema();\n        if (result) {\n            console.log(\"Database schema creation completed successfully\");\n            return true;\n        } else {\n            console.error(\"Database schema creation failed\");\n            return false;\n        }\n    } catch (error) {\n        console.error(\"Database schema creation failed:\", error);\n        return false;\n    }\n}\nasync function testDatabaseConnection() {\n    try {\n        // Test basic connection\n        await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].$connect();\n        console.log(\"Database connection successful\");\n        // Test a simple query\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].$queryRaw`SELECT 1 as test`;\n        console.log(\"Database query test successful:\", result);\n        return true;\n    } catch (error) {\n        console.error(\"Database connection test failed:\", error);\n        // Provide specific error guidance\n        if (error.message?.includes(\"ENOTFOUND\")) {\n            console.error(\"Network error: Check your DATABASE_URL and network connectivity\");\n        } else if (error.message?.includes(\"authentication failed\")) {\n            console.error(\"Authentication error: Check your database credentials\");\n        } else if (error.message?.includes(\"does not exist\")) {\n            console.error(\"Database does not exist: Check your database name in the connection URL\");\n        } else if (error.message?.includes(\"connection timeout\")) {\n            console.error(\"Connection timeout: Check your network and database server status\");\n        }\n        return false;\n    } finally{\n        await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].$disconnect();\n    }\n}\n// BambooHR Database Operations\nasync function saveBambooHRConfig(config) {\n    try {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bambooHRConfig.upsert({\n            where: {\n                subdomain: config.subdomain\n            },\n            update: {\n                apiKey: config.apiKey,\n                webhookSecret: config.webhookSecret,\n                isActive: true,\n                lastSync: new Date(),\n                updatedAt: new Date()\n            },\n            create: {\n                subdomain: config.subdomain,\n                apiKey: config.apiKey,\n                webhookSecret: config.webhookSecret,\n                isActive: true,\n                lastSync: new Date()\n            }\n        });\n        console.log(`BambooHR config saved for subdomain: ${config.subdomain}`);\n        return result;\n    } catch (error) {\n        console.error(\"Error saving BambooHR config:\", error);\n        throw error;\n    }\n}\nasync function getBambooHRConfig(subdomain) {\n    try {\n        return await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bambooHRConfig.findUnique({\n            where: {\n                subdomain\n            }\n        });\n    } catch (error) {\n        console.error(\"Error getting BambooHR config:\", error);\n        throw error;\n    }\n}\nasync function saveEmployee(employee) {\n    try {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employee.upsert({\n            where: {\n                id: employee.id\n            },\n            update: {\n                name: employee.name,\n                email: employee.email,\n                status: employee.status,\n                department: employee.department,\n                position: employee.position,\n                hireDate: employee.hireDate,\n                terminationDate: employee.terminationDate,\n                updatedAt: new Date()\n            },\n            create: {\n                id: employee.id,\n                name: employee.name,\n                email: employee.email,\n                status: employee.status,\n                department: employee.department,\n                position: employee.position,\n                hireDate: employee.hireDate,\n                terminationDate: employee.terminationDate\n            }\n        });\n        console.log(`Employee saved: ${employee.name} (${employee.id})`);\n        return result;\n    } catch (error) {\n        console.error(\"Error saving employee:\", error);\n        throw error;\n    }\n}\nasync function saveEmployeeSalary(salary) {\n    try {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employeeSalary.upsert({\n            where: {\n                employeeId_effectiveDate: {\n                    employeeId: salary.employeeId,\n                    effectiveDate: salary.effectiveDate\n                }\n            },\n            update: {\n                endDate: salary.endDate,\n                annualSalary: salary.annualSalary,\n                hourlyRate: salary.hourlyRate,\n                currency: salary.currency,\n                notes: salary.notes,\n                source: salary.source,\n                updatedAt: new Date()\n            },\n            create: {\n                employeeId: salary.employeeId,\n                effectiveDate: salary.effectiveDate,\n                endDate: salary.endDate,\n                annualSalary: salary.annualSalary,\n                hourlyRate: salary.hourlyRate,\n                currency: salary.currency || \"USD\",\n                notes: salary.notes,\n                source: salary.source || \"bamboohr\"\n            }\n        });\n        console.log(`Employee salary saved for ${salary.employeeId} effective ${salary.effectiveDate}`);\n        return result;\n    } catch (error) {\n        console.error(\"Error saving employee salary:\", error);\n        throw error;\n    }\n}\nasync function saveProjectMultiplier(multiplier) {\n    try {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projectMultiplier.upsert({\n            where: {\n                projectId_effectiveDate: {\n                    projectId: multiplier.projectId,\n                    effectiveDate: multiplier.effectiveDate\n                }\n            },\n            update: {\n                projectName: multiplier.projectName,\n                multiplier: multiplier.multiplier,\n                endDate: multiplier.endDate,\n                notes: multiplier.notes,\n                updatedAt: new Date()\n            },\n            create: {\n                projectId: multiplier.projectId,\n                projectName: multiplier.projectName,\n                multiplier: multiplier.multiplier,\n                effectiveDate: multiplier.effectiveDate,\n                endDate: multiplier.endDate,\n                notes: multiplier.notes\n            }\n        });\n        console.log(`Project multiplier saved for ${multiplier.projectName} effective ${multiplier.effectiveDate}`);\n        return result;\n    } catch (error) {\n        console.error(\"Error saving project multiplier:\", error);\n        throw error;\n    }\n}\nasync function saveEmployeeTimeEntry(timeEntry) {\n    try {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employeeTimeEntry.upsert({\n            where: {\n                employeeId_projectId_date: {\n                    employeeId: timeEntry.employeeId,\n                    projectId: timeEntry.projectId,\n                    date: timeEntry.date\n                }\n            },\n            update: {\n                employeeName: timeEntry.employeeName,\n                projectName: timeEntry.projectName,\n                hours: timeEntry.hours,\n                billableHours: timeEntry.billableHours,\n                nonBillableHours: timeEntry.nonBillableHours,\n                hourlyRate: timeEntry.hourlyRate,\n                projectMultiplier: timeEntry.projectMultiplier,\n                totalCost: timeEntry.totalCost,\n                billableValue: timeEntry.billableValue,\n                efficiency: timeEntry.efficiency,\n                description: timeEntry.description,\n                tags: timeEntry.tags,\n                updatedAt: new Date()\n            },\n            create: {\n                employeeId: timeEntry.employeeId,\n                employeeName: timeEntry.employeeName,\n                projectId: timeEntry.projectId,\n                projectName: timeEntry.projectName,\n                date: timeEntry.date,\n                hours: timeEntry.hours,\n                billableHours: timeEntry.billableHours,\n                nonBillableHours: timeEntry.nonBillableHours,\n                hourlyRate: timeEntry.hourlyRate,\n                projectMultiplier: timeEntry.projectMultiplier,\n                totalCost: timeEntry.totalCost,\n                billableValue: timeEntry.billableValue,\n                efficiency: timeEntry.efficiency,\n                description: timeEntry.description,\n                tags: timeEntry.tags\n            }\n        });\n        console.log(`Time entry saved for ${timeEntry.employeeName} on ${timeEntry.date}`);\n        return result;\n    } catch (error) {\n        console.error(\"Error saving time entry:\", error);\n        throw error;\n    }\n}\nasync function getAllEmployees() {\n    try {\n        return await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employee.findMany({\n            include: {\n                salaries: true\n            }\n        });\n    } catch (error) {\n        console.error(\"Error getting all employees:\", error);\n        throw error;\n    }\n}\nasync function getAllEmployeeSalaries() {\n    try {\n        return await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employeeSalary.findMany({\n            include: {\n                employee: true\n            }\n        });\n    } catch (error) {\n        console.error(\"Error getting all employee salaries:\", error);\n        throw error;\n    }\n}\nasync function getAllProjectMultipliers() {\n    try {\n        return await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projectMultiplier.findMany();\n    } catch (error) {\n        console.error(\"Error getting all project multipliers:\", error);\n        throw error;\n    }\n}\nasync function getAllEmployeeTimeEntries() {\n    try {\n        return await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employeeTimeEntry.findMany({\n            include: {\n                employee: true\n            }\n        });\n    } catch (error) {\n        console.error(\"Error getting all time entries:\", error);\n        throw error;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/database.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prismaClientSingleton = ()=>{\n    return new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n        log: [\n            \"error\"\n        ]\n    });\n};\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? prismaClientSingleton();\nif (true) globalForPrisma.prisma = prisma;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZGIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBRTlDLE1BQU1DLHdCQUF3QjtJQUM1QixPQUFPLElBQUlELHdEQUFZQSxDQUFDO1FBQ3RCRSxLQUFLO1lBQUM7U0FBUTtJQUNoQjtBQUNGO0FBSUEsTUFBTUMsa0JBQWtCQztBQUl4QixNQUFNQyxTQUFTRixnQkFBZ0JFLE1BQU0sSUFBSUo7QUFFekMsSUFBSUssSUFBeUIsRUFBY0gsZ0JBQWdCRSxNQUFNLEdBQUdBO0FBRXBFLGlFQUFlQSxNQUFNQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vem9oby1iaWxsaW5nLXBsYXRmb3JtLy4vbGliL2RiLnRzPzFkZjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG5jb25zdCBwcmlzbWFDbGllbnRTaW5nbGV0b24gPSAoKSA9PiB7XG4gIHJldHVybiBuZXcgUHJpc21hQ2xpZW50KHtcbiAgICBsb2c6IFsnZXJyb3InXSwgLy8gQWRkIGVycm9yIGxvZ2dpbmcgZm9yIGRlYnVnZ2luZ1xuICB9KTtcbn07XG5cbnR5cGUgUHJpc21hQ2xpZW50U2luZ2xldG9uID0gUmV0dXJuVHlwZTx0eXBlb2YgcHJpc21hQ2xpZW50U2luZ2xldG9uPjtcblxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcbiAgcHJpc21hOiBQcmlzbWFDbGllbnRTaW5nbGV0b24gfCB1bmRlZmluZWQ7XG59O1xuXG5jb25zdCBwcmlzbWEgPSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID8/IHByaXNtYUNsaWVudFNpbmdsZXRvbigpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA9IHByaXNtYTtcblxuZXhwb3J0IGRlZmF1bHQgcHJpc21hO1xuIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsInByaXNtYUNsaWVudFNpbmdsZXRvbiIsImxvZyIsImdsb2JhbEZvclByaXNtYSIsImdsb2JhbFRoaXMiLCJwcmlzbWEiLCJwcm9jZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/payroll.ts":
/*!************************!*\
  !*** ./lib/payroll.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PayrollService: () => (/* binding */ PayrollService),\n/* harmony export */   addEmployee: () => (/* binding */ addEmployee),\n/* harmony export */   addProjectMultiplier: () => (/* binding */ addProjectMultiplier),\n/* harmony export */   addSalary: () => (/* binding */ addSalary),\n/* harmony export */   configureBambooHR: () => (/* binding */ configureBambooHR),\n/* harmony export */   generateEmployeeProfitabilityReport: () => (/* binding */ generateEmployeeProfitabilityReport),\n/* harmony export */   generateProjectProfitabilityReport: () => (/* binding */ generateProjectProfitabilityReport),\n/* harmony export */   importBambooHRData: () => (/* binding */ importBambooHRData),\n/* harmony export */   payrollService: () => (/* binding */ payrollService),\n/* harmony export */   processTimeEntries: () => (/* binding */ processTimeEntries)\n/* harmony export */ });\n/* harmony import */ var _bamboohr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bamboohr */ \"(rsc)/./lib/bamboohr.ts\");\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./database */ \"(rsc)/./lib/database.ts\");\n\n\nclass PayrollService {\n    constructor(){\n        this.employees = new Map();\n        this.salaries = new Map();\n        this.multipliers = new Map();\n        console.log(\"Payroll service initialized\");\n    }\n    mapDbEmployeeToDomain(dbEmployee) {\n        const statusValue = (dbEmployee.status || \"\").toLowerCase();\n        const status = statusValue === \"active\" ? \"active\" : \"inactive\";\n        const toIsoDateString = (d)=>{\n            if (!d) return undefined;\n            if (typeof d === \"string\") return d;\n            if (d instanceof Date) return d.toISOString();\n            try {\n                const asDate = new Date(d);\n                return isNaN(asDate.getTime()) ? undefined : asDate.toISOString();\n            } catch  {\n                return undefined;\n            }\n        };\n        return {\n            id: dbEmployee.id,\n            name: dbEmployee.name,\n            email: dbEmployee.email,\n            status,\n            department: dbEmployee.department ?? undefined,\n            position: dbEmployee.position ?? undefined,\n            hireDate: toIsoDateString(dbEmployee.hireDate) || \"\",\n            terminationDate: toIsoDateString(dbEmployee.terminationDate)\n        };\n    }\n    toNumber(value) {\n        if (typeof value === \"number\") return value;\n        // Prisma Decimal has toNumber(); fall back to parseFloat\n        const maybeDecimal = value;\n        if (maybeDecimal && typeof maybeDecimal.toNumber === \"function\") {\n            return maybeDecimal.toNumber();\n        }\n        const parsed = parseFloat(String(value));\n        return Number.isNaN(parsed) ? 0 : parsed;\n    }\n    mapDbSalariesToDomain(dbSalaries) {\n        return (dbSalaries || []).map((s)=>({\n                employeeId: s.employeeId,\n                effectiveDate: s.effectiveDate,\n                endDate: s.endDate ?? undefined,\n                annualSalary: this.toNumber(s.annualSalary),\n                hourlyRate: this.toNumber(s.hourlyRate),\n                currency: s.currency ?? undefined,\n                notes: s.notes ?? undefined\n            }));\n    }\n    mapDbMultipliersToDomain(dbMultipliers) {\n        return (dbMultipliers || []).map((m)=>({\n                projectId: m.projectId,\n                projectName: m.projectName,\n                multiplier: this.toNumber(m.multiplier),\n                effectiveDate: m.effectiveDate,\n                endDate: m.endDate ?? undefined,\n                notes: m.notes ?? undefined\n            }));\n    }\n    // Employee Management\n    async addEmployee(employee) {\n        // Save to database\n        await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveEmployee)(employee);\n        // Also keep in memory for backward compatibility\n        this.employees.set(employee.id, employee);\n        console.log(`Employee added: ${employee.name} (${employee.id})`);\n    }\n    async getEmployee(employeeId) {\n        // Try memory first, then database\n        let employee = this.employees.get(employeeId);\n        if (!employee) {\n            // Load from database\n            const dbEmployees = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllEmployees)();\n            const dbEmployee = dbEmployees.find((emp)=>emp.id === employeeId);\n            if (dbEmployee) {\n                const mapped = this.mapDbEmployeeToDomain(dbEmployee);\n                this.employees.set(employeeId, mapped);\n                employee = mapped;\n            }\n        }\n        return employee || null;\n    }\n    async getAllEmployees() {\n        // Load from database and sync memory\n        const dbEmployees = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllEmployees)();\n        // Update memory cache\n        const mapped = dbEmployees.map((emp)=>this.mapDbEmployeeToDomain(emp));\n        for (const emp of mapped){\n            this.employees.set(emp.id, emp);\n        }\n        return mapped;\n    }\n    async updateEmployee(employeeId, updates) {\n        const employee = this.employees.get(employeeId);\n        if (employee) {\n            const updatedEmployee = {\n                ...employee,\n                ...updates\n            };\n            // Save to database\n            await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveEmployee)(updatedEmployee);\n            // Update memory\n            this.employees.set(employeeId, updatedEmployee);\n            console.log(`Employee updated: ${employee.name}`);\n        }\n    }\n    // Salary Management\n    async addSalary(salary) {\n        // Save to database\n        await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveEmployeeSalary)(salary);\n        // Also keep in memory for backward compatibility\n        const employeeSalaries = this.salaries.get(salary.employeeId) || [];\n        // If this is a new current salary, end the previous one\n        if (!salary.endDate) {\n            const currentSalary = employeeSalaries.find((s)=>!s.endDate);\n            if (currentSalary) {\n                currentSalary.endDate = salary.effectiveDate;\n                // Update the previous salary in database\n                await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveEmployeeSalary)(currentSalary);\n            }\n        }\n        employeeSalaries.push(salary);\n        employeeSalaries.sort((a, b)=>new Date(a.effectiveDate).getTime() - new Date(b.effectiveDate).getTime());\n        this.salaries.set(salary.employeeId, employeeSalaries);\n        console.log(`Salary added for ${salary.employeeId} effective ${salary.effectiveDate}`);\n    }\n    async getEmployeeSalary(employeeId, date) {\n        // Try memory first, then database\n        let employeeSalaries = this.salaries.get(employeeId);\n        if (!employeeSalaries || employeeSalaries.length === 0) {\n            // Load from database\n            const dbSalaries = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllEmployeeSalaries)();\n            const employeeDbSalaries = dbSalaries.filter((s)=>s.employeeId === employeeId);\n            if (employeeDbSalaries.length > 0) {\n                const mapped = this.mapDbSalariesToDomain(employeeDbSalaries);\n                this.salaries.set(employeeId, mapped);\n                employeeSalaries = mapped;\n            }\n        }\n        if (!employeeSalaries) return null;\n        const targetDate = new Date(date);\n        return employeeSalaries.find((salary)=>{\n            const effectiveDate = new Date(salary.effectiveDate);\n            const endDate = salary.endDate ? new Date(salary.endDate) : new Date(\"9999-12-31\");\n            return targetDate >= effectiveDate && targetDate <= endDate;\n        }) || null;\n    }\n    async getEmployeeSalaryHistory(employeeId) {\n        // Try memory first, then database\n        let employeeSalaries = this.salaries.get(employeeId);\n        if (!employeeSalaries || employeeSalaries.length === 0) {\n            // Load from database\n            const dbSalaries = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllEmployeeSalaries)();\n            const employeeDbSalaries = dbSalaries.filter((s)=>s.employeeId === employeeId);\n            if (employeeDbSalaries.length > 0) {\n                const mapped = this.mapDbSalariesToDomain(employeeDbSalaries);\n                this.salaries.set(employeeId, mapped);\n                employeeSalaries = mapped;\n            }\n        }\n        return employeeSalaries || [];\n    }\n    // Project Multiplier Management\n    async addProjectMultiplier(multiplier) {\n        // Save to database\n        await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveProjectMultiplier)(multiplier);\n        // Also keep in memory for backward compatibility\n        const projectMultipliers = this.multipliers.get(multiplier.projectId) || [];\n        // If this is a new current multiplier, end the previous one\n        if (!multiplier.endDate) {\n            const currentMultiplier = projectMultipliers.find((m)=>!m.endDate);\n            if (currentMultiplier) {\n                currentMultiplier.endDate = multiplier.effectiveDate;\n                // Update the previous multiplier in database\n                await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveProjectMultiplier)(currentMultiplier);\n            }\n        }\n        projectMultipliers.push(multiplier);\n        projectMultipliers.sort((a, b)=>new Date(a.effectiveDate).getTime() - new Date(b.effectiveDate).getTime());\n        this.multipliers.set(multiplier.projectId, projectMultipliers);\n        console.log(`Multiplier added for project ${multiplier.projectName} effective ${multiplier.effectiveDate}`);\n    }\n    async getProjectMultiplier(projectId, date) {\n        // Try memory first, then database\n        let projectMultipliers = this.multipliers.get(projectId);\n        if (!projectMultipliers || projectMultipliers.length === 0) {\n            // Load from database\n            const dbMultipliers = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllProjectMultipliers)();\n            const projectDbMultipliers = dbMultipliers.filter((m)=>m.projectId === projectId);\n            if (projectDbMultipliers.length > 0) {\n                const mapped = this.mapDbMultipliersToDomain(projectDbMultipliers);\n                this.multipliers.set(projectId, mapped);\n                projectMultipliers = mapped;\n            }\n        }\n        if (!projectMultipliers) return null;\n        const targetDate = new Date(date);\n        return projectMultipliers.find((multiplier)=>{\n            const effectiveDate = new Date(multiplier.effectiveDate);\n            const endDate = multiplier.endDate ? new Date(multiplier.endDate) : new Date(\"9999-12-31\");\n            return targetDate >= effectiveDate && targetDate <= endDate;\n        }) || null;\n    }\n    async getProjectMultiplierHistory(projectId) {\n        // Try memory first, then database\n        let projectMultipliers = this.multipliers.get(projectId);\n        if (!projectMultipliers || projectMultipliers.length === 0) {\n            // Load from database\n            const dbMultipliers = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllProjectMultipliers)();\n            const projectDbMultipliers = dbMultipliers.filter((m)=>m.projectId === projectId);\n            if (projectDbMultipliers.length > 0) {\n                const mapped = this.mapDbMultipliersToDomain(projectDbMultipliers);\n                this.multipliers.set(projectId, mapped);\n                projectMultipliers = mapped;\n            }\n        }\n        return projectMultipliers || [];\n    }\n    // Time Entry Processing with Historical Rates\n    async processTimeEntries(clockifyEntries, clockifyUsers, projects) {\n        const employeeTimeEntries = [];\n        const userMap = new Map(clockifyUsers.map((user)=>[\n                user.id,\n                user\n            ]));\n        for (const entry of clockifyEntries){\n            const user = userMap.get(entry.userId);\n            if (!user) continue;\n            const entryDate = new Date(entry.timeInterval.start).toISOString().split(\"T\")[0];\n            const employee = await this.getEmployee(entry.userId);\n            if (!employee) continue;\n            const salary = await this.getEmployeeSalary(entry.userId, entryDate);\n            if (!salary) continue;\n            const project = projects.find((p)=>p.id === entry.projectId);\n            if (!project) continue;\n            const multiplier = await this.getProjectMultiplier(entry.projectId, entryDate);\n            const projectMultiplier = multiplier?.multiplier || 1.0;\n            const durationMs = this.parseDuration(entry.timeInterval.duration);\n            const hours = durationMs / (1000 * 60 * 60);\n            const billableHours = entry.billable ? hours : 0;\n            const nonBillableHours = entry.billable ? 0 : hours;\n            const totalCost = hours * salary.hourlyRate;\n            const billableValue = billableHours * salary.hourlyRate * projectMultiplier;\n            const efficiency = hours > 0 ? billableHours / hours : 0;\n            const timeEntry = {\n                employeeId: entry.userId,\n                employeeName: user.name,\n                projectId: entry.projectId,\n                projectName: project.name,\n                date: entryDate,\n                hours,\n                billableHours,\n                nonBillableHours,\n                hourlyRate: salary.hourlyRate,\n                projectMultiplier,\n                totalCost,\n                billableValue,\n                efficiency,\n                description: entry.description,\n                tags: entry.tags.map((tag)=>tag.name)\n            };\n            // Save to database\n            await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveEmployeeTimeEntry)(timeEntry);\n            employeeTimeEntries.push(timeEntry);\n        }\n        return employeeTimeEntries;\n    }\n    // Profitability Analysis\n    async generateProjectProfitabilityReport(projectId, startDate, endDate, employeeTimeEntries, revenue) {\n        const projectEntries = employeeTimeEntries.filter((entry)=>entry.projectId === projectId && entry.date >= startDate && entry.date <= endDate);\n        const totalHours = projectEntries.reduce((sum, entry)=>sum + entry.hours, 0);\n        const totalBillableHours = projectEntries.reduce((sum, entry)=>sum + entry.billableHours, 0);\n        const totalCost = projectEntries.reduce((sum, entry)=>sum + entry.totalCost, 0);\n        const totalBillableValue = projectEntries.reduce((sum, entry)=>sum + entry.billableValue, 0);\n        const grossProfit = revenue - totalCost;\n        const profitMargin = revenue > 0 ? grossProfit / revenue * 100 : 0;\n        const averageMultiplier = totalBillableHours > 0 ? totalBillableValue / (totalBillableHours * projectEntries[0]?.hourlyRate || 1) : 0;\n        // Employee breakdown\n        const employeeBreakdown = new Map();\n        for (const entry of projectEntries){\n            const existing = employeeBreakdown.get(entry.employeeId);\n            if (existing) {\n                existing.hours += entry.hours;\n                existing.cost += entry.totalCost;\n                existing.billableValue += entry.billableValue;\n                existing.efficiency = existing.hours > 0 ? existing.billableValue / (existing.hours * entry.hourlyRate) : 0;\n            } else {\n                employeeBreakdown.set(entry.employeeId, {\n                    employeeId: entry.employeeId,\n                    employeeName: entry.employeeName,\n                    hours: entry.hours,\n                    cost: entry.totalCost,\n                    billableValue: entry.billableValue,\n                    efficiency: entry.efficiency\n                });\n            }\n        }\n        // Monthly breakdown\n        const monthlyBreakdown = new Map();\n        for (const entry of projectEntries){\n            const month = entry.date.substring(0, 7); // YYYY-MM\n            const existing = monthlyBreakdown.get(month);\n            if (existing) {\n                existing.hours += entry.hours;\n                existing.cost += entry.totalCost;\n            } else {\n                monthlyBreakdown.set(month, {\n                    month,\n                    hours: entry.hours,\n                    cost: entry.totalCost,\n                    revenue: 0,\n                    profit: 0\n                });\n            }\n        }\n        return {\n            projectId,\n            projectName: projectEntries[0]?.projectName || \"Unknown Project\",\n            period: {\n                start: startDate,\n                end: endDate\n            },\n            totalHours,\n            totalBillableHours,\n            totalCost,\n            totalRevenue: revenue,\n            grossProfit,\n            profitMargin,\n            averageMultiplier,\n            employeeBreakdown: Array.from(employeeBreakdown.values()),\n            monthlyBreakdown: Array.from(monthlyBreakdown.values())\n        };\n    }\n    async generateEmployeeProfitabilityReport(employeeId, startDate, endDate, employeeTimeEntries) {\n        const employeeEntries = employeeTimeEntries.filter((entry)=>entry.employeeId === employeeId && entry.date >= startDate && entry.date <= endDate);\n        const totalHours = employeeEntries.reduce((sum, entry)=>sum + entry.hours, 0);\n        const totalBillableHours = employeeEntries.reduce((sum, entry)=>sum + entry.billableHours, 0);\n        const totalCost = employeeEntries.reduce((sum, entry)=>sum + entry.totalCost, 0);\n        const totalBillableValue = employeeEntries.reduce((sum, entry)=>sum + entry.billableValue, 0);\n        const efficiency = totalHours > 0 ? totalBillableHours / totalHours : 0;\n        const averageHourlyRate = totalHours > 0 ? totalCost / totalHours : 0;\n        // Project breakdown\n        const projectBreakdown = new Map();\n        for (const entry of employeeEntries){\n            const existing = projectBreakdown.get(entry.projectId);\n            if (existing) {\n                existing.hours += entry.hours;\n                existing.cost += entry.totalCost;\n                existing.billableValue += entry.billableValue;\n                existing.efficiency = existing.hours > 0 ? existing.billableValue / (existing.hours * entry.hourlyRate) : 0;\n            } else {\n                projectBreakdown.set(entry.projectId, {\n                    projectId: entry.projectId,\n                    projectName: entry.projectName,\n                    hours: entry.hours,\n                    cost: entry.totalCost,\n                    billableValue: entry.billableValue,\n                    efficiency: entry.efficiency\n                });\n            }\n        }\n        return {\n            employeeId,\n            employeeName: employeeEntries[0]?.employeeName || \"Unknown Employee\",\n            period: {\n                start: startDate,\n                end: endDate\n            },\n            totalHours,\n            totalBillableHours,\n            totalCost,\n            totalBillableValue,\n            efficiency,\n            averageHourlyRate,\n            projectBreakdown: Array.from(projectBreakdown.values())\n        };\n    }\n    // Payroll System Integration\n    async configurePayrollSystem(system) {\n        this.payrollSystem = system;\n        console.log(`Payroll system configured: ${system.name}`);\n    }\n    // BambooHR Integration\n    async configureBambooHR(config) {\n        this.bamboohrConfig = config;\n        (0,_bamboohr__WEBPACK_IMPORTED_MODULE_0__.configureBambooHR)(config);\n        // Save configuration to database\n        await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveBambooHRConfig)({\n            subdomain: config.subdomain,\n            apiKey: config.apiKey,\n            webhookSecret: config.webhookSecret\n        });\n        console.log(`BambooHR configured for subdomain: ${config.subdomain}`);\n    }\n    async importSalariesFromBambooHR() {\n        if (!this.bamboohrConfig) {\n            throw new Error(\"BambooHR not configured\");\n        }\n        try {\n            console.log(\"\\uD83D\\uDE80 Starting BambooHR data import process...\");\n            // Import employees from BambooHR\n            const bamboohrEmployees = await (0,_bamboohr__WEBPACK_IMPORTED_MODULE_0__.importBambooHREmployees)();\n            console.log(`📊 BambooHR import: Retrieved ${bamboohrEmployees.length} employees from BambooHR API`);\n            console.log(`🔄 BambooHR import: Beginning Supabase upsert for ${bamboohrEmployees.length} employees...`);\n            let employeeSuccess = 0;\n            const employeeErrors = [];\n            for (const employee of bamboohrEmployees){\n                try {\n                    await this.addEmployee(employee);\n                    employeeSuccess += 1;\n                    console.log(`✅ Employee upsert success: ${employee.name} (${employee.id})`);\n                } catch (e) {\n                    console.error(\"❌ BambooHR employee upsert failed:\", {\n                        id: employee.id,\n                        name: employee.name,\n                        error: e?.message || String(e)\n                    });\n                    employeeErrors.push(`emp:${employee.id}:${e?.message || e}`);\n                }\n            }\n            console.log(`📈 Employee import results: ${employeeSuccess} successes, ${employeeErrors.length} errors`);\n            // Import salaries from BambooHR\n            const bamboohrSalaries = await (0,_bamboohr__WEBPACK_IMPORTED_MODULE_0__.importBambooHRSalaries)();\n            console.log(`💰 BambooHR import: Retrieved ${bamboohrSalaries.length} salary records from BambooHR API`);\n            console.log(`🔄 BambooHR import: Beginning Supabase upsert for ${bamboohrSalaries.length} salary records...`);\n            let salarySuccess = 0;\n            const salaryErrors = [];\n            for (const salary of bamboohrSalaries){\n                try {\n                    await this.addSalary(salary);\n                    salarySuccess += 1;\n                    console.log(`✅ Salary upsert success: Employee ${salary.employeeId}, effective ${salary.effectiveDate}, annual: $${salary.annualSalary}`);\n                } catch (e) {\n                    console.error(\"❌ BambooHR salary upsert failed:\", {\n                        employeeId: salary.employeeId,\n                        effectiveDate: salary.effectiveDate,\n                        annualSalary: salary.annualSalary,\n                        hourlyRate: salary.hourlyRate,\n                        error: e?.message || String(e)\n                    });\n                    salaryErrors.push(`sal:${salary.employeeId}:${salary.effectiveDate}:${e?.message || e}`);\n                }\n            }\n            console.log(`📈 Salary import results: ${salarySuccess} successes, ${salaryErrors.length} errors`);\n            console.log(`🎉 BambooHR import completed successfully!`);\n            console.log(`📊 Final summary: Total employees processed=${bamboohrEmployees.length}, employees saved=${employeeSuccess}, salaries processed=${bamboohrSalaries.length}, salaries saved=${salarySuccess}`);\n            console.log(`⚠️ Error summary: Employee errors=${employeeErrors.length}, Salary errors=${salaryErrors.length}`);\n            return {\n                source: \"bamboohr\",\n                importDate: new Date().toISOString(),\n                recordsImported: employeeSuccess + salarySuccess,\n                errors: [\n                    ...employeeErrors,\n                    ...salaryErrors\n                ]\n            };\n        } catch (error) {\n            console.error(\"❌ BambooHR import failed with fatal error:\", error);\n            return {\n                source: \"bamboohr\",\n                importDate: new Date().toISOString(),\n                recordsImported: 0,\n                errors: [\n                    error.message\n                ]\n            };\n        }\n    }\n    async importSalariesFromPayrollSystem() {\n        if (!this.payrollSystem) {\n            throw new Error(\"No payroll system configured\");\n        }\n        if (this.payrollSystem.type === \"bamboohr\" && this.bamboohrConfig) {\n            return await this.importSalariesFromBambooHR();\n        }\n        // This would integrate with other payroll system APIs\n        // For now, return a mock import\n        return {\n            source: \"api\",\n            importDate: new Date().toISOString(),\n            recordsImported: 0,\n            errors: [\n                `${this.payrollSystem.type} integration not yet implemented`\n            ]\n        };\n    }\n    // Utility Methods\n    parseDuration(duration) {\n        const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/;\n        const match = duration.match(regex);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || \"0\");\n        const minutes = parseInt(match[2] || \"0\");\n        const seconds = parseInt(match[3] || \"0\");\n        return (hours * 3600 + minutes * 60 + seconds) * 1000;\n    }\n    calculateHourlyRate(annualSalary, workHoursPerYear = 2080) {\n        return annualSalary / workHoursPerYear;\n    }\n    // Normalization helpers to convert Prisma results to domain types\n    normalizeEmployee(dbEmployee) {\n        const statusValue = (dbEmployee.status || \"active\").toLowerCase();\n        const normalizedStatus = statusValue === \"active\" ? \"active\" : \"inactive\";\n        return {\n            id: dbEmployee.id,\n            name: dbEmployee.name,\n            email: dbEmployee.email,\n            status: normalizedStatus,\n            department: dbEmployee.department ?? undefined,\n            position: dbEmployee.position ?? undefined,\n            hireDate: dbEmployee.hireDate,\n            terminationDate: dbEmployee.terminationDate ?? undefined\n        };\n    }\n    normalizeSalary(dbSalary) {\n        const toNumber = (v)=>v && typeof v === \"object\" && \"toNumber\" in v ? v.toNumber() : Number(v);\n        return {\n            employeeId: dbSalary.employeeId,\n            effectiveDate: dbSalary.effectiveDate,\n            endDate: dbSalary.endDate ?? undefined,\n            annualSalary: toNumber(dbSalary.annualSalary),\n            hourlyRate: toNumber(dbSalary.hourlyRate),\n            currency: dbSalary.currency || \"USD\",\n            notes: dbSalary.notes ?? undefined\n        };\n    }\n    normalizeProjectMultiplier(dbMultiplier) {\n        const toNumber = (v)=>v && typeof v === \"object\" && \"toNumber\" in v ? v.toNumber() : Number(v);\n        return {\n            projectId: dbMultiplier.projectId,\n            projectName: dbMultiplier.projectName,\n            multiplier: toNumber(dbMultiplier.multiplier),\n            effectiveDate: dbMultiplier.effectiveDate,\n            endDate: dbMultiplier.endDate ?? undefined,\n            notes: dbMultiplier.notes ?? undefined\n        };\n    }\n    // Data Export/Import\n    async exportData() {\n        return {\n            employees: Array.from(this.employees.values()),\n            salaries: Array.from(this.salaries.entries()),\n            multipliers: Array.from(this.multipliers.entries()),\n            payrollSystem: this.payrollSystem,\n            bamboohrConfig: this.bamboohrConfig\n        };\n    }\n    async importData(data) {\n        this.employees = new Map(data.employees.map((emp)=>[\n                emp.id,\n                emp\n            ]));\n        this.salaries = new Map(data.salaries);\n        this.multipliers = new Map(data.multipliers);\n        this.payrollSystem = data.payrollSystem;\n        this.bamboohrConfig = data.bamboohrConfig;\n        if (this.bamboohrConfig) {\n            (0,_bamboohr__WEBPACK_IMPORTED_MODULE_0__.configureBambooHR)(this.bamboohrConfig);\n        }\n        console.log(\"Payroll data imported successfully\");\n    }\n}\n// Create singleton instance\nconst payrollService = new PayrollService();\n// Export convenience functions\nconst addEmployee = async (employee)=>{\n    await payrollService.addEmployee(employee);\n};\nconst addSalary = async (salary)=>{\n    await payrollService.addSalary(salary);\n};\nconst addProjectMultiplier = async (multiplier)=>{\n    await payrollService.addProjectMultiplier(multiplier);\n};\nconst processTimeEntries = async (clockifyEntries, clockifyUsers, projects)=>{\n    return await payrollService.processTimeEntries(clockifyEntries, clockifyUsers, projects);\n};\nconst generateProjectProfitabilityReport = async (projectId, startDate, endDate, employeeTimeEntries, revenue)=>{\n    return await payrollService.generateProjectProfitabilityReport(projectId, startDate, endDate, employeeTimeEntries, revenue);\n};\nconst generateEmployeeProfitabilityReport = async (employeeId, startDate, endDate, employeeTimeEntries)=>{\n    return await payrollService.generateEmployeeProfitabilityReport(employeeId, startDate, endDate, employeeTimeEntries);\n};\n// BambooHR specific functions\nconst configureBambooHR = async (config)=>{\n    await payrollService.configureBambooHR(config);\n};\nconst importBambooHRData = async ()=>{\n    return await payrollService.importSalariesFromBambooHR();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/payroll.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayroll%2Fbamboohr%2Froute&page=%2Fapi%2Fpayroll%2Fbamboohr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayroll%2Fbamboohr%2Froute.ts&appDir=%2Fworkspace%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();