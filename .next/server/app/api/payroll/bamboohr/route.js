"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/payroll/bamboohr/route";
exports.ids = ["app/api/payroll/bamboohr/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayroll%2Fbamboohr%2Froute&page=%2Fapi%2Fpayroll%2Fbamboohr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayroll%2Fbamboohr%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayroll%2Fbamboohr%2Froute&page=%2Fapi%2Fpayroll%2Fbamboohr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayroll%2Fbamboohr%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Jonathan_Desktop_Billing_app_api_payroll_bamboohr_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/payroll/bamboohr/route.ts */ \"(rsc)/./app/api/payroll/bamboohr/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/payroll/bamboohr/route\",\n        pathname: \"/api/payroll/bamboohr\",\n        filename: \"route\",\n        bundlePath: \"app/api/payroll/bamboohr/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\Billing\\\\app\\\\api\\\\payroll\\\\bamboohr\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Jonathan_Desktop_Billing_app_api_payroll_bamboohr_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/payroll/bamboohr/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwYXlyb2xsJTJGYmFtYm9vaHIlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnBheXJvbGwlMkZiYW1ib29ociUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnBheXJvbGwlMkZiYW1ib29ociUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM0QjtBQUN6RztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8/YzgxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxKb25hdGhhblxcXFxEZXNrdG9wXFxcXEJpbGxpbmdcXFxcYXBwXFxcXGFwaVxcXFxwYXlyb2xsXFxcXGJhbWJvb2hyXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wYXlyb2xsL2JhbWJvb2hyL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcGF5cm9sbC9iYW1ib29oclwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcGF5cm9sbC9iYW1ib29oci9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXEpvbmF0aGFuXFxcXERlc2t0b3BcXFxcQmlsbGluZ1xcXFxhcHBcXFxcYXBpXFxcXHBheXJvbGxcXFxcYmFtYm9vaHJcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3BheXJvbGwvYmFtYm9vaHIvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayroll%2Fbamboohr%2Froute&page=%2Fapi%2Fpayroll%2Fbamboohr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayroll%2Fbamboohr%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/payroll/bamboohr/route.ts":
/*!*******************************************!*\
  !*** ./app/api/payroll/bamboohr/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_payroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../lib/payroll */ \"(rsc)/./lib/payroll.ts\");\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { action, data } = body;\n        switch(action){\n            case \"configure\":\n                {\n                    const config = data;\n                    await _lib_payroll__WEBPACK_IMPORTED_MODULE_1__.payrollService.configureBambooHR(config);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        message: `BambooHR configured for subdomain: ${config.subdomain}`\n                    });\n                }\n            case \"import-data\":\n                {\n                    // Auto-configure from env if not already configured\n                    try {\n                        const status = _lib_payroll__WEBPACK_IMPORTED_MODULE_1__.payrollService.bamboohrConfig;\n                        if (!status && process.env.BAMBOOHR_SUBDOMAIN && process.env.BAMBOOHR_API_KEY) {\n                            await _lib_payroll__WEBPACK_IMPORTED_MODULE_1__.payrollService.configureBambooHR({\n                                subdomain: process.env.BAMBOOHR_SUBDOMAIN,\n                                apiKey: process.env.BAMBOOHR_API_KEY,\n                                webhookSecret: process.env.BAMBOOHR_WEBHOOK_SECRET || undefined\n                            });\n                        }\n                    } catch  {}\n                    const importResult = await _lib_payroll__WEBPACK_IMPORTED_MODULE_1__.payrollService.importSalariesFromBambooHR();\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        result: importResult\n                    });\n                }\n            case \"test-connection\":\n                {\n                    // Test the BambooHR connection by trying to get company info\n                    const { configureBambooHR } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../../lib/bamboohr */ \"(rsc)/./lib/bamboohr.ts\"));\n                    const testConfig = data || {\n                        subdomain: process.env.BAMBOOHR_SUBDOMAIN || \"\",\n                        apiKey: process.env.BAMBOOHR_API_KEY || \"\",\n                        webhookSecret: process.env.BAMBOOHR_WEBHOOK_SECRET || undefined\n                    };\n                    configureBambooHR(testConfig);\n                    const { getBambooHRService } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../../lib/bamboohr */ \"(rsc)/./lib/bamboohr.ts\"));\n                    const service = getBambooHRService();\n                    const companyInfo = await service.getCompanyInfo();\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        message: \"BambooHR connection successful\",\n                        companyInfo\n                    });\n                }\n            case \"get-employees\":\n                {\n                    const { configureBambooHR: configureTest, getBambooHRService: getTestService } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../../lib/bamboohr */ \"(rsc)/./lib/bamboohr.ts\"));\n                    const testConfig = data;\n                    configureTest(testConfig);\n                    const testService = getTestService();\n                    // Handle pagination if BambooHR returns partial results over time; the directory returns all by default\n                    const employees = await testService.getAllEmployees();\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        employees\n                    });\n                }\n            case \"get-compensation\":\n                {\n                    const { configureBambooHR: configureTest2, getBambooHRService: getTestService2 } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../../lib/bamboohr */ \"(rsc)/./lib/bamboohr.ts\"));\n                    const testConfig = data.config;\n                    const employeeId = data.employeeId;\n                    configureTest2(testConfig);\n                    const testService2 = getTestService2();\n                    const compensation = await testService2.getEmployeeCompensation(employeeId);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        compensation\n                    });\n                }\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Invalid action\"\n                }, {\n                    status: 400\n                });\n        }\n    } catch (error) {\n        console.error(\"Error in BambooHR integration:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3BheXJvbGwvYmFtYm9vaHIvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdEO0FBQ0M7QUFHbEQsZUFBZUUsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUUUsSUFBSTtRQUMvQixNQUFNLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUdIO1FBRXpCLE9BQVFFO1lBQ04sS0FBSztnQkFBYTtvQkFDaEIsTUFBTUUsU0FBeUJEO29CQUMvQixNQUFNTix3REFBY0EsQ0FBQ1EsaUJBQWlCLENBQUNEO29CQUN2QyxPQUFPUixxREFBWUEsQ0FBQ0ssSUFBSSxDQUFDO3dCQUN2QkssU0FBUzt3QkFDVEMsU0FBUyxDQUFDLG1DQUFtQyxFQUFFSCxPQUFPSSxTQUFTLENBQUMsQ0FBQztvQkFDbkU7Z0JBQ0Y7WUFFQSxLQUFLO2dCQUFlO29CQUNsQixvREFBb0Q7b0JBQ3BELElBQUk7d0JBQ0YsTUFBTUMsU0FBUyx5REFBd0JDLGNBQWM7d0JBQ3JELElBQUksQ0FBQ0QsVUFBVUUsUUFBUUMsR0FBRyxDQUFDQyxrQkFBa0IsSUFBSUYsUUFBUUMsR0FBRyxDQUFDRSxnQkFBZ0IsRUFBRTs0QkFDN0UsTUFBTWpCLHdEQUFjQSxDQUFDUSxpQkFBaUIsQ0FBQztnQ0FDckNHLFdBQVdHLFFBQVFDLEdBQUcsQ0FBQ0Msa0JBQWtCO2dDQUN6Q0UsUUFBUUosUUFBUUMsR0FBRyxDQUFDRSxnQkFBZ0I7Z0NBQ3BDRSxlQUFlTCxRQUFRQyxHQUFHLENBQUNLLHVCQUF1QixJQUFJQzs0QkFDeEQ7d0JBQ0Y7b0JBQ0YsRUFBRSxPQUFNLENBQUM7b0JBQ1QsTUFBTUMsZUFBZSxNQUFNdEIsd0RBQWNBLENBQUN1QiwwQkFBMEI7b0JBQ3BFLE9BQU94QixxREFBWUEsQ0FBQ0ssSUFBSSxDQUFDO3dCQUN2QkssU0FBUzt3QkFDVGUsUUFBUUY7b0JBQ1Y7Z0JBQ0Y7WUFFQSxLQUFLO2dCQUFtQjtvQkFDdEIsNkRBQTZEO29CQUM3RCxNQUFNLEVBQUVkLGlCQUFpQixFQUFFLEdBQUcsTUFBTSwrSUFBTztvQkFDM0MsTUFBTWlCLGFBQTZCbkIsUUFBUTt3QkFDekNLLFdBQVdHLFFBQVFDLEdBQUcsQ0FBQ0Msa0JBQWtCLElBQUk7d0JBQzdDRSxRQUFRSixRQUFRQyxHQUFHLENBQUNFLGdCQUFnQixJQUFJO3dCQUN4Q0UsZUFBZUwsUUFBUUMsR0FBRyxDQUFDSyx1QkFBdUIsSUFBSUM7b0JBQ3hEO29CQUNBYixrQkFBa0JpQjtvQkFFbEIsTUFBTSxFQUFFQyxrQkFBa0IsRUFBRSxHQUFHLE1BQU0sK0lBQU87b0JBQzVDLE1BQU1DLFVBQVVEO29CQUNoQixNQUFNRSxjQUFjLE1BQU1ELFFBQVFFLGNBQWM7b0JBRWhELE9BQU85QixxREFBWUEsQ0FBQ0ssSUFBSSxDQUFDO3dCQUN2QkssU0FBUzt3QkFDVEMsU0FBUzt3QkFDVGtCO29CQUNGO2dCQUNGO1lBRUEsS0FBSztnQkFBaUI7b0JBQ3BCLE1BQU0sRUFBRXBCLG1CQUFtQnNCLGFBQWEsRUFBRUosb0JBQW9CSyxjQUFjLEVBQUUsR0FBRyxNQUFNLCtJQUFPO29CQUM5RixNQUFNTixhQUE2Qm5CO29CQUNuQ3dCLGNBQWNMO29CQUNkLE1BQU1PLGNBQWNEO29CQUNwQix3R0FBd0c7b0JBQ3hHLE1BQU1FLFlBQVksTUFBTUQsWUFBWUUsZUFBZTtvQkFFbkQsT0FBT25DLHFEQUFZQSxDQUFDSyxJQUFJLENBQUM7d0JBQ3ZCSyxTQUFTO3dCQUNUd0I7b0JBQ0Y7Z0JBQ0Y7WUFFQSxLQUFLO2dCQUFvQjtvQkFDdkIsTUFBTSxFQUFFekIsbUJBQW1CMkIsY0FBYyxFQUFFVCxvQkFBb0JVLGVBQWUsRUFBRSxHQUFHLE1BQU0sK0lBQU87b0JBQ2hHLE1BQU1YLGFBQTZCbkIsS0FBS0MsTUFBTTtvQkFDOUMsTUFBTThCLGFBQWEvQixLQUFLK0IsVUFBVTtvQkFDbENGLGVBQWVWO29CQUNmLE1BQU1hLGVBQWVGO29CQUNyQixNQUFNRyxlQUFlLE1BQU1ELGFBQWFFLHVCQUF1QixDQUFDSDtvQkFFaEUsT0FBT3RDLHFEQUFZQSxDQUFDSyxJQUFJLENBQUM7d0JBQ3ZCSyxTQUFTO3dCQUNUOEI7b0JBQ0Y7Z0JBQ0Y7WUFFQTtnQkFDRSxPQUFPeEMscURBQVlBLENBQUNLLElBQUksQ0FBQztvQkFBRXFDLE9BQU87Z0JBQWlCLEdBQUc7b0JBQUU3QixRQUFRO2dCQUFJO1FBQ3hFO0lBQ0YsRUFBRSxPQUFPNkIsT0FBWTtRQUNuQkMsUUFBUUQsS0FBSyxDQUFDLGtDQUFrQ0E7UUFDaEQsT0FBTzFDLHFEQUFZQSxDQUFDSyxJQUFJLENBQUM7WUFBRXFDLE9BQU9BLE1BQU0vQixPQUFPO1FBQUMsR0FBRztZQUFFRSxRQUFRO1FBQUk7SUFDbkU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8uL2FwcC9hcGkvcGF5cm9sbC9iYW1ib29oci9yb3V0ZS50cz8wOWE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XHJcbmltcG9ydCB7IHBheXJvbGxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL3BheXJvbGwnO1xyXG5pbXBvcnQgeyBCYW1ib29IUkNvbmZpZyB9IGZyb20gJy4uLy4uLy4uLy4uL2xpYi90eXBlcyc7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XHJcbiAgICBjb25zdCB7IGFjdGlvbiwgZGF0YSB9ID0gYm9keTtcclxuXHJcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xyXG4gICAgICBjYXNlICdjb25maWd1cmUnOiB7XHJcbiAgICAgICAgY29uc3QgY29uZmlnOiBCYW1ib29IUkNvbmZpZyA9IGRhdGE7XHJcbiAgICAgICAgYXdhaXQgcGF5cm9sbFNlcnZpY2UuY29uZmlndXJlQmFtYm9vSFIoY29uZmlnKTtcclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBcclxuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxyXG4gICAgICAgICAgbWVzc2FnZTogYEJhbWJvb0hSIGNvbmZpZ3VyZWQgZm9yIHN1YmRvbWFpbjogJHtjb25maWcuc3ViZG9tYWlufWAgXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgJ2ltcG9ydC1kYXRhJzoge1xyXG4gICAgICAgIC8vIEF1dG8tY29uZmlndXJlIGZyb20gZW52IGlmIG5vdCBhbHJlYWR5IGNvbmZpZ3VyZWRcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3Qgc3RhdHVzID0gKHBheXJvbGxTZXJ2aWNlIGFzIGFueSkuYmFtYm9vaHJDb25maWc7XHJcbiAgICAgICAgICBpZiAoIXN0YXR1cyAmJiBwcm9jZXNzLmVudi5CQU1CT09IUl9TVUJET01BSU4gJiYgcHJvY2Vzcy5lbnYuQkFNQk9PSFJfQVBJX0tFWSkge1xyXG4gICAgICAgICAgICBhd2FpdCBwYXlyb2xsU2VydmljZS5jb25maWd1cmVCYW1ib29IUih7XHJcbiAgICAgICAgICAgICAgc3ViZG9tYWluOiBwcm9jZXNzLmVudi5CQU1CT09IUl9TVUJET01BSU4sXHJcbiAgICAgICAgICAgICAgYXBpS2V5OiBwcm9jZXNzLmVudi5CQU1CT09IUl9BUElfS0VZLFxyXG4gICAgICAgICAgICAgIHdlYmhvb2tTZWNyZXQ6IHByb2Nlc3MuZW52LkJBTUJPT0hSX1dFQkhPT0tfU0VDUkVUIHx8IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIHt9XHJcbiAgICAgICAgY29uc3QgaW1wb3J0UmVzdWx0ID0gYXdhaXQgcGF5cm9sbFNlcnZpY2UuaW1wb3J0U2FsYXJpZXNGcm9tQmFtYm9vSFIoKTtcclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBcclxuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxyXG4gICAgICAgICAgcmVzdWx0OiBpbXBvcnRSZXN1bHQgXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgJ3Rlc3QtY29ubmVjdGlvbic6IHtcclxuICAgICAgICAvLyBUZXN0IHRoZSBCYW1ib29IUiBjb25uZWN0aW9uIGJ5IHRyeWluZyB0byBnZXQgY29tcGFueSBpbmZvXHJcbiAgICAgICAgY29uc3QgeyBjb25maWd1cmVCYW1ib29IUiB9ID0gYXdhaXQgaW1wb3J0KCcuLi8uLi8uLi8uLi9saWIvYmFtYm9vaHInKTtcclxuICAgICAgICBjb25zdCB0ZXN0Q29uZmlnOiBCYW1ib29IUkNvbmZpZyA9IGRhdGEgfHwge1xyXG4gICAgICAgICAgc3ViZG9tYWluOiBwcm9jZXNzLmVudi5CQU1CT09IUl9TVUJET01BSU4gfHwgJycsXHJcbiAgICAgICAgICBhcGlLZXk6IHByb2Nlc3MuZW52LkJBTUJPT0hSX0FQSV9LRVkgfHwgJycsXHJcbiAgICAgICAgICB3ZWJob29rU2VjcmV0OiBwcm9jZXNzLmVudi5CQU1CT09IUl9XRUJIT09LX1NFQ1JFVCB8fCB1bmRlZmluZWRcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbmZpZ3VyZUJhbWJvb0hSKHRlc3RDb25maWcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHsgZ2V0QmFtYm9vSFJTZXJ2aWNlIH0gPSBhd2FpdCBpbXBvcnQoJy4uLy4uLy4uLy4uL2xpYi9iYW1ib29ocicpO1xyXG4gICAgICAgIGNvbnN0IHNlcnZpY2UgPSBnZXRCYW1ib29IUlNlcnZpY2UoKTtcclxuICAgICAgICBjb25zdCBjb21wYW55SW5mbyA9IGF3YWl0IHNlcnZpY2UuZ2V0Q29tcGFueUluZm8oKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBcclxuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxyXG4gICAgICAgICAgbWVzc2FnZTogJ0JhbWJvb0hSIGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bCcsXHJcbiAgICAgICAgICBjb21wYW55SW5mbyBcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY2FzZSAnZ2V0LWVtcGxveWVlcyc6IHtcclxuICAgICAgICBjb25zdCB7IGNvbmZpZ3VyZUJhbWJvb0hSOiBjb25maWd1cmVUZXN0LCBnZXRCYW1ib29IUlNlcnZpY2U6IGdldFRlc3RTZXJ2aWNlIH0gPSBhd2FpdCBpbXBvcnQoJy4uLy4uLy4uLy4uL2xpYi9iYW1ib29ocicpO1xyXG4gICAgICAgIGNvbnN0IHRlc3RDb25maWc6IEJhbWJvb0hSQ29uZmlnID0gZGF0YTtcclxuICAgICAgICBjb25maWd1cmVUZXN0KHRlc3RDb25maWcpO1xyXG4gICAgICAgIGNvbnN0IHRlc3RTZXJ2aWNlID0gZ2V0VGVzdFNlcnZpY2UoKTtcclxuICAgICAgICAvLyBIYW5kbGUgcGFnaW5hdGlvbiBpZiBCYW1ib29IUiByZXR1cm5zIHBhcnRpYWwgcmVzdWx0cyBvdmVyIHRpbWU7IHRoZSBkaXJlY3RvcnkgcmV0dXJucyBhbGwgYnkgZGVmYXVsdFxyXG4gICAgICAgIGNvbnN0IGVtcGxveWVlcyA9IGF3YWl0IHRlc3RTZXJ2aWNlLmdldEFsbEVtcGxveWVlcygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IFxyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSwgXHJcbiAgICAgICAgICBlbXBsb3llZXMgXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgJ2dldC1jb21wZW5zYXRpb24nOiB7XHJcbiAgICAgICAgY29uc3QgeyBjb25maWd1cmVCYW1ib29IUjogY29uZmlndXJlVGVzdDIsIGdldEJhbWJvb0hSU2VydmljZTogZ2V0VGVzdFNlcnZpY2UyIH0gPSBhd2FpdCBpbXBvcnQoJy4uLy4uLy4uLy4uL2xpYi9iYW1ib29ocicpO1xyXG4gICAgICAgIGNvbnN0IHRlc3RDb25maWc6IEJhbWJvb0hSQ29uZmlnID0gZGF0YS5jb25maWc7XHJcbiAgICAgICAgY29uc3QgZW1wbG95ZWVJZCA9IGRhdGEuZW1wbG95ZWVJZDtcclxuICAgICAgICBjb25maWd1cmVUZXN0Mih0ZXN0Q29uZmlnKTtcclxuICAgICAgICBjb25zdCB0ZXN0U2VydmljZTIgPSBnZXRUZXN0U2VydmljZTIoKTtcclxuICAgICAgICBjb25zdCBjb21wZW5zYXRpb24gPSBhd2FpdCB0ZXN0U2VydmljZTIuZ2V0RW1wbG95ZWVDb21wZW5zYXRpb24oZW1wbG95ZWVJZCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXHJcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLCBcclxuICAgICAgICAgIGNvbXBlbnNhdGlvbiBcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgYWN0aW9uJyB9LCB7IHN0YXR1czogNDAwIH0pO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIEJhbWJvb0hSIGludGVncmF0aW9uOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiBlcnJvci5tZXNzYWdlIH0sIHsgc3RhdHVzOiA1MDAgfSk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJwYXlyb2xsU2VydmljZSIsIlBPU1QiLCJyZXF1ZXN0IiwiYm9keSIsImpzb24iLCJhY3Rpb24iLCJkYXRhIiwiY29uZmlnIiwiY29uZmlndXJlQmFtYm9vSFIiLCJzdWNjZXNzIiwibWVzc2FnZSIsInN1YmRvbWFpbiIsInN0YXR1cyIsImJhbWJvb2hyQ29uZmlnIiwicHJvY2VzcyIsImVudiIsIkJBTUJPT0hSX1NVQkRPTUFJTiIsIkJBTUJPT0hSX0FQSV9LRVkiLCJhcGlLZXkiLCJ3ZWJob29rU2VjcmV0IiwiQkFNQk9PSFJfV0VCSE9PS19TRUNSRVQiLCJ1bmRlZmluZWQiLCJpbXBvcnRSZXN1bHQiLCJpbXBvcnRTYWxhcmllc0Zyb21CYW1ib29IUiIsInJlc3VsdCIsInRlc3RDb25maWciLCJnZXRCYW1ib29IUlNlcnZpY2UiLCJzZXJ2aWNlIiwiY29tcGFueUluZm8iLCJnZXRDb21wYW55SW5mbyIsImNvbmZpZ3VyZVRlc3QiLCJnZXRUZXN0U2VydmljZSIsInRlc3RTZXJ2aWNlIiwiZW1wbG95ZWVzIiwiZ2V0QWxsRW1wbG95ZWVzIiwiY29uZmlndXJlVGVzdDIiLCJnZXRUZXN0U2VydmljZTIiLCJlbXBsb3llZUlkIiwidGVzdFNlcnZpY2UyIiwiY29tcGVuc2F0aW9uIiwiZ2V0RW1wbG95ZWVDb21wZW5zYXRpb24iLCJlcnJvciIsImNvbnNvbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/payroll/bamboohr/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/bamboohr.ts":
/*!*************************!*\
  !*** ./lib/bamboohr.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BambooHRService: () => (/* binding */ BambooHRService),\n/* harmony export */   bamboohrService: () => (/* binding */ bamboohrService),\n/* harmony export */   configureBambooHR: () => (/* binding */ configureBambooHR),\n/* harmony export */   getBambooHRService: () => (/* binding */ getBambooHRService),\n/* harmony export */   importBambooHRData: () => (/* binding */ importBambooHRData),\n/* harmony export */   importBambooHREmployees: () => (/* binding */ importBambooHREmployees),\n/* harmony export */   importBambooHRSalaries: () => (/* binding */ importBambooHRSalaries)\n/* harmony export */ });\nclass BambooHRService {\n    constructor(config){\n        this.config = config;\n        // Use versioned BambooHR API base\n        this.baseUrl = `https://api.bamboohr.com/api/gateway.php/${this.config.subdomain}/v1`;\n    }\n    async makeRequest(endpoint, options = {}) {\n        const url = `${this.baseUrl}${endpoint}`;\n        const basic = Buffer.from(`${this.config.apiKey}:x`).toString(\"base64\");\n        const headers = {\n            \"Authorization\": `Basic ${basic}`,\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            ...options.headers\n        };\n        console.log(`🔄 BambooHR API call to: ${endpoint}`);\n        console.log(`📡 URL: ${url}`);\n        try {\n            const response = await fetch(url, {\n                ...options,\n                headers\n            });\n            if (!response.ok) {\n                const body = await response.text().catch(()=>\"\");\n                throw new Error(`BambooHR API error: ${response.status} ${response.statusText} ${body ? `- ${body}` : \"\"}`);\n            }\n            // Always expect JSON response\n            const jsonResponse = await response.json();\n            console.log(`✅ JSON response parsed successfully from ${endpoint}`);\n            console.log(`📊 Response structure:`, Object.keys(jsonResponse));\n            return jsonResponse;\n        } catch (error) {\n            console.error(\"BambooHR API request failed:\", error);\n            throw error;\n        }\n    }\n    // Employee Management - Updated to use JSON and fetch compensation\n    async getAllEmployees() {\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting BambooHR employee fetch...\");\n            const endpoint = \"/employees/directory\";\n            const response = await this.makeRequest(endpoint);\n            console.log(`📊 Raw response data:`, JSON.stringify(response, null, 2));\n            let employees = [];\n            if (response.employees && Array.isArray(response.employees)) {\n                employees = response.employees;\n                console.log(`✅ Found ${employees.length} employees in JSON response`);\n                // Log sample employee data for debugging\n                if (employees.length > 0) {\n                    console.log(`📋 Sample employee data:`, {\n                        id: employees[0].id,\n                        firstName: employees[0].firstName,\n                        lastName: employees[0].lastName,\n                        preferredName: employees[0].preferredName,\n                        email: employees[0].email,\n                        jobTitle: employees[0].jobTitle,\n                        department: employees[0].department\n                    });\n                }\n            } else {\n                console.log(`📄 No employee data found in response format:`, Object.keys(response));\n                console.log(`🔍 Full response structure:`, JSON.stringify(response, null, 2));\n            }\n            if (employees.length === 0) {\n                console.log(\"⚠️ No employees found in BambooHR - verify data exists and API permissions\");\n            } else {\n                console.log(`✅ Successfully parsed ${employees.length} employees from BambooHR`);\n            }\n            return employees;\n        } catch (error) {\n            console.error(\"❌ Error fetching employees from BambooHR:\", error);\n            throw error;\n        }\n    }\n    async getEmployee(employeeId) {\n        const response = await this.makeRequest(`/employees/${employeeId}`);\n        return response.employee;\n    }\n    async getEmployeeDirectory() {\n        return await this.getAllEmployees();\n    }\n    // Compensation Management - Updated to use fields endpoint\n    async getEmployeeCompensation(employeeId) {\n        try {\n            console.log(`💰 Fetching compensation for employee ${employeeId}...`);\n            // Use the fields endpoint for compensation data\n            const endpoint = `/employees/${employeeId}?fields=payRate,payType,payPeriod,payPer,payCurrency`;\n            const response = await this.makeRequest(endpoint);\n            console.log(`📊 Compensation response for employee ${employeeId}:`, JSON.stringify(response, null, 2));\n            if (response.employee) {\n                const emp = response.employee;\n                const compensations = [];\n                // Map compensation fields to BamboohrCompensation\n                if (emp.payRate && emp.payType) {\n                    let annualSalary = 0;\n                    let hourlyRate = 0;\n                    if (emp.payType === \"salary\") {\n                        annualSalary = parseFloat(emp.payRate) || 0;\n                        // Calculate hourly rate based on pay period\n                        hourlyRate = this.calculateHourlyRate(annualSalary, emp.payPeriod || \"monthly\");\n                    } else if (emp.payType === \"hourly\") {\n                        hourlyRate = parseFloat(emp.payRate) || 0;\n                        // Calculate annual salary based on pay period\n                        annualSalary = this.calculateAnnualSalary(hourlyRate, emp.payPeriod || \"monthly\");\n                    }\n                    const compensation = {\n                        employeeId: employeeId,\n                        effectiveDate: new Date().toISOString().split(\"T\")[0],\n                        endDate: undefined,\n                        annualSalary: annualSalary,\n                        hourlyRate: hourlyRate,\n                        currency: emp.payCurrency || \"USD\",\n                        payType: emp.payType,\n                        paySchedule: emp.payPeriod || \"monthly\"\n                    };\n                    compensations.push(compensation);\n                    console.log(`✅ Mapped compensation for employee ${employeeId}:`, {\n                        payType: compensation.payType,\n                        annualSalary: compensation.annualSalary,\n                        hourlyRate: compensation.hourlyRate,\n                        currency: compensation.currency,\n                        paySchedule: compensation.paySchedule\n                    });\n                } else {\n                    console.log(`⚠️ No compensation data found for employee ${employeeId}`);\n                }\n                return compensations;\n            }\n            console.log(`⚠️ No employee data found for employee ${employeeId}`);\n            return [];\n        } catch (error) {\n            console.error(`❌ Error fetching compensation for employee ${employeeId}:`, error);\n            return [];\n        }\n    }\n    async getCompensationHistory(employeeId, startDate, endDate) {\n        // For now, return current compensation as historical data\n        // In the future, this could be enhanced to fetch from compensation tables\n        return await this.getEmployeeCompensation(employeeId);\n    }\n    // Time Off Management\n    async getEmployeeTimeOff(employeeId) {\n        const response = await this.makeRequest(`/employees/${employeeId}/timeoff`);\n        return response.timeOff || [];\n    }\n    async getAllTimeOff(startDate, endDate) {\n        let endpoint = \"/timeoff\";\n        const params = new URLSearchParams();\n        if (startDate) params.append(\"startDate\", startDate);\n        if (endDate) params.append(\"endDate\", endDate);\n        if (params.toString()) {\n            endpoint += `?${params.toString()}`;\n        }\n        const response = await this.makeRequest(endpoint);\n        return response.timeOff || [];\n    }\n    // Reports\n    async getCustomReport(reportId) {\n        const response = await this.makeRequest(`/reports/${reportId}`);\n        return response.report;\n    }\n    async createCustomReport(reportData) {\n        const response = await this.makeRequest(\"/reports\", {\n            method: \"POST\",\n            body: JSON.stringify(reportData)\n        });\n        return response.report;\n    }\n    // Company Information\n    async getCompanyInfo() {\n        const response = await this.makeRequest(\"/company\");\n        return response.company;\n    }\n    // Webhook Management\n    async createWebhook(webhookData) {\n        const response = await this.makeRequest(\"/webhooks\", {\n            method: \"POST\",\n            body: JSON.stringify(webhookData)\n        });\n        return response.webhook;\n    }\n    async getWebhooks() {\n        const response = await this.makeRequest(\"/webhooks\");\n        return response.webhooks || [];\n    }\n    async deleteWebhook(webhookId) {\n        await this.makeRequest(`/webhooks/${webhookId}`, {\n            method: \"DELETE\"\n        });\n    }\n    // Utility Methods\n    calculateHourlyRate(annualSalary, paySchedule) {\n        let hoursPerYear;\n        switch(paySchedule){\n            case \"weekly\":\n                hoursPerYear = 52 * 40; // 40 hours per week\n                break;\n            case \"bi-weekly\":\n                hoursPerYear = 26 * 80; // 80 hours per 2 weeks\n                break;\n            case \"semi-monthly\":\n                hoursPerYear = 24 * 86.67; // 86.67 hours per pay period\n                break;\n            case \"monthly\":\n                hoursPerYear = 12 * 173.33; // 173.33 hours per month\n                break;\n            default:\n                hoursPerYear = 2080; // Standard 40-hour work week\n        }\n        return annualSalary / hoursPerYear;\n    }\n    calculateAnnualSalary(hourlyRate, paySchedule) {\n        let hoursPerYear;\n        switch(paySchedule){\n            case \"weekly\":\n                hoursPerYear = 52 * 40; // 40 hours per week\n                break;\n            case \"bi-weekly\":\n                hoursPerYear = 26 * 80; // 80 hours per 2 weeks\n                break;\n            case \"semi-monthly\":\n                hoursPerYear = 24 * 86.67; // 86.67 hours per pay period\n                break;\n            case \"monthly\":\n                hoursPerYear = 12 * 173.33; // 173.33 hours per month\n                break;\n            default:\n                hoursPerYear = 2080; // Standard 40-hour work week\n        }\n        return hourlyRate * hoursPerYear;\n    }\n    // Data Import Methods - Enhanced with JSON parsing and compensation fetching\n    async importEmployees() {\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting employee import from BambooHR...\");\n            const bamboohrEmployees = await this.getAllEmployees();\n            if (bamboohrEmployees.length === 0) {\n                console.log(\"⚠️ No employees found in BambooHR - verify data exists and API permissions\");\n                return [];\n            }\n            console.log(`👥 BambooHR import: preparing to upsert ${bamboohrEmployees.length} employees`);\n            const employees = [];\n            let successCount = 0;\n            let errorCount = 0;\n            for (const emp of bamboohrEmployees){\n                try {\n                    const employee = {\n                        id: emp.id,\n                        name: emp.preferredName || emp.displayName || `${emp.firstName} ${emp.lastName}`,\n                        email: emp.email,\n                        status: emp.status === \"active\" ? \"active\" : \"inactive\",\n                        department: emp.department,\n                        position: emp.jobTitle,\n                        hireDate: emp.hireDate,\n                        terminationDate: emp.terminationDate\n                    };\n                    employees.push(employee);\n                    successCount++;\n                    // Log successful employee mapping\n                    console.log(`✅ Employee mapped: ${employee.name} (${emp.id}) - ${emp.department}`);\n                } catch (error) {\n                    errorCount++;\n                    console.error(`❌ Error mapping employee ${emp.id}:`, error);\n                }\n            }\n            console.log(`📊 Employee import results: ${successCount} successful, ${errorCount} errors`);\n            return employees;\n        } catch (error) {\n            console.error(\"❌ Employee import failed:\", error);\n            throw error;\n        }\n    }\n    async importSalaries() {\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting salary import from BambooHR...\");\n            const employees = await this.getAllEmployees();\n            if (employees.length === 0) {\n                console.log(\"⚠️ No employees found in BambooHR - verify data exists and API permissions\");\n                return [];\n            }\n            console.log(`💰 BambooHR import: fetching compensation for ${employees.length} employees`);\n            const salaries = [];\n            let successCount = 0;\n            let errorCount = 0;\n            let totalCompensationRecords = 0;\n            for (const employee of employees){\n                try {\n                    const compensations = await this.getEmployeeCompensation(employee.id);\n                    totalCompensationRecords += compensations.length;\n                    for (const comp of compensations){\n                        try {\n                            // Log the upsert intent; actual DB upsert occurs in saveEmployeeSalary\n                            console.log(`💰 Salary record: employeeId=${comp.employeeId} effectiveDate=${comp.effectiveDate} annualSalary=${comp.annualSalary} hourlyRate=${comp.hourlyRate}`);\n                            const salary = {\n                                employeeId: comp.employeeId,\n                                effectiveDate: comp.effectiveDate,\n                                endDate: comp.endDate,\n                                annualSalary: comp.annualSalary,\n                                hourlyRate: comp.hourlyRate,\n                                currency: comp.currency,\n                                notes: `Imported from BambooHR - ${comp.payType} (${comp.paySchedule})`\n                            };\n                            salaries.push(salary);\n                            successCount++;\n                        } catch (error) {\n                            errorCount++;\n                            console.error(`❌ Error processing compensation for employee ${comp.employeeId}:`, error);\n                        }\n                    }\n                } catch (error) {\n                    errorCount++;\n                    console.error(`❌ Error fetching compensation for employee ${employee.id}:`, error);\n                }\n            }\n            console.log(`📊 Salary import results: ${successCount} successful, ${errorCount} errors, ${totalCompensationRecords} total compensation records`);\n            return salaries;\n        } catch (error) {\n            console.error(\"❌ Salary import failed:\", error);\n            throw error;\n        }\n    }\n    async importAllData() {\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting comprehensive BambooHR data import...\");\n            const [employees, salaries] = await Promise.all([\n                this.importEmployees(),\n                this.importSalaries()\n            ]);\n            const result = {\n                source: \"bamboohr\",\n                importDate: new Date().toISOString(),\n                recordsImported: employees.length + salaries.length,\n                errors: []\n            };\n            console.log(`✅ Comprehensive import completed: ${employees.length} employees, ${salaries.length} salaries`);\n            return result;\n        } catch (error) {\n            console.error(\"❌ Comprehensive import failed:\", error);\n            return {\n                source: \"bamboohr\",\n                importDate: new Date().toISOString(),\n                recordsImported: 0,\n                errors: [\n                    error.message\n                ]\n            };\n        }\n    }\n    // Helper Methods\n    async searchEmployees(query) {\n        const employees = await this.getAllEmployees();\n        return employees.filter((emp)=>(emp.preferredName || emp.displayName || `${emp.firstName} ${emp.lastName}`).toLowerCase().includes(query.toLowerCase()) || emp.email.toLowerCase().includes(query.toLowerCase()));\n    }\n    async getEmployeesByDepartment(department) {\n        const employees = await this.getAllEmployees();\n        return employees.filter((emp)=>emp.department === department);\n    }\n    async getActiveEmployees() {\n        const employees = await this.getAllEmployees();\n        return employees.filter((emp)=>emp.status === \"active\");\n    }\n}\nlet bamboohrService = null;\nconst configureBambooHR = (config)=>{\n    bamboohrService = new BambooHRService(config);\n    console.log(`BambooHR service configured for subdomain: ${config.subdomain}`);\n};\nconst getBambooHRService = ()=>{\n    if (!bamboohrService) {\n        throw new Error(\"BambooHR service not configured. Call configureBambooHR first.\");\n    }\n    return bamboohrService;\n};\nconst importBambooHREmployees = async ()=>{\n    const service = getBambooHRService();\n    return await service.importEmployees();\n};\nconst importBambooHRSalaries = async ()=>{\n    const service = getBambooHRService();\n    return await service.importSalaries();\n};\nconst importBambooHRData = async ()=>{\n    try {\n        const service = getBambooHRService();\n        console.log(\"\\uD83D\\uDD04 Starting BambooHR data import...\");\n        // Get employee count before import\n        const employees = await service.getAllEmployees();\n        console.log(`👥 BambooHR employee count: ${employees.length}`);\n        if (employees.length === 0) {\n            console.log(\"⚠️ No employees found in BambooHR - verify data exists and API permissions\");\n            return {\n                source: \"bamboohr\",\n                importDate: new Date().toISOString(),\n                recordsImported: 0,\n                errors: [\n                    \"No employees found in BambooHR - verify data exists and API permissions\"\n                ]\n            };\n        }\n        // Log employee details for debugging\n        console.log(\"\\uD83D\\uDCCB Sample employee data:\", {\n            firstEmployee: {\n                id: employees[0].id,\n                name: employees[0].preferredName || employees[0].displayName || `${employees[0].firstName} ${employees[0].lastName}`,\n                email: employees[0].email,\n                department: employees[0].department,\n                status: employees[0].status\n            }\n        });\n        const result = await service.importAllData();\n        // Log import results with detailed breakdown\n        console.log(\"✅ BambooHR import completed:\", {\n            source: result.source,\n            importDate: result.importDate,\n            recordsImported: result.recordsImported,\n            errorCount: result.errors?.length || 0,\n            employeeCount: employees.length,\n            successRate: employees.length > 0 ? (result.recordsImported / employees.length * 100).toFixed(2) + \"%\" : \"N/A\"\n        });\n        if (result.errors && result.errors.length > 0) {\n            console.warn(\"⚠️ BambooHR import had errors:\", result.errors);\n            console.warn(\"\\uD83D\\uDCCA Error breakdown:\", {\n                totalErrors: result.errors.length,\n                errorTypes: result.errors.map((err)=>err.includes(\"rate limit\") ? \"rate_limit\" : \"other\")\n            });\n        }\n        return result;\n    } catch (error) {\n        console.error(\"❌ BambooHR import failed:\", error);\n        // Enhanced error logging\n        if (error instanceof Error) {\n            console.error(\"\\uD83D\\uDD0D Error details:\", {\n                message: error.message,\n                stack: error.stack,\n                name: error.name\n            });\n            // Check for specific error types\n            if (error.message.includes(\"rate limit\")) {\n                console.warn(\"⚠️ Rate limit detected - consider implementing backoff strategy\");\n            } else if (error.message.includes(\"authentication\")) {\n                console.warn(\"⚠️ Authentication error - check API key and subdomain\");\n            } else if (error.message.includes(\"timeout\")) {\n                console.warn(\"⚠️ Request timeout - consider increasing timeout values\");\n            }\n        }\n        throw error;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/bamboohr.ts\n");

/***/ }),

/***/ "(rsc)/./lib/database.ts":
/*!*************************!*\
  !*** ./lib/database.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDatabaseSchema: () => (/* binding */ createDatabaseSchema),\n/* harmony export */   ensureDatabaseSchema: () => (/* binding */ ensureDatabaseSchema),\n/* harmony export */   getAllEmployeeSalaries: () => (/* binding */ getAllEmployeeSalaries),\n/* harmony export */   getAllEmployeeTimeEntries: () => (/* binding */ getAllEmployeeTimeEntries),\n/* harmony export */   getAllEmployees: () => (/* binding */ getAllEmployees),\n/* harmony export */   getAllProjectMultipliers: () => (/* binding */ getAllProjectMultipliers),\n/* harmony export */   getBambooHRConfig: () => (/* binding */ getBambooHRConfig),\n/* harmony export */   prisma: () => (/* reexport safe */ _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   saveBambooHRConfig: () => (/* binding */ saveBambooHRConfig),\n/* harmony export */   saveEmployee: () => (/* binding */ saveEmployee),\n/* harmony export */   saveEmployeeSalary: () => (/* binding */ saveEmployeeSalary),\n/* harmony export */   saveEmployeeTimeEntry: () => (/* binding */ saveEmployeeTimeEntry),\n/* harmony export */   saveProjectMultiplier: () => (/* binding */ saveProjectMultiplier),\n/* harmony export */   testDatabaseConnection: () => (/* binding */ testDatabaseConnection)\n/* harmony export */ });\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\n\nasync function ensureDatabaseSchema() {\n    try {\n        // Check if tables already exist by trying to query them\n        await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projection.findFirst();\n        console.log(\"Database schema already exists\");\n        return true; // Tables exist\n    } catch (error) {\n        console.log(\"Tables do not exist, attempting to create schema...\");\n        // If it's a table doesn't exist error, we need to create the schema\n        if (error.code === \"P2021\" || error.message?.includes(\"does not exist\")) {\n            try {\n                // Try to create the schema by running a simple operation\n                // This will trigger Prisma to create the tables if using Prisma Accelerate\n                console.log(\"Attempting to create database schema...\");\n                // Try to create a test record to trigger table creation\n                await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projection.create({\n                    data: {\n                        projectId: \"__test__\",\n                        month: \"__test__\",\n                        value: 0\n                    }\n                });\n                // If successful, delete the test record\n                await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projection.deleteMany({\n                    where: {\n                        projectId: \"__test__\",\n                        month: \"__test__\"\n                    }\n                });\n                console.log(\"Database schema created successfully\");\n                return true;\n            } catch (createError) {\n                console.error(\"Failed to create database schema:\", createError);\n                return false;\n            }\n        }\n        console.log(\"Tables do not exist, but Prisma Accelerate will create them automatically\");\n        console.log(\"Note: With Prisma Accelerate, tables are created automatically when you first insert data\");\n        return false; // Tables don't exist yet\n    }\n}\nasync function createDatabaseSchema() {\n    try {\n        console.log(\"Creating database schema...\");\n        // This will create all tables defined in the schema\n        // We'll use a more direct approach by trying to create the schema\n        const result = await ensureDatabaseSchema();\n        if (result) {\n            console.log(\"Database schema creation completed successfully\");\n            return true;\n        } else {\n            console.error(\"Database schema creation failed\");\n            return false;\n        }\n    } catch (error) {\n        console.error(\"Database schema creation failed:\", error);\n        return false;\n    }\n}\nasync function testDatabaseConnection() {\n    try {\n        // Test basic connection\n        await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].$connect();\n        console.log(\"Database connection successful\");\n        // Test a simple query\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].$queryRaw`SELECT 1 as test`;\n        console.log(\"Database query test successful:\", result);\n        return true;\n    } catch (error) {\n        console.error(\"Database connection test failed:\", error);\n        // Provide specific error guidance\n        if (error.message?.includes(\"ENOTFOUND\")) {\n            console.error(\"Network error: Check your DATABASE_URL and network connectivity\");\n        } else if (error.message?.includes(\"authentication failed\")) {\n            console.error(\"Authentication error: Check your database credentials\");\n        } else if (error.message?.includes(\"does not exist\")) {\n            console.error(\"Database does not exist: Check your database name in the connection URL\");\n        } else if (error.message?.includes(\"connection timeout\")) {\n            console.error(\"Connection timeout: Check your network and database server status\");\n        }\n        return false;\n    } finally{\n        await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].$disconnect();\n    }\n}\n// BambooHR Database Operations\nasync function saveBambooHRConfig(config) {\n    try {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bambooHRConfig.upsert({\n            where: {\n                subdomain: config.subdomain\n            },\n            update: {\n                apiKey: config.apiKey,\n                webhookSecret: config.webhookSecret,\n                isActive: true,\n                lastSync: new Date(),\n                updatedAt: new Date()\n            },\n            create: {\n                subdomain: config.subdomain,\n                apiKey: config.apiKey,\n                webhookSecret: config.webhookSecret,\n                isActive: true,\n                lastSync: new Date()\n            }\n        });\n        console.log(`BambooHR config saved for subdomain: ${config.subdomain}`);\n        return result;\n    } catch (error) {\n        console.error(\"Error saving BambooHR config:\", error);\n        throw error;\n    }\n}\nasync function getBambooHRConfig(subdomain) {\n    try {\n        return await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bambooHRConfig.findUnique({\n            where: {\n                subdomain\n            }\n        });\n    } catch (error) {\n        console.error(\"Error getting BambooHR config:\", error);\n        throw error;\n    }\n}\nasync function saveEmployee(employee) {\n    try {\n        console.log(`🔄 Attempting to upsert employee:`, JSON.stringify(employee, null, 2));\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employee.upsert({\n            where: {\n                id: employee.id\n            },\n            update: {\n                name: employee.name,\n                email: employee.email,\n                status: employee.status,\n                department: employee.department,\n                position: employee.position,\n                hireDate: employee.hireDate,\n                terminationDate: employee.terminationDate,\n                updatedAt: new Date()\n            },\n            create: {\n                id: employee.id,\n                name: employee.name,\n                email: employee.email,\n                status: employee.status,\n                department: employee.department,\n                position: employee.position,\n                hireDate: employee.hireDate,\n                terminationDate: employee.terminationDate\n            }\n        });\n        console.log(`✅ Employee saved: ${employee.name} (${employee.id})`);\n        return result;\n    } catch (error) {\n        console.error(\"❌ Error saving employee:\", error);\n        // Handle P2025 (record not found) error\n        if (error.code === \"P2025\") {\n            console.log(`🔄 Record not found, attempting to create employee: ${employee.name} (${employee.id})`);\n            try {\n                const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employee.create({\n                    data: {\n                        id: employee.id,\n                        name: employee.name,\n                        email: employee.email,\n                        status: employee.status,\n                        department: employee.department,\n                        position: employee.position,\n                        hireDate: employee.hireDate,\n                        terminationDate: employee.terminationDate\n                    }\n                });\n                console.log(`✅ Employee created: ${employee.name} (${employee.id})`);\n                return result;\n            } catch (createError) {\n                console.error(\"❌ Error creating employee:\", createError);\n                throw createError;\n            }\n        }\n        throw error;\n    }\n}\nasync function saveEmployeeSalary(salary) {\n    try {\n        console.log(`🔄 Attempting to upsert employee salary:`, JSON.stringify(salary, null, 2));\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employeeSalary.upsert({\n            where: {\n                employeeId_effectiveDate: {\n                    employeeId: salary.employeeId,\n                    effectiveDate: salary.effectiveDate\n                }\n            },\n            update: {\n                endDate: salary.endDate,\n                annualSalary: salary.annualSalary,\n                hourlyRate: salary.hourlyRate,\n                currency: salary.currency,\n                notes: salary.notes,\n                source: salary.source,\n                updatedAt: new Date()\n            },\n            create: {\n                employeeId: salary.employeeId,\n                effectiveDate: salary.effectiveDate,\n                endDate: salary.endDate,\n                annualSalary: salary.annualSalary,\n                hourlyRate: salary.hourlyRate,\n                currency: salary.currency || \"USD\",\n                notes: salary.notes,\n                source: salary.source || \"bamboohr\"\n            }\n        });\n        console.log(`✅ Employee salary saved for ${salary.employeeId} effective ${salary.effectiveDate}`);\n        return result;\n    } catch (error) {\n        console.error(\"❌ Error saving employee salary:\", error);\n        // Handle P2025 (record not found) error\n        if (error.code === \"P2025\") {\n            console.log(`🔄 Record not found, attempting to create employee salary for ${salary.employeeId} effective ${salary.effectiveDate}`);\n            try {\n                const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employeeSalary.create({\n                    data: {\n                        employeeId: salary.employeeId,\n                        effectiveDate: salary.effectiveDate,\n                        endDate: salary.endDate,\n                        annualSalary: salary.annualSalary,\n                        hourlyRate: salary.hourlyRate,\n                        currency: salary.currency || \"USD\",\n                        notes: salary.notes,\n                        source: salary.source || \"bamboohr\"\n                    }\n                });\n                console.log(`✅ Employee salary created for ${salary.employeeId} effective ${salary.effectiveDate}`);\n                return result;\n            } catch (createError) {\n                console.error(\"❌ Error creating employee salary:\", createError);\n                throw createError;\n            }\n        }\n        throw error;\n    }\n}\nasync function saveProjectMultiplier(multiplier) {\n    try {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projectMultiplier.upsert({\n            where: {\n                projectId_effectiveDate: {\n                    projectId: multiplier.projectId,\n                    effectiveDate: multiplier.effectiveDate\n                }\n            },\n            update: {\n                projectName: multiplier.projectName,\n                multiplier: multiplier.multiplier,\n                endDate: multiplier.endDate,\n                notes: multiplier.notes,\n                updatedAt: new Date()\n            },\n            create: {\n                projectId: multiplier.projectId,\n                projectName: multiplier.projectName,\n                multiplier: multiplier.multiplier,\n                effectiveDate: multiplier.effectiveDate,\n                endDate: multiplier.endDate,\n                notes: multiplier.notes\n            }\n        });\n        console.log(`Project multiplier saved for ${multiplier.projectName} effective ${multiplier.effectiveDate}`);\n        return result;\n    } catch (error) {\n        console.error(\"Error saving project multiplier:\", error);\n        throw error;\n    }\n}\nasync function saveEmployeeTimeEntry(timeEntry) {\n    try {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employeeTimeEntry.upsert({\n            where: {\n                employeeId_projectId_date: {\n                    employeeId: timeEntry.employeeId,\n                    projectId: timeEntry.projectId,\n                    date: timeEntry.date\n                }\n            },\n            update: {\n                employeeName: timeEntry.employeeName,\n                projectName: timeEntry.projectName,\n                hours: timeEntry.hours,\n                billableHours: timeEntry.billableHours,\n                nonBillableHours: timeEntry.nonBillableHours,\n                hourlyRate: timeEntry.hourlyRate,\n                projectMultiplier: timeEntry.projectMultiplier,\n                totalCost: timeEntry.totalCost,\n                billableValue: timeEntry.billableValue,\n                efficiency: timeEntry.efficiency,\n                description: timeEntry.description,\n                tags: timeEntry.tags,\n                updatedAt: new Date()\n            },\n            create: {\n                employeeId: timeEntry.employeeId,\n                employeeName: timeEntry.employeeName,\n                projectId: timeEntry.projectId,\n                projectName: timeEntry.projectName,\n                date: timeEntry.date,\n                hours: timeEntry.hours,\n                billableHours: timeEntry.billableHours,\n                nonBillableHours: timeEntry.nonBillableHours,\n                hourlyRate: timeEntry.hourlyRate,\n                projectMultiplier: timeEntry.projectMultiplier,\n                totalCost: timeEntry.totalCost,\n                billableValue: timeEntry.billableValue,\n                efficiency: timeEntry.efficiency,\n                description: timeEntry.description,\n                tags: timeEntry.tags\n            }\n        });\n        console.log(`Time entry saved for ${timeEntry.employeeName} on ${timeEntry.date}`);\n        return result;\n    } catch (error) {\n        console.error(\"Error saving time entry:\", error);\n        throw error;\n    }\n}\nasync function getAllEmployees() {\n    try {\n        return await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employee.findMany({\n            include: {\n                salaries: true\n            }\n        });\n    } catch (error) {\n        console.error(\"Error getting all employees:\", error);\n        throw error;\n    }\n}\nasync function getAllEmployeeSalaries() {\n    try {\n        return await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employeeSalary.findMany({\n            include: {\n                employee: true\n            }\n        });\n    } catch (error) {\n        console.error(\"Error getting all employee salaries:\", error);\n        throw error;\n    }\n}\nasync function getAllProjectMultipliers() {\n    try {\n        return await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projectMultiplier.findMany();\n    } catch (error) {\n        console.error(\"Error getting all project multipliers:\", error);\n        throw error;\n    }\n}\nasync function getAllEmployeeTimeEntries() {\n    try {\n        return await _db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].employeeTimeEntry.findMany({\n            include: {\n                employee: true\n            }\n        });\n    } catch (error) {\n        console.error(\"Error getting all time entries:\", error);\n        throw error;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPLE1BQU1qRiwyQ0FBTUEsQ0FBQ3VDLFFBQVEsQ0FBQzJDLFFBQVEsQ0FBQztZQUNwQ0MsU0FBUztnQkFDUEMsVUFBVTtZQUNaO1FBQ0Y7SUFDRixFQUFFLE9BQU85RSxPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQyxnQ0FBZ0NBO1FBQzlDLE1BQU1BO0lBQ1I7QUFDRjtBQUVPLGVBQWUrRTtJQUNwQixJQUFJO1FBQ0YsT0FBTyxNQUFNckYsMkNBQU1BLENBQUNvRCxjQUFjLENBQUM4QixRQUFRLENBQUM7WUFDMUNDLFNBQVM7Z0JBQ1A1QyxVQUFVO1lBQ1o7UUFDRjtJQUNGLEVBQUUsT0FBT2pDLE9BQU87UUFDZEYsUUFBUUUsS0FBSyxDQUFDLHdDQUF3Q0E7UUFDdEQsTUFBTUE7SUFDUjtBQUNGO0FBRU8sZUFBZWdGO0lBQ3BCLElBQUk7UUFDRixPQUFPLE1BQU10RiwyQ0FBTUEsQ0FBQ2dFLGlCQUFpQixDQUFDa0IsUUFBUTtJQUNoRCxFQUFFLE9BQU81RSxPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQywwQ0FBMENBO1FBQ3hELE1BQU1BO0lBQ1I7QUFDRjtBQUVPLGVBQWVpRjtJQUNwQixJQUFJO1FBQ0YsT0FBTyxNQUFNdkYsMkNBQU1BLENBQUNxRSxpQkFBaUIsQ0FBQ2EsUUFBUSxDQUFDO1lBQzdDQyxTQUFTO2dCQUNQNUMsVUFBVTtZQUNaO1FBQ0Y7SUFDRixFQUFFLE9BQU9qQyxPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQyxtQ0FBbUNBO1FBQ2pELE1BQU1BO0lBQ1I7QUFDRjtBQUVrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8uL2xpYi9kYXRhYmFzZS50cz80ZDQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwcmlzbWEgZnJvbSAnLi9kYic7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5zdXJlRGF0YWJhc2VTY2hlbWEoKSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIENoZWNrIGlmIHRhYmxlcyBhbHJlYWR5IGV4aXN0IGJ5IHRyeWluZyB0byBxdWVyeSB0aGVtXHJcbiAgICBhd2FpdCBwcmlzbWEucHJvamVjdGlvbi5maW5kRmlyc3QoKTtcclxuICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZSBzY2hlbWEgYWxyZWFkeSBleGlzdHMnKTtcclxuICAgIHJldHVybiB0cnVlOyAvLyBUYWJsZXMgZXhpc3RcclxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICBjb25zb2xlLmxvZygnVGFibGVzIGRvIG5vdCBleGlzdCwgYXR0ZW1wdGluZyB0byBjcmVhdGUgc2NoZW1hLi4uJyk7XHJcbiAgICBcclxuICAgIC8vIElmIGl0J3MgYSB0YWJsZSBkb2Vzbid0IGV4aXN0IGVycm9yLCB3ZSBuZWVkIHRvIGNyZWF0ZSB0aGUgc2NoZW1hXHJcbiAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ1AyMDIxJyB8fCBlcnJvci5tZXNzYWdlPy5pbmNsdWRlcygnZG9lcyBub3QgZXhpc3QnKSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIFRyeSB0byBjcmVhdGUgdGhlIHNjaGVtYSBieSBydW5uaW5nIGEgc2ltcGxlIG9wZXJhdGlvblxyXG4gICAgICAgIC8vIFRoaXMgd2lsbCB0cmlnZ2VyIFByaXNtYSB0byBjcmVhdGUgdGhlIHRhYmxlcyBpZiB1c2luZyBQcmlzbWEgQWNjZWxlcmF0ZVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdBdHRlbXB0aW5nIHRvIGNyZWF0ZSBkYXRhYmFzZSBzY2hlbWEuLi4nKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBUcnkgdG8gY3JlYXRlIGEgdGVzdCByZWNvcmQgdG8gdHJpZ2dlciB0YWJsZSBjcmVhdGlvblxyXG4gICAgICAgIGF3YWl0IHByaXNtYS5wcm9qZWN0aW9uLmNyZWF0ZSh7XHJcbiAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIHByb2plY3RJZDogJ19fdGVzdF9fJyxcclxuICAgICAgICAgICAgbW9udGg6ICdfX3Rlc3RfXycsXHJcbiAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gSWYgc3VjY2Vzc2Z1bCwgZGVsZXRlIHRoZSB0ZXN0IHJlY29yZFxyXG4gICAgICAgIGF3YWl0IHByaXNtYS5wcm9qZWN0aW9uLmRlbGV0ZU1hbnkoe1xyXG4gICAgICAgICAgd2hlcmU6IHtcclxuICAgICAgICAgICAgcHJvamVjdElkOiAnX190ZXN0X18nLFxyXG4gICAgICAgICAgICBtb250aDogJ19fdGVzdF9fJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZSBzY2hlbWEgY3JlYXRlZCBzdWNjZXNzZnVsbHknKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSBjYXRjaCAoY3JlYXRlRXJyb3I6IGFueSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgZGF0YWJhc2Ugc2NoZW1hOicsIGNyZWF0ZUVycm9yKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ1RhYmxlcyBkbyBub3QgZXhpc3QsIGJ1dCBQcmlzbWEgQWNjZWxlcmF0ZSB3aWxsIGNyZWF0ZSB0aGVtIGF1dG9tYXRpY2FsbHknKTtcclxuICAgIGNvbnNvbGUubG9nKCdOb3RlOiBXaXRoIFByaXNtYSBBY2NlbGVyYXRlLCB0YWJsZXMgYXJlIGNyZWF0ZWQgYXV0b21hdGljYWxseSB3aGVuIHlvdSBmaXJzdCBpbnNlcnQgZGF0YScpO1xyXG4gICAgcmV0dXJuIGZhbHNlOyAvLyBUYWJsZXMgZG9uJ3QgZXhpc3QgeWV0XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRGF0YWJhc2VTY2hlbWEoKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnNvbGUubG9nKCdDcmVhdGluZyBkYXRhYmFzZSBzY2hlbWEuLi4nKTtcclxuICAgIFxyXG4gICAgLy8gVGhpcyB3aWxsIGNyZWF0ZSBhbGwgdGFibGVzIGRlZmluZWQgaW4gdGhlIHNjaGVtYVxyXG4gICAgLy8gV2UnbGwgdXNlIGEgbW9yZSBkaXJlY3QgYXBwcm9hY2ggYnkgdHJ5aW5nIHRvIGNyZWF0ZSB0aGUgc2NoZW1hXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBlbnN1cmVEYXRhYmFzZVNjaGVtYSgpO1xyXG4gICAgXHJcbiAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZSBzY2hlbWEgY3JlYXRpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIHNjaGVtYSBjcmVhdGlvbiBmYWlsZWQnKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBzY2hlbWEgY3JlYXRpb24gZmFpbGVkOicsIGVycm9yKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXN0RGF0YWJhc2VDb25uZWN0aW9uKCkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBUZXN0IGJhc2ljIGNvbm5lY3Rpb25cclxuICAgIGF3YWl0IHByaXNtYS4kY29ubmVjdCgpO1xyXG4gICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bCcpO1xyXG4gICAgXHJcbiAgICAvLyBUZXN0IGEgc2ltcGxlIHF1ZXJ5XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEuJHF1ZXJ5UmF3YFNFTEVDVCAxIGFzIHRlc3RgO1xyXG4gICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIHF1ZXJ5IHRlc3Qgc3VjY2Vzc2Z1bDonLCByZXN1bHQpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBjb25uZWN0aW9uIHRlc3QgZmFpbGVkOicsIGVycm9yKTtcclxuICAgIFxyXG4gICAgLy8gUHJvdmlkZSBzcGVjaWZpYyBlcnJvciBndWlkYW5jZVxyXG4gICAgaWYgKGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKCdFTk9URk9VTkQnKSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdOZXR3b3JrIGVycm9yOiBDaGVjayB5b3VyIERBVEFCQVNFX1VSTCBhbmQgbmV0d29yayBjb25uZWN0aXZpdHknKTtcclxuICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ2F1dGhlbnRpY2F0aW9uIGZhaWxlZCcpKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0F1dGhlbnRpY2F0aW9uIGVycm9yOiBDaGVjayB5b3VyIGRhdGFiYXNlIGNyZWRlbnRpYWxzJyk7XHJcbiAgICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKCdkb2VzIG5vdCBleGlzdCcpKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGRvZXMgbm90IGV4aXN0OiBDaGVjayB5b3VyIGRhdGFiYXNlIG5hbWUgaW4gdGhlIGNvbm5lY3Rpb24gVVJMJyk7XHJcbiAgICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKCdjb25uZWN0aW9uIHRpbWVvdXQnKSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdDb25uZWN0aW9uIHRpbWVvdXQ6IENoZWNrIHlvdXIgbmV0d29yayBhbmQgZGF0YWJhc2Ugc2VydmVyIHN0YXR1cycpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSBmaW5hbGx5IHtcclxuICAgIGF3YWl0IHByaXNtYS4kZGlzY29ubmVjdCgpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQmFtYm9vSFIgRGF0YWJhc2UgT3BlcmF0aW9uc1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZUJhbWJvb0hSQ29uZmlnKGNvbmZpZzoge1xyXG4gIHN1YmRvbWFpbjogc3RyaW5nO1xyXG4gIGFwaUtleTogc3RyaW5nO1xyXG4gIHdlYmhvb2tTZWNyZXQ/OiBzdHJpbmc7XHJcbn0pIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLmJhbWJvb0hSQ29uZmlnLnVwc2VydCh7XHJcbiAgICAgIHdoZXJlOiB7IHN1YmRvbWFpbjogY29uZmlnLnN1YmRvbWFpbiB9LFxyXG4gICAgICB1cGRhdGU6IHtcclxuICAgICAgICBhcGlLZXk6IGNvbmZpZy5hcGlLZXksXHJcbiAgICAgICAgd2ViaG9va1NlY3JldDogY29uZmlnLndlYmhvb2tTZWNyZXQsXHJcbiAgICAgICAgaXNBY3RpdmU6IHRydWUsXHJcbiAgICAgICAgbGFzdFN5bmM6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXHJcbiAgICAgIH0sXHJcbiAgICAgIGNyZWF0ZToge1xyXG4gICAgICAgIHN1YmRvbWFpbjogY29uZmlnLnN1YmRvbWFpbixcclxuICAgICAgICBhcGlLZXk6IGNvbmZpZy5hcGlLZXksXHJcbiAgICAgICAgd2ViaG9va1NlY3JldDogY29uZmlnLndlYmhvb2tTZWNyZXQsXHJcbiAgICAgICAgaXNBY3RpdmU6IHRydWUsXHJcbiAgICAgICAgbGFzdFN5bmM6IG5ldyBEYXRlKClcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKGBCYW1ib29IUiBjb25maWcgc2F2ZWQgZm9yIHN1YmRvbWFpbjogJHtjb25maWcuc3ViZG9tYWlufWApO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIEJhbWJvb0hSIGNvbmZpZzonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRCYW1ib29IUkNvbmZpZyhzdWJkb21haW46IHN0cmluZykge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gYXdhaXQgcHJpc21hLmJhbWJvb0hSQ29uZmlnLmZpbmRVbmlxdWUoe1xyXG4gICAgICB3aGVyZTogeyBzdWJkb21haW4gfVxyXG4gICAgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgQmFtYm9vSFIgY29uZmlnOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVFbXBsb3llZShlbXBsb3llZToge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGVtYWlsOiBzdHJpbmc7XHJcbiAgc3RhdHVzOiBzdHJpbmc7XHJcbiAgZGVwYXJ0bWVudD86IHN0cmluZztcclxuICBwb3NpdGlvbj86IHN0cmluZztcclxuICBoaXJlRGF0ZTogc3RyaW5nO1xyXG4gIHRlcm1pbmF0aW9uRGF0ZT86IHN0cmluZztcclxufSkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zb2xlLmxvZyhg8J+UhCBBdHRlbXB0aW5nIHRvIHVwc2VydCBlbXBsb3llZTpgLCBKU09OLnN0cmluZ2lmeShlbXBsb3llZSwgbnVsbCwgMikpO1xyXG4gICAgXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEuZW1wbG95ZWUudXBzZXJ0KHtcclxuICAgICAgd2hlcmU6IHsgaWQ6IGVtcGxveWVlLmlkIH0sXHJcbiAgICAgIHVwZGF0ZToge1xyXG4gICAgICAgIG5hbWU6IGVtcGxveWVlLm5hbWUsXHJcbiAgICAgICAgZW1haWw6IGVtcGxveWVlLmVtYWlsLFxyXG4gICAgICAgIHN0YXR1czogZW1wbG95ZWUuc3RhdHVzLFxyXG4gICAgICAgIGRlcGFydG1lbnQ6IGVtcGxveWVlLmRlcGFydG1lbnQsXHJcbiAgICAgICAgcG9zaXRpb246IGVtcGxveWVlLnBvc2l0aW9uLFxyXG4gICAgICAgIGhpcmVEYXRlOiBlbXBsb3llZS5oaXJlRGF0ZSxcclxuICAgICAgICB0ZXJtaW5hdGlvbkRhdGU6IGVtcGxveWVlLnRlcm1pbmF0aW9uRGF0ZSxcclxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcclxuICAgICAgfSxcclxuICAgICAgY3JlYXRlOiB7XHJcbiAgICAgICAgaWQ6IGVtcGxveWVlLmlkLFxyXG4gICAgICAgIG5hbWU6IGVtcGxveWVlLm5hbWUsXHJcbiAgICAgICAgZW1haWw6IGVtcGxveWVlLmVtYWlsLFxyXG4gICAgICAgIHN0YXR1czogZW1wbG95ZWUuc3RhdHVzLFxyXG4gICAgICAgIGRlcGFydG1lbnQ6IGVtcGxveWVlLmRlcGFydG1lbnQsXHJcbiAgICAgICAgcG9zaXRpb246IGVtcGxveWVlLnBvc2l0aW9uLFxyXG4gICAgICAgIGhpcmVEYXRlOiBlbXBsb3llZS5oaXJlRGF0ZSxcclxuICAgICAgICB0ZXJtaW5hdGlvbkRhdGU6IGVtcGxveWVlLnRlcm1pbmF0aW9uRGF0ZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coYOKchSBFbXBsb3llZSBzYXZlZDogJHtlbXBsb3llZS5uYW1lfSAoJHtlbXBsb3llZS5pZH0pYCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBzYXZpbmcgZW1wbG95ZWU6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICAvLyBIYW5kbGUgUDIwMjUgKHJlY29yZCBub3QgZm91bmQpIGVycm9yXHJcbiAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ1AyMDI1Jykge1xyXG4gICAgICBjb25zb2xlLmxvZyhg8J+UhCBSZWNvcmQgbm90IGZvdW5kLCBhdHRlbXB0aW5nIHRvIGNyZWF0ZSBlbXBsb3llZTogJHtlbXBsb3llZS5uYW1lfSAoJHtlbXBsb3llZS5pZH0pYCk7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLmVtcGxveWVlLmNyZWF0ZSh7XHJcbiAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIGlkOiBlbXBsb3llZS5pZCxcclxuICAgICAgICAgICAgbmFtZTogZW1wbG95ZWUubmFtZSxcclxuICAgICAgICAgICAgZW1haWw6IGVtcGxveWVlLmVtYWlsLFxyXG4gICAgICAgICAgICBzdGF0dXM6IGVtcGxveWVlLnN0YXR1cyxcclxuICAgICAgICAgICAgZGVwYXJ0bWVudDogZW1wbG95ZWUuZGVwYXJ0bWVudCxcclxuICAgICAgICAgICAgcG9zaXRpb246IGVtcGxveWVlLnBvc2l0aW9uLFxyXG4gICAgICAgICAgICBoaXJlRGF0ZTogZW1wbG95ZWUuaGlyZURhdGUsXHJcbiAgICAgICAgICAgIHRlcm1pbmF0aW9uRGF0ZTogZW1wbG95ZWUudGVybWluYXRpb25EYXRlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYOKchSBFbXBsb3llZSBjcmVhdGVkOiAke2VtcGxveWVlLm5hbWV9ICgke2VtcGxveWVlLmlkfSlgKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9IGNhdGNoIChjcmVhdGVFcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBjcmVhdGluZyBlbXBsb3llZTonLCBjcmVhdGVFcnJvcik7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlRXJyb3I7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZUVtcGxveWVlU2FsYXJ5KHNhbGFyeToge1xyXG4gIGVtcGxveWVlSWQ6IHN0cmluZztcclxuICBlZmZlY3RpdmVEYXRlOiBzdHJpbmc7XHJcbiAgZW5kRGF0ZT86IHN0cmluZyB8IG51bGw7XHJcbiAgYW5udWFsU2FsYXJ5OiBudW1iZXI7XHJcbiAgaG91cmx5UmF0ZTogbnVtYmVyO1xyXG4gIGN1cnJlbmN5Pzogc3RyaW5nO1xyXG4gIG5vdGVzPzogc3RyaW5nO1xyXG4gIHNvdXJjZT86IHN0cmluZztcclxufSkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zb2xlLmxvZyhg8J+UhCBBdHRlbXB0aW5nIHRvIHVwc2VydCBlbXBsb3llZSBzYWxhcnk6YCwgSlNPTi5zdHJpbmdpZnkoc2FsYXJ5LCBudWxsLCAyKSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS5lbXBsb3llZVNhbGFyeS51cHNlcnQoe1xyXG4gICAgICB3aGVyZToge1xyXG4gICAgICAgIGVtcGxveWVlSWRfZWZmZWN0aXZlRGF0ZToge1xyXG4gICAgICAgICAgZW1wbG95ZWVJZDogc2FsYXJ5LmVtcGxveWVlSWQsXHJcbiAgICAgICAgICBlZmZlY3RpdmVEYXRlOiBzYWxhcnkuZWZmZWN0aXZlRGF0ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdXBkYXRlOiB7XHJcbiAgICAgICAgZW5kRGF0ZTogc2FsYXJ5LmVuZERhdGUsXHJcbiAgICAgICAgYW5udWFsU2FsYXJ5OiBzYWxhcnkuYW5udWFsU2FsYXJ5LFxyXG4gICAgICAgIGhvdXJseVJhdGU6IHNhbGFyeS5ob3VybHlSYXRlLFxyXG4gICAgICAgIGN1cnJlbmN5OiBzYWxhcnkuY3VycmVuY3ksXHJcbiAgICAgICAgbm90ZXM6IHNhbGFyeS5ub3RlcyxcclxuICAgICAgICBzb3VyY2U6IHNhbGFyeS5zb3VyY2UsXHJcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXHJcbiAgICAgIH0sXHJcbiAgICAgIGNyZWF0ZToge1xyXG4gICAgICAgIGVtcGxveWVlSWQ6IHNhbGFyeS5lbXBsb3llZUlkLFxyXG4gICAgICAgIGVmZmVjdGl2ZURhdGU6IHNhbGFyeS5lZmZlY3RpdmVEYXRlLFxyXG4gICAgICAgIGVuZERhdGU6IHNhbGFyeS5lbmREYXRlLFxyXG4gICAgICAgIGFubnVhbFNhbGFyeTogc2FsYXJ5LmFubnVhbFNhbGFyeSxcclxuICAgICAgICBob3VybHlSYXRlOiBzYWxhcnkuaG91cmx5UmF0ZSxcclxuICAgICAgICBjdXJyZW5jeTogc2FsYXJ5LmN1cnJlbmN5IHx8ICdVU0QnLFxyXG4gICAgICAgIG5vdGVzOiBzYWxhcnkubm90ZXMsXHJcbiAgICAgICAgc291cmNlOiBzYWxhcnkuc291cmNlIHx8ICdiYW1ib29ocidcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKGDinIUgRW1wbG95ZWUgc2FsYXJ5IHNhdmVkIGZvciAke3NhbGFyeS5lbXBsb3llZUlkfSBlZmZlY3RpdmUgJHtzYWxhcnkuZWZmZWN0aXZlRGF0ZX1gKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHNhdmluZyBlbXBsb3llZSBzYWxhcnk6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICAvLyBIYW5kbGUgUDIwMjUgKHJlY29yZCBub3QgZm91bmQpIGVycm9yXHJcbiAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ1AyMDI1Jykge1xyXG4gICAgICBjb25zb2xlLmxvZyhg8J+UhCBSZWNvcmQgbm90IGZvdW5kLCBhdHRlbXB0aW5nIHRvIGNyZWF0ZSBlbXBsb3llZSBzYWxhcnkgZm9yICR7c2FsYXJ5LmVtcGxveWVlSWR9IGVmZmVjdGl2ZSAke3NhbGFyeS5lZmZlY3RpdmVEYXRlfWApO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS5lbXBsb3llZVNhbGFyeS5jcmVhdGUoe1xyXG4gICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICBlbXBsb3llZUlkOiBzYWxhcnkuZW1wbG95ZWVJZCxcclxuICAgICAgICAgICAgZWZmZWN0aXZlRGF0ZTogc2FsYXJ5LmVmZmVjdGl2ZURhdGUsXHJcbiAgICAgICAgICAgIGVuZERhdGU6IHNhbGFyeS5lbmREYXRlLFxyXG4gICAgICAgICAgICBhbm51YWxTYWxhcnk6IHNhbGFyeS5hbm51YWxTYWxhcnksXHJcbiAgICAgICAgICAgIGhvdXJseVJhdGU6IHNhbGFyeS5ob3VybHlSYXRlLFxyXG4gICAgICAgICAgICBjdXJyZW5jeTogc2FsYXJ5LmN1cnJlbmN5IHx8ICdVU0QnLFxyXG4gICAgICAgICAgICBub3Rlczogc2FsYXJ5Lm5vdGVzLFxyXG4gICAgICAgICAgICBzb3VyY2U6IHNhbGFyeS5zb3VyY2UgfHwgJ2JhbWJvb2hyJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDinIUgRW1wbG95ZWUgc2FsYXJ5IGNyZWF0ZWQgZm9yICR7c2FsYXJ5LmVtcGxveWVlSWR9IGVmZmVjdGl2ZSAke3NhbGFyeS5lZmZlY3RpdmVEYXRlfWApO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH0gY2F0Y2ggKGNyZWF0ZUVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGNyZWF0aW5nIGVtcGxveWVlIHNhbGFyeTonLCBjcmVhdGVFcnJvcik7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlRXJyb3I7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZVByb2plY3RNdWx0aXBsaWVyKG11bHRpcGxpZXI6IHtcclxuICBwcm9qZWN0SWQ6IHN0cmluZztcclxuICBwcm9qZWN0TmFtZTogc3RyaW5nO1xyXG4gIG11bHRpcGxpZXI6IG51bWJlcjtcclxuICBlZmZlY3RpdmVEYXRlOiBzdHJpbmc7XHJcbiAgZW5kRGF0ZT86IHN0cmluZztcclxuICBub3Rlcz86IHN0cmluZztcclxufSkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEucHJvamVjdE11bHRpcGxpZXIudXBzZXJ0KHtcclxuICAgICAgd2hlcmU6IHtcclxuICAgICAgICBwcm9qZWN0SWRfZWZmZWN0aXZlRGF0ZToge1xyXG4gICAgICAgICAgcHJvamVjdElkOiBtdWx0aXBsaWVyLnByb2plY3RJZCxcclxuICAgICAgICAgIGVmZmVjdGl2ZURhdGU6IG11bHRpcGxpZXIuZWZmZWN0aXZlRGF0ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdXBkYXRlOiB7XHJcbiAgICAgICAgcHJvamVjdE5hbWU6IG11bHRpcGxpZXIucHJvamVjdE5hbWUsXHJcbiAgICAgICAgbXVsdGlwbGllcjogbXVsdGlwbGllci5tdWx0aXBsaWVyLFxyXG4gICAgICAgIGVuZERhdGU6IG11bHRpcGxpZXIuZW5kRGF0ZSxcclxuICAgICAgICBub3RlczogbXVsdGlwbGllci5ub3RlcyxcclxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcclxuICAgICAgfSxcclxuICAgICAgY3JlYXRlOiB7XHJcbiAgICAgICAgcHJvamVjdElkOiBtdWx0aXBsaWVyLnByb2plY3RJZCxcclxuICAgICAgICBwcm9qZWN0TmFtZTogbXVsdGlwbGllci5wcm9qZWN0TmFtZSxcclxuICAgICAgICBtdWx0aXBsaWVyOiBtdWx0aXBsaWVyLm11bHRpcGxpZXIsXHJcbiAgICAgICAgZWZmZWN0aXZlRGF0ZTogbXVsdGlwbGllci5lZmZlY3RpdmVEYXRlLFxyXG4gICAgICAgIGVuZERhdGU6IG11bHRpcGxpZXIuZW5kRGF0ZSxcclxuICAgICAgICBub3RlczogbXVsdGlwbGllci5ub3Rlc1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coYFByb2plY3QgbXVsdGlwbGllciBzYXZlZCBmb3IgJHttdWx0aXBsaWVyLnByb2plY3ROYW1lfSBlZmZlY3RpdmUgJHttdWx0aXBsaWVyLmVmZmVjdGl2ZURhdGV9YCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzYXZpbmcgcHJvamVjdCBtdWx0aXBsaWVyOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVFbXBsb3llZVRpbWVFbnRyeSh0aW1lRW50cnk6IHtcclxuICBlbXBsb3llZUlkOiBzdHJpbmc7XHJcbiAgZW1wbG95ZWVOYW1lOiBzdHJpbmc7XHJcbiAgcHJvamVjdElkOiBzdHJpbmc7XHJcbiAgcHJvamVjdE5hbWU6IHN0cmluZztcclxuICBkYXRlOiBzdHJpbmc7XHJcbiAgaG91cnM6IG51bWJlcjtcclxuICBiaWxsYWJsZUhvdXJzOiBudW1iZXI7XHJcbiAgbm9uQmlsbGFibGVIb3VyczogbnVtYmVyO1xyXG4gIGhvdXJseVJhdGU6IG51bWJlcjtcclxuICBwcm9qZWN0TXVsdGlwbGllcjogbnVtYmVyO1xyXG4gIHRvdGFsQ29zdDogbnVtYmVyO1xyXG4gIGJpbGxhYmxlVmFsdWU6IG51bWJlcjtcclxuICBlZmZpY2llbmN5OiBudW1iZXI7XHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgdGFnczogc3RyaW5nW107XHJcbn0pIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLmVtcGxveWVlVGltZUVudHJ5LnVwc2VydCh7XHJcbiAgICAgIHdoZXJlOiB7XHJcbiAgICAgICAgZW1wbG95ZWVJZF9wcm9qZWN0SWRfZGF0ZToge1xyXG4gICAgICAgICAgZW1wbG95ZWVJZDogdGltZUVudHJ5LmVtcGxveWVlSWQsXHJcbiAgICAgICAgICBwcm9qZWN0SWQ6IHRpbWVFbnRyeS5wcm9qZWN0SWQsXHJcbiAgICAgICAgICBkYXRlOiB0aW1lRW50cnkuZGF0ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdXBkYXRlOiB7XHJcbiAgICAgICAgZW1wbG95ZWVOYW1lOiB0aW1lRW50cnkuZW1wbG95ZWVOYW1lLFxyXG4gICAgICAgIHByb2plY3ROYW1lOiB0aW1lRW50cnkucHJvamVjdE5hbWUsXHJcbiAgICAgICAgaG91cnM6IHRpbWVFbnRyeS5ob3VycyxcclxuICAgICAgICBiaWxsYWJsZUhvdXJzOiB0aW1lRW50cnkuYmlsbGFibGVIb3VycyxcclxuICAgICAgICBub25CaWxsYWJsZUhvdXJzOiB0aW1lRW50cnkubm9uQmlsbGFibGVIb3VycyxcclxuICAgICAgICBob3VybHlSYXRlOiB0aW1lRW50cnkuaG91cmx5UmF0ZSxcclxuICAgICAgICBwcm9qZWN0TXVsdGlwbGllcjogdGltZUVudHJ5LnByb2plY3RNdWx0aXBsaWVyLFxyXG4gICAgICAgIHRvdGFsQ29zdDogdGltZUVudHJ5LnRvdGFsQ29zdCxcclxuICAgICAgICBiaWxsYWJsZVZhbHVlOiB0aW1lRW50cnkuYmlsbGFibGVWYWx1ZSxcclxuICAgICAgICBlZmZpY2llbmN5OiB0aW1lRW50cnkuZWZmaWNpZW5jeSxcclxuICAgICAgICBkZXNjcmlwdGlvbjogdGltZUVudHJ5LmRlc2NyaXB0aW9uLFxyXG4gICAgICAgIHRhZ3M6IHRpbWVFbnRyeS50YWdzLFxyXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxyXG4gICAgICB9LFxyXG4gICAgICBjcmVhdGU6IHtcclxuICAgICAgICBlbXBsb3llZUlkOiB0aW1lRW50cnkuZW1wbG95ZWVJZCxcclxuICAgICAgICBlbXBsb3llZU5hbWU6IHRpbWVFbnRyeS5lbXBsb3llZU5hbWUsXHJcbiAgICAgICAgcHJvamVjdElkOiB0aW1lRW50cnkucHJvamVjdElkLFxyXG4gICAgICAgIHByb2plY3ROYW1lOiB0aW1lRW50cnkucHJvamVjdE5hbWUsXHJcbiAgICAgICAgZGF0ZTogdGltZUVudHJ5LmRhdGUsXHJcbiAgICAgICAgaG91cnM6IHRpbWVFbnRyeS5ob3VycyxcclxuICAgICAgICBiaWxsYWJsZUhvdXJzOiB0aW1lRW50cnkuYmlsbGFibGVIb3VycyxcclxuICAgICAgICBub25CaWxsYWJsZUhvdXJzOiB0aW1lRW50cnkubm9uQmlsbGFibGVIb3VycyxcclxuICAgICAgICBob3VybHlSYXRlOiB0aW1lRW50cnkuaG91cmx5UmF0ZSxcclxuICAgICAgICBwcm9qZWN0TXVsdGlwbGllcjogdGltZUVudHJ5LnByb2plY3RNdWx0aXBsaWVyLFxyXG4gICAgICAgIHRvdGFsQ29zdDogdGltZUVudHJ5LnRvdGFsQ29zdCxcclxuICAgICAgICBiaWxsYWJsZVZhbHVlOiB0aW1lRW50cnkuYmlsbGFibGVWYWx1ZSxcclxuICAgICAgICBlZmZpY2llbmN5OiB0aW1lRW50cnkuZWZmaWNpZW5jeSxcclxuICAgICAgICBkZXNjcmlwdGlvbjogdGltZUVudHJ5LmRlc2NyaXB0aW9uLFxyXG4gICAgICAgIHRhZ3M6IHRpbWVFbnRyeS50YWdzXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhgVGltZSBlbnRyeSBzYXZlZCBmb3IgJHt0aW1lRW50cnkuZW1wbG95ZWVOYW1lfSBvbiAke3RpbWVFbnRyeS5kYXRlfWApO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIHRpbWUgZW50cnk6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsRW1wbG95ZWVzKCkge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gYXdhaXQgcHJpc21hLmVtcGxveWVlLmZpbmRNYW55KHtcclxuICAgICAgaW5jbHVkZToge1xyXG4gICAgICAgIHNhbGFyaWVzOiB0cnVlXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGFsbCBlbXBsb3llZXM6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsRW1wbG95ZWVTYWxhcmllcygpIHtcclxuICB0cnkge1xyXG4gICAgcmV0dXJuIGF3YWl0IHByaXNtYS5lbXBsb3llZVNhbGFyeS5maW5kTWFueSh7XHJcbiAgICAgIGluY2x1ZGU6IHtcclxuICAgICAgICBlbXBsb3llZTogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBhbGwgZW1wbG95ZWUgc2FsYXJpZXM6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsUHJvamVjdE11bHRpcGxpZXJzKCkge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gYXdhaXQgcHJpc21hLnByb2plY3RNdWx0aXBsaWVyLmZpbmRNYW55KCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgYWxsIHByb2plY3QgbXVsdGlwbGllcnM6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsRW1wbG95ZWVUaW1lRW50cmllcygpIHtcclxuICB0cnkge1xyXG4gICAgcmV0dXJuIGF3YWl0IHByaXNtYS5lbXBsb3llZVRpbWVFbnRyeS5maW5kTWFueSh7XHJcbiAgICAgIGluY2x1ZGU6IHtcclxuICAgICAgICBlbXBsb3llZTogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBhbGwgdGltZSBlbnRyaWVzOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgcHJpc21hIH07XHJcbiJdLCJuYW1lcyI6WyJwcmlzbWEiLCJlbnN1cmVEYXRhYmFzZVNjaGVtYSIsInByb2plY3Rpb24iLCJmaW5kRmlyc3QiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsImluY2x1ZGVzIiwiY3JlYXRlIiwiZGF0YSIsInByb2plY3RJZCIsIm1vbnRoIiwidmFsdWUiLCJkZWxldGVNYW55Iiwid2hlcmUiLCJjcmVhdGVFcnJvciIsImNyZWF0ZURhdGFiYXNlU2NoZW1hIiwicmVzdWx0IiwidGVzdERhdGFiYXNlQ29ubmVjdGlvbiIsIiRjb25uZWN0IiwiJHF1ZXJ5UmF3IiwiJGRpc2Nvbm5lY3QiLCJzYXZlQmFtYm9vSFJDb25maWciLCJjb25maWciLCJiYW1ib29IUkNvbmZpZyIsInVwc2VydCIsInN1YmRvbWFpbiIsInVwZGF0ZSIsImFwaUtleSIsIndlYmhvb2tTZWNyZXQiLCJpc0FjdGl2ZSIsImxhc3RTeW5jIiwiRGF0ZSIsInVwZGF0ZWRBdCIsImdldEJhbWJvb0hSQ29uZmlnIiwiZmluZFVuaXF1ZSIsInNhdmVFbXBsb3llZSIsImVtcGxveWVlIiwiSlNPTiIsInN0cmluZ2lmeSIsImlkIiwibmFtZSIsImVtYWlsIiwic3RhdHVzIiwiZGVwYXJ0bWVudCIsInBvc2l0aW9uIiwiaGlyZURhdGUiLCJ0ZXJtaW5hdGlvbkRhdGUiLCJzYXZlRW1wbG95ZWVTYWxhcnkiLCJzYWxhcnkiLCJlbXBsb3llZVNhbGFyeSIsImVtcGxveWVlSWRfZWZmZWN0aXZlRGF0ZSIsImVtcGxveWVlSWQiLCJlZmZlY3RpdmVEYXRlIiwiZW5kRGF0ZSIsImFubnVhbFNhbGFyeSIsImhvdXJseVJhdGUiLCJjdXJyZW5jeSIsIm5vdGVzIiwic291cmNlIiwic2F2ZVByb2plY3RNdWx0aXBsaWVyIiwibXVsdGlwbGllciIsInByb2plY3RNdWx0aXBsaWVyIiwicHJvamVjdElkX2VmZmVjdGl2ZURhdGUiLCJwcm9qZWN0TmFtZSIsInNhdmVFbXBsb3llZVRpbWVFbnRyeSIsInRpbWVFbnRyeSIsImVtcGxveWVlVGltZUVudHJ5IiwiZW1wbG95ZWVJZF9wcm9qZWN0SWRfZGF0ZSIsImRhdGUiLCJlbXBsb3llZU5hbWUiLCJob3VycyIsImJpbGxhYmxlSG91cnMiLCJub25CaWxsYWJsZUhvdXJzIiwidG90YWxDb3N0IiwiYmlsbGFibGVWYWx1ZSIsImVmZmljaWVuY3kiLCJkZXNjcmlwdGlvbiIsInRhZ3MiLCJnZXRBbGxFbXBsb3llZXMiLCJmaW5kTWFueSIsImluY2x1ZGUiLCJzYWxhcmllcyIsImdldEFsbEVtcGxveWVlU2FsYXJpZXMiLCJnZXRBbGxQcm9qZWN0TXVsdGlwbGllcnMiLCJnZXRBbGxFbXBsb3llZVRpbWVFbnRyaWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/database.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prismaClientSingleton = ()=>{\n    return new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n        log: [\n            \"error\"\n        ]\n    });\n};\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? prismaClientSingleton();\nif (true) globalForPrisma.prisma = prisma;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZGIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBRTlDLE1BQU1DLHdCQUF3QjtJQUM1QixPQUFPLElBQUlELHdEQUFZQSxDQUFDO1FBQ3RCRSxLQUFLO1lBQUM7U0FBUTtJQUNoQjtBQUNGO0FBSUEsTUFBTUMsa0JBQWtCQztBQUl4QixNQUFNQyxTQUFTRixnQkFBZ0JFLE1BQU0sSUFBSUo7QUFFekMsSUFBSUssSUFBeUIsRUFBY0gsZ0JBQWdCRSxNQUFNLEdBQUdBO0FBRXBFLGlFQUFlQSxNQUFNQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vem9oby1iaWxsaW5nLXBsYXRmb3JtLy4vbGliL2RiLnRzPzFkZjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xyXG5cclxuY29uc3QgcHJpc21hQ2xpZW50U2luZ2xldG9uID0gKCkgPT4ge1xyXG4gIHJldHVybiBuZXcgUHJpc21hQ2xpZW50KHtcclxuICAgIGxvZzogWydlcnJvciddLCAvLyBBZGQgZXJyb3IgbG9nZ2luZyBmb3IgZGVidWdnaW5nXHJcbiAgfSk7XHJcbn07XHJcblxyXG50eXBlIFByaXNtYUNsaWVudFNpbmdsZXRvbiA9IFJldHVyblR5cGU8dHlwZW9mIHByaXNtYUNsaWVudFNpbmdsZXRvbj47XHJcblxyXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xyXG4gIHByaXNtYTogUHJpc21hQ2xpZW50U2luZ2xldG9uIHwgdW5kZWZpbmVkO1xyXG59O1xyXG5cclxuY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBwcmlzbWFDbGllbnRTaW5nbGV0b24oKTtcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcHJpc21hO1xyXG4iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwicHJpc21hQ2xpZW50U2luZ2xldG9uIiwibG9nIiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsInByb2Nlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/payroll.ts":
/*!************************!*\
  !*** ./lib/payroll.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PayrollService: () => (/* binding */ PayrollService),\n/* harmony export */   addEmployee: () => (/* binding */ addEmployee),\n/* harmony export */   addProjectMultiplier: () => (/* binding */ addProjectMultiplier),\n/* harmony export */   addSalary: () => (/* binding */ addSalary),\n/* harmony export */   configureBambooHR: () => (/* binding */ configureBambooHR),\n/* harmony export */   generateEmployeeProfitabilityReport: () => (/* binding */ generateEmployeeProfitabilityReport),\n/* harmony export */   generateProjectProfitabilityReport: () => (/* binding */ generateProjectProfitabilityReport),\n/* harmony export */   importBambooHRData: () => (/* binding */ importBambooHRData),\n/* harmony export */   payrollService: () => (/* binding */ payrollService),\n/* harmony export */   processTimeEntries: () => (/* binding */ processTimeEntries)\n/* harmony export */ });\n/* harmony import */ var _bamboohr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bamboohr */ \"(rsc)/./lib/bamboohr.ts\");\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./database */ \"(rsc)/./lib/database.ts\");\n\n\nclass PayrollService {\n    constructor(){\n        this.employees = new Map();\n        this.salaries = new Map();\n        this.multipliers = new Map();\n        console.log(\"Payroll service initialized\");\n    }\n    mapDbEmployeeToDomain(dbEmployee) {\n        const statusValue = (dbEmployee.status || \"\").toLowerCase();\n        const status = statusValue === \"active\" ? \"active\" : \"inactive\";\n        const toIsoDateString = (d)=>{\n            if (!d) return undefined;\n            if (typeof d === \"string\") return d;\n            if (d instanceof Date) return d.toISOString();\n            try {\n                const asDate = new Date(d);\n                return isNaN(asDate.getTime()) ? undefined : asDate.toISOString();\n            } catch  {\n                return undefined;\n            }\n        };\n        return {\n            id: dbEmployee.id,\n            name: dbEmployee.name,\n            email: dbEmployee.email,\n            status,\n            department: dbEmployee.department ?? undefined,\n            position: dbEmployee.position ?? undefined,\n            hireDate: toIsoDateString(dbEmployee.hireDate) || \"\",\n            terminationDate: toIsoDateString(dbEmployee.terminationDate)\n        };\n    }\n    toNumber(value) {\n        if (typeof value === \"number\") return value;\n        // Prisma Decimal has toNumber(); fall back to parseFloat\n        const maybeDecimal = value;\n        if (maybeDecimal && typeof maybeDecimal.toNumber === \"function\") {\n            return maybeDecimal.toNumber();\n        }\n        const parsed = parseFloat(String(value));\n        return Number.isNaN(parsed) ? 0 : parsed;\n    }\n    mapDbSalariesToDomain(dbSalaries) {\n        return (dbSalaries || []).map((s)=>({\n                employeeId: s.employeeId,\n                effectiveDate: s.effectiveDate,\n                endDate: s.endDate ?? undefined,\n                annualSalary: this.toNumber(s.annualSalary),\n                hourlyRate: this.toNumber(s.hourlyRate),\n                currency: s.currency ?? undefined,\n                notes: s.notes ?? undefined\n            }));\n    }\n    mapDbMultipliersToDomain(dbMultipliers) {\n        return (dbMultipliers || []).map((m)=>({\n                projectId: m.projectId,\n                projectName: m.projectName,\n                multiplier: this.toNumber(m.multiplier),\n                effectiveDate: m.effectiveDate,\n                endDate: m.endDate ?? undefined,\n                notes: m.notes ?? undefined\n            }));\n    }\n    // Employee Management\n    async addEmployee(employee) {\n        // Save to database\n        await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveEmployee)(employee);\n        // Also keep in memory for backward compatibility\n        this.employees.set(employee.id, employee);\n        console.log(`Employee added: ${employee.name} (${employee.id})`);\n    }\n    async getEmployee(employeeId) {\n        // Try memory first, then database\n        let employee = this.employees.get(employeeId);\n        if (!employee) {\n            // Load from database\n            const dbEmployees = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllEmployees)();\n            const dbEmployee = dbEmployees.find((emp)=>emp.id === employeeId);\n            if (dbEmployee) {\n                const mapped = this.mapDbEmployeeToDomain(dbEmployee);\n                this.employees.set(employeeId, mapped);\n                employee = mapped;\n            }\n        }\n        return employee || null;\n    }\n    async getAllEmployees() {\n        // Load from database and sync memory\n        const dbEmployees = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllEmployees)();\n        // Update memory cache\n        const mapped = dbEmployees.map((emp)=>this.mapDbEmployeeToDomain(emp));\n        for (const emp of mapped){\n            this.employees.set(emp.id, emp);\n        }\n        return mapped;\n    }\n    async updateEmployee(employeeId, updates) {\n        const employee = this.employees.get(employeeId);\n        if (employee) {\n            const updatedEmployee = {\n                ...employee,\n                ...updates\n            };\n            // Save to database\n            await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveEmployee)(updatedEmployee);\n            // Update memory\n            this.employees.set(employeeId, updatedEmployee);\n            console.log(`Employee updated: ${employee.name}`);\n        }\n    }\n    // Salary Management\n    async addSalary(salary) {\n        // Save to database\n        await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveEmployeeSalary)(salary);\n        // Also keep in memory for backward compatibility\n        const employeeSalaries = this.salaries.get(salary.employeeId) || [];\n        // If this is a new current salary, end the previous one\n        if (!salary.endDate) {\n            const currentSalary = employeeSalaries.find((s)=>!s.endDate);\n            if (currentSalary) {\n                currentSalary.endDate = salary.effectiveDate;\n                // Update the previous salary in database\n                await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveEmployeeSalary)(currentSalary);\n            }\n        }\n        employeeSalaries.push(salary);\n        employeeSalaries.sort((a, b)=>new Date(a.effectiveDate).getTime() - new Date(b.effectiveDate).getTime());\n        this.salaries.set(salary.employeeId, employeeSalaries);\n        console.log(`Salary added for ${salary.employeeId} effective ${salary.effectiveDate}`);\n    }\n    async getEmployeeSalary(employeeId, date) {\n        // Try memory first, then database\n        let employeeSalaries = this.salaries.get(employeeId);\n        if (!employeeSalaries || employeeSalaries.length === 0) {\n            // Load from database\n            const dbSalaries = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllEmployeeSalaries)();\n            const employeeDbSalaries = dbSalaries.filter((s)=>s.employeeId === employeeId);\n            if (employeeDbSalaries.length > 0) {\n                const mapped = this.mapDbSalariesToDomain(employeeDbSalaries);\n                this.salaries.set(employeeId, mapped);\n                employeeSalaries = mapped;\n            }\n        }\n        if (!employeeSalaries) return null;\n        const targetDate = new Date(date);\n        return employeeSalaries.find((salary)=>{\n            const effectiveDate = new Date(salary.effectiveDate);\n            const endDate = salary.endDate ? new Date(salary.endDate) : new Date(\"9999-12-31\");\n            return targetDate >= effectiveDate && targetDate <= endDate;\n        }) || null;\n    }\n    async getEmployeeSalaryHistory(employeeId) {\n        // Try memory first, then database\n        let employeeSalaries = this.salaries.get(employeeId);\n        if (!employeeSalaries || employeeSalaries.length === 0) {\n            // Load from database\n            const dbSalaries = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllEmployeeSalaries)();\n            const employeeDbSalaries = dbSalaries.filter((s)=>s.employeeId === employeeId);\n            if (employeeDbSalaries.length > 0) {\n                const mapped = this.mapDbSalariesToDomain(employeeDbSalaries);\n                this.salaries.set(employeeId, mapped);\n                employeeSalaries = mapped;\n            }\n        }\n        return employeeSalaries || [];\n    }\n    // Project Multiplier Management\n    async addProjectMultiplier(multiplier) {\n        // Save to database\n        await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveProjectMultiplier)(multiplier);\n        // Also keep in memory for backward compatibility\n        const projectMultipliers = this.multipliers.get(multiplier.projectId) || [];\n        // If this is a new current multiplier, end the previous one\n        if (!multiplier.endDate) {\n            const currentMultiplier = projectMultipliers.find((m)=>!m.endDate);\n            if (currentMultiplier) {\n                currentMultiplier.endDate = multiplier.effectiveDate;\n                // Update the previous multiplier in database\n                await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveProjectMultiplier)(currentMultiplier);\n            }\n        }\n        projectMultipliers.push(multiplier);\n        projectMultipliers.sort((a, b)=>new Date(a.effectiveDate).getTime() - new Date(b.effectiveDate).getTime());\n        this.multipliers.set(multiplier.projectId, projectMultipliers);\n        console.log(`Multiplier added for project ${multiplier.projectName} effective ${multiplier.effectiveDate}`);\n    }\n    async getProjectMultiplier(projectId, date) {\n        // Try memory first, then database\n        let projectMultipliers = this.multipliers.get(projectId);\n        if (!projectMultipliers || projectMultipliers.length === 0) {\n            // Load from database\n            const dbMultipliers = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllProjectMultipliers)();\n            const projectDbMultipliers = dbMultipliers.filter((m)=>m.projectId === projectId);\n            if (projectDbMultipliers.length > 0) {\n                const mapped = this.mapDbMultipliersToDomain(projectDbMultipliers);\n                this.multipliers.set(projectId, mapped);\n                projectMultipliers = mapped;\n            }\n        }\n        if (!projectMultipliers) return null;\n        const targetDate = new Date(date);\n        return projectMultipliers.find((multiplier)=>{\n            const effectiveDate = new Date(multiplier.effectiveDate);\n            const endDate = multiplier.endDate ? new Date(multiplier.endDate) : new Date(\"9999-12-31\");\n            return targetDate >= effectiveDate && targetDate <= endDate;\n        }) || null;\n    }\n    async getProjectMultiplierHistory(projectId) {\n        // Try memory first, then database\n        let projectMultipliers = this.multipliers.get(projectId);\n        if (!projectMultipliers || projectMultipliers.length === 0) {\n            // Load from database\n            const dbMultipliers = await (0,_database__WEBPACK_IMPORTED_MODULE_1__.getAllProjectMultipliers)();\n            const projectDbMultipliers = dbMultipliers.filter((m)=>m.projectId === projectId);\n            if (projectDbMultipliers.length > 0) {\n                const mapped = this.mapDbMultipliersToDomain(projectDbMultipliers);\n                this.multipliers.set(projectId, mapped);\n                projectMultipliers = mapped;\n            }\n        }\n        return projectMultipliers || [];\n    }\n    // Time Entry Processing with Historical Rates\n    async processTimeEntries(clockifyEntries, clockifyUsers, projects) {\n        const employeeTimeEntries = [];\n        const userMap = new Map(clockifyUsers.map((user)=>[\n                user.id,\n                user\n            ]));\n        for (const entry of clockifyEntries){\n            const user = userMap.get(entry.userId);\n            if (!user) continue;\n            const entryDate = new Date(entry.timeInterval.start).toISOString().split(\"T\")[0];\n            const employee = await this.getEmployee(entry.userId);\n            if (!employee) continue;\n            const salary = await this.getEmployeeSalary(entry.userId, entryDate);\n            if (!salary) continue;\n            const project = projects.find((p)=>p.id === entry.projectId);\n            if (!project) continue;\n            const multiplier = await this.getProjectMultiplier(entry.projectId, entryDate);\n            const projectMultiplier = multiplier?.multiplier || 1.0;\n            const durationMs = this.parseDuration(entry.timeInterval.duration);\n            const hours = durationMs / (1000 * 60 * 60);\n            const billableHours = entry.billable ? hours : 0;\n            const nonBillableHours = entry.billable ? 0 : hours;\n            const totalCost = hours * salary.hourlyRate;\n            const billableValue = billableHours * salary.hourlyRate * projectMultiplier;\n            const efficiency = hours > 0 ? billableHours / hours : 0;\n            const timeEntry = {\n                employeeId: entry.userId,\n                employeeName: user.name,\n                projectId: entry.projectId,\n                projectName: project.name,\n                date: entryDate,\n                hours,\n                billableHours,\n                nonBillableHours,\n                hourlyRate: salary.hourlyRate,\n                projectMultiplier,\n                totalCost,\n                billableValue,\n                efficiency,\n                description: entry.description,\n                tags: entry.tags.map((tag)=>tag.name)\n            };\n            // Save to database\n            await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveEmployeeTimeEntry)(timeEntry);\n            employeeTimeEntries.push(timeEntry);\n        }\n        return employeeTimeEntries;\n    }\n    // Profitability Analysis\n    async generateProjectProfitabilityReport(projectId, startDate, endDate, employeeTimeEntries, revenue) {\n        const projectEntries = employeeTimeEntries.filter((entry)=>entry.projectId === projectId && entry.date >= startDate && entry.date <= endDate);\n        const totalHours = projectEntries.reduce((sum, entry)=>sum + entry.hours, 0);\n        const totalBillableHours = projectEntries.reduce((sum, entry)=>sum + entry.billableHours, 0);\n        const totalCost = projectEntries.reduce((sum, entry)=>sum + entry.totalCost, 0);\n        const totalBillableValue = projectEntries.reduce((sum, entry)=>sum + entry.billableValue, 0);\n        const grossProfit = revenue - totalCost;\n        const profitMargin = revenue > 0 ? grossProfit / revenue * 100 : 0;\n        const averageMultiplier = totalBillableHours > 0 ? totalBillableValue / (totalBillableHours * projectEntries[0]?.hourlyRate || 1) : 0;\n        // Employee breakdown\n        const employeeBreakdown = new Map();\n        for (const entry of projectEntries){\n            const existing = employeeBreakdown.get(entry.employeeId);\n            if (existing) {\n                existing.hours += entry.hours;\n                existing.cost += entry.totalCost;\n                existing.billableValue += entry.billableValue;\n                existing.efficiency = existing.hours > 0 ? existing.billableValue / (existing.hours * entry.hourlyRate) : 0;\n            } else {\n                employeeBreakdown.set(entry.employeeId, {\n                    employeeId: entry.employeeId,\n                    employeeName: entry.employeeName,\n                    hours: entry.hours,\n                    cost: entry.totalCost,\n                    billableValue: entry.billableValue,\n                    efficiency: entry.efficiency\n                });\n            }\n        }\n        // Monthly breakdown\n        const monthlyBreakdown = new Map();\n        for (const entry of projectEntries){\n            const month = entry.date.substring(0, 7); // YYYY-MM\n            const existing = monthlyBreakdown.get(month);\n            if (existing) {\n                existing.hours += entry.hours;\n                existing.cost += entry.totalCost;\n            } else {\n                monthlyBreakdown.set(month, {\n                    month,\n                    hours: entry.hours,\n                    cost: entry.totalCost,\n                    revenue: 0,\n                    profit: 0\n                });\n            }\n        }\n        return {\n            projectId,\n            projectName: projectEntries[0]?.projectName || \"Unknown Project\",\n            period: {\n                start: startDate,\n                end: endDate\n            },\n            totalHours,\n            totalBillableHours,\n            totalCost,\n            totalRevenue: revenue,\n            grossProfit,\n            profitMargin,\n            averageMultiplier,\n            employeeBreakdown: Array.from(employeeBreakdown.values()),\n            monthlyBreakdown: Array.from(monthlyBreakdown.values())\n        };\n    }\n    async generateEmployeeProfitabilityReport(employeeId, startDate, endDate, employeeTimeEntries) {\n        const employeeEntries = employeeTimeEntries.filter((entry)=>entry.employeeId === employeeId && entry.date >= startDate && entry.date <= endDate);\n        const totalHours = employeeEntries.reduce((sum, entry)=>sum + entry.hours, 0);\n        const totalBillableHours = employeeEntries.reduce((sum, entry)=>sum + entry.billableHours, 0);\n        const totalCost = employeeEntries.reduce((sum, entry)=>sum + entry.totalCost, 0);\n        const totalBillableValue = employeeEntries.reduce((sum, entry)=>sum + entry.billableValue, 0);\n        const efficiency = totalHours > 0 ? totalBillableHours / totalHours : 0;\n        const averageHourlyRate = totalHours > 0 ? totalCost / totalHours : 0;\n        // Project breakdown\n        const projectBreakdown = new Map();\n        for (const entry of employeeEntries){\n            const existing = projectBreakdown.get(entry.projectId);\n            if (existing) {\n                existing.hours += entry.hours;\n                existing.cost += entry.totalCost;\n                existing.billableValue += entry.billableValue;\n                existing.efficiency = existing.hours > 0 ? existing.billableValue / (existing.hours * entry.hourlyRate) : 0;\n            } else {\n                projectBreakdown.set(entry.projectId, {\n                    projectId: entry.projectId,\n                    projectName: entry.projectName,\n                    hours: entry.hours,\n                    cost: entry.totalCost,\n                    billableValue: entry.billableValue,\n                    efficiency: entry.efficiency\n                });\n            }\n        }\n        return {\n            employeeId,\n            employeeName: employeeEntries[0]?.employeeName || \"Unknown Employee\",\n            period: {\n                start: startDate,\n                end: endDate\n            },\n            totalHours,\n            totalBillableHours,\n            totalCost,\n            totalBillableValue,\n            efficiency,\n            averageHourlyRate,\n            projectBreakdown: Array.from(projectBreakdown.values())\n        };\n    }\n    // Payroll System Integration\n    async configurePayrollSystem(system) {\n        this.payrollSystem = system;\n        console.log(`Payroll system configured: ${system.name}`);\n    }\n    // BambooHR Integration\n    async configureBambooHR(config) {\n        this.bamboohrConfig = config;\n        (0,_bamboohr__WEBPACK_IMPORTED_MODULE_0__.configureBambooHR)(config);\n        // Save configuration to database\n        await (0,_database__WEBPACK_IMPORTED_MODULE_1__.saveBambooHRConfig)({\n            subdomain: config.subdomain,\n            apiKey: config.apiKey,\n            webhookSecret: config.webhookSecret\n        });\n        console.log(`BambooHR configured for subdomain: ${config.subdomain}`);\n    }\n    async importSalariesFromBambooHR() {\n        if (!this.bamboohrConfig) {\n            throw new Error(\"BambooHR not configured\");\n        }\n        try {\n            // Import employees from BambooHR\n            const bamboohrEmployees = await (0,_bamboohr__WEBPACK_IMPORTED_MODULE_0__.importBambooHREmployees)();\n            console.log(`BambooHR import: upserting ${bamboohrEmployees.length} employees to Supabase/Prisma`);\n            let employeeSuccess = 0;\n            const employeeErrors = [];\n            for (const employee of bamboohrEmployees){\n                try {\n                    await this.addEmployee(employee);\n                    employeeSuccess += 1;\n                } catch (e) {\n                    console.error(\"BambooHR employee upsert failed:\", {\n                        id: employee.id,\n                        name: employee.name,\n                        error: e?.message || String(e)\n                    });\n                    employeeErrors.push(`emp:${employee.id}:${e?.message || e}`);\n                }\n            }\n            // Import salaries from BambooHR\n            const bamboohrSalaries = await (0,_bamboohr__WEBPACK_IMPORTED_MODULE_0__.importBambooHRSalaries)();\n            console.log(`BambooHR import: upserting ${bamboohrSalaries.length} salaries to Supabase/Prisma`);\n            let salarySuccess = 0;\n            const salaryErrors = [];\n            for (const salary of bamboohrSalaries){\n                try {\n                    await this.addSalary(salary);\n                    salarySuccess += 1;\n                } catch (e) {\n                    console.error(\"BambooHR salary upsert failed:\", {\n                        employeeId: salary.employeeId,\n                        effectiveDate: salary.effectiveDate,\n                        annualSalary: salary.annualSalary,\n                        hourlyRate: salary.hourlyRate,\n                        error: e?.message || String(e)\n                    });\n                    salaryErrors.push(`sal:${salary.employeeId}:${salary.effectiveDate}:${e?.message || e}`);\n                }\n            }\n            console.log(`BambooHR import completed: employees ok=${employeeSuccess}, salaries ok=${salarySuccess}, empErrors=${employeeErrors.length}, salErrors=${salaryErrors.length}`);\n            return {\n                source: \"bamboohr\",\n                importDate: new Date().toISOString(),\n                recordsImported: employeeSuccess + salarySuccess,\n                errors: [\n                    ...employeeErrors,\n                    ...salaryErrors\n                ]\n            };\n        } catch (error) {\n            return {\n                source: \"bamboohr\",\n                importDate: new Date().toISOString(),\n                recordsImported: 0,\n                errors: [\n                    error.message\n                ]\n            };\n        }\n    }\n    async importSalariesFromPayrollSystem() {\n        if (!this.payrollSystem) {\n            throw new Error(\"No payroll system configured\");\n        }\n        if (this.payrollSystem.type === \"bamboohr\" && this.bamboohrConfig) {\n            return await this.importSalariesFromBambooHR();\n        }\n        // This would integrate with other payroll system APIs\n        // For now, return a mock import\n        return {\n            source: \"api\",\n            importDate: new Date().toISOString(),\n            recordsImported: 0,\n            errors: [\n                `${this.payrollSystem.type} integration not yet implemented`\n            ]\n        };\n    }\n    // Utility Methods\n    parseDuration(duration) {\n        const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/;\n        const match = duration.match(regex);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || \"0\");\n        const minutes = parseInt(match[2] || \"0\");\n        const seconds = parseInt(match[3] || \"0\");\n        return (hours * 3600 + minutes * 60 + seconds) * 1000;\n    }\n    calculateHourlyRate(annualSalary, workHoursPerYear = 2080) {\n        return annualSalary / workHoursPerYear;\n    }\n    // Normalization helpers to convert Prisma results to domain types\n    normalizeEmployee(dbEmployee) {\n        const statusValue = (dbEmployee.status || \"active\").toLowerCase();\n        const normalizedStatus = statusValue === \"active\" ? \"active\" : \"inactive\";\n        return {\n            id: dbEmployee.id,\n            name: dbEmployee.name,\n            email: dbEmployee.email,\n            status: normalizedStatus,\n            department: dbEmployee.department ?? undefined,\n            position: dbEmployee.position ?? undefined,\n            hireDate: dbEmployee.hireDate,\n            terminationDate: dbEmployee.terminationDate ?? undefined\n        };\n    }\n    normalizeSalary(dbSalary) {\n        const toNumber = (v)=>v && typeof v === \"object\" && \"toNumber\" in v ? v.toNumber() : Number(v);\n        return {\n            employeeId: dbSalary.employeeId,\n            effectiveDate: dbSalary.effectiveDate,\n            endDate: dbSalary.endDate ?? undefined,\n            annualSalary: toNumber(dbSalary.annualSalary),\n            hourlyRate: toNumber(dbSalary.hourlyRate),\n            currency: dbSalary.currency || \"USD\",\n            notes: dbSalary.notes ?? undefined\n        };\n    }\n    normalizeProjectMultiplier(dbMultiplier) {\n        const toNumber = (v)=>v && typeof v === \"object\" && \"toNumber\" in v ? v.toNumber() : Number(v);\n        return {\n            projectId: dbMultiplier.projectId,\n            projectName: dbMultiplier.projectName,\n            multiplier: toNumber(dbMultiplier.multiplier),\n            effectiveDate: dbMultiplier.effectiveDate,\n            endDate: dbMultiplier.endDate ?? undefined,\n            notes: dbMultiplier.notes ?? undefined\n        };\n    }\n    // Data Export/Import\n    async exportData() {\n        return {\n            employees: Array.from(this.employees.values()),\n            salaries: Array.from(this.salaries.entries()),\n            multipliers: Array.from(this.multipliers.entries()),\n            payrollSystem: this.payrollSystem,\n            bamboohrConfig: this.bamboohrConfig\n        };\n    }\n    async importData(data) {\n        this.employees = new Map(data.employees.map((emp)=>[\n                emp.id,\n                emp\n            ]));\n        this.salaries = new Map(data.salaries);\n        this.multipliers = new Map(data.multipliers);\n        this.payrollSystem = data.payrollSystem;\n        this.bamboohrConfig = data.bamboohrConfig;\n        if (this.bamboohrConfig) {\n            (0,_bamboohr__WEBPACK_IMPORTED_MODULE_0__.configureBambooHR)(this.bamboohrConfig);\n        }\n        console.log(\"Payroll data imported successfully\");\n    }\n}\n// Create singleton instance\nconst payrollService = new PayrollService();\n// Export convenience functions\nconst addEmployee = async (employee)=>{\n    await payrollService.addEmployee(employee);\n};\nconst addSalary = async (salary)=>{\n    await payrollService.addSalary(salary);\n};\nconst addProjectMultiplier = async (multiplier)=>{\n    await payrollService.addProjectMultiplier(multiplier);\n};\nconst processTimeEntries = async (clockifyEntries, clockifyUsers, projects)=>{\n    return await payrollService.processTimeEntries(clockifyEntries, clockifyUsers, projects);\n};\nconst generateProjectProfitabilityReport = async (projectId, startDate, endDate, employeeTimeEntries, revenue)=>{\n    return await payrollService.generateProjectProfitabilityReport(projectId, startDate, endDate, employeeTimeEntries, revenue);\n};\nconst generateEmployeeProfitabilityReport = async (employeeId, startDate, endDate, employeeTimeEntries)=>{\n    return await payrollService.generateEmployeeProfitabilityReport(employeeId, startDate, endDate, employeeTimeEntries);\n};\n// BambooHR specific functions\nconst configureBambooHR = async (config)=>{\n    await payrollService.configureBambooHR(config);\n};\nconst importBambooHRData = async ()=>{\n    return await payrollService.importSalariesFromBambooHR();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDakMsRUFBRTtBQUVLLE1BQU1jLHVCQUF1QixPQUFPNUI7SUFDekMsTUFBTXlJLGVBQWU3RyxvQkFBb0IsQ0FBQzVCO0FBQzVDLEVBQUU7QUFFSyxNQUFNa0MscUJBQXFCLE9BQ2hDQyxpQkFDQUMsZUFDQUM7SUFFQSxPQUFPLE1BQU1vRyxlQUFldkcsa0JBQWtCLENBQUNDLGlCQUFpQkMsZUFBZUM7QUFDakYsRUFBRTtBQUVLLE1BQU00QixxQ0FBcUMsT0FDaERuRSxXQUNBb0UsV0FDQTVFLFNBQ0FnRCxxQkFDQTZCO0lBRUEsT0FBTyxNQUFNc0UsZUFBZXhFLGtDQUFrQyxDQUM1RG5FLFdBQVdvRSxXQUFXNUUsU0FBU2dELHFCQUFxQjZCO0FBRXhELEVBQUU7QUFFSyxNQUFNdUIsc0NBQXNDLE9BQ2pEdEcsWUFDQThFLFdBQ0E1RSxTQUNBZ0Q7SUFFQSxPQUFPLE1BQU1tRyxlQUFlL0MsbUNBQW1DLENBQzdEdEcsWUFBWThFLFdBQVc1RSxTQUFTZ0Q7QUFFcEMsRUFBRTtBQUVGLDhCQUE4QjtBQUN2QixNQUFNeEcsb0JBQW9CLE9BQU9tSztJQUN0QyxNQUFNd0MsZUFBZTNNLGlCQUFpQixDQUFDbUs7QUFDekMsRUFBRTtBQUVLLE1BQU15QyxxQkFBcUI7SUFDaEMsT0FBTyxNQUFNRCxlQUFlbkMsMEJBQTBCO0FBQ3hELEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96b2hvLWJpbGxpbmctcGxhdGZvcm0vLi9saWIvcGF5cm9sbC50cz9iNzJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxyXG4gIEVtcGxveWVlLCBcclxuICBFbXBsb3llZVNhbGFyeSwgXHJcbiAgUHJvamVjdE11bHRpcGxpZXIsIFxyXG4gIEVtcGxveWVlVGltZUVudHJ5LCBcclxuICBQcm9qZWN0UHJvZml0YWJpbGl0eVJlcG9ydCxcclxuICBFbXBsb3llZVByb2ZpdGFiaWxpdHlSZXBvcnQsXHJcbiAgUGF5cm9sbFN5c3RlbSxcclxuICBTYWxhcnlJbXBvcnQsXHJcbiAgQmFtYm9vSFJDb25maWdcclxufSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgQ2xvY2tpZnlUaW1lRW50cnksIENsb2NraWZ5VXNlciB9IGZyb20gJy4vY2xvY2tpZnknO1xyXG5pbXBvcnQgeyBjb25maWd1cmVCYW1ib29IUiBhcyBfY29uZmlndXJlQmFtYm9vSFJTZXJ2aWNlLCBnZXRCYW1ib29IUlNlcnZpY2UsIGltcG9ydEJhbWJvb0hSRW1wbG95ZWVzLCBpbXBvcnRCYW1ib29IUlNhbGFyaWVzIH0gZnJvbSAnLi9iYW1ib29ocic7XHJcbmltcG9ydCB7IFxyXG4gIHNhdmVFbXBsb3llZSwgXHJcbiAgc2F2ZUVtcGxveWVlU2FsYXJ5LCBcclxuICBzYXZlUHJvamVjdE11bHRpcGxpZXIsIFxyXG4gIHNhdmVFbXBsb3llZVRpbWVFbnRyeSxcclxuICBnZXRBbGxFbXBsb3llZXMgYXMgZGJHZXRBbGxFbXBsb3llZXMsXHJcbiAgZ2V0QWxsRW1wbG95ZWVTYWxhcmllcyBhcyBkYkdldEFsbEVtcGxveWVlU2FsYXJpZXMsXHJcbiAgZ2V0QWxsUHJvamVjdE11bHRpcGxpZXJzIGFzIGRiR2V0QWxsUHJvamVjdE11bHRpcGxpZXJzLFxyXG4gIGdldEFsbEVtcGxveWVlVGltZUVudHJpZXMgYXMgZGJHZXRBbGxFbXBsb3llZVRpbWVFbnRyaWVzLFxyXG4gIHNhdmVCYW1ib29IUkNvbmZpZ1xyXG59IGZyb20gJy4vZGF0YWJhc2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBheXJvbGxTZXJ2aWNlIHtcclxuICBwcml2YXRlIGVtcGxveWVlczogTWFwPHN0cmluZywgRW1wbG95ZWU+ID0gbmV3IE1hcCgpO1xyXG4gIHByaXZhdGUgc2FsYXJpZXM6IE1hcDxzdHJpbmcsIEVtcGxveWVlU2FsYXJ5W10+ID0gbmV3IE1hcCgpO1xyXG4gIHByaXZhdGUgbXVsdGlwbGllcnM6IE1hcDxzdHJpbmcsIFByb2plY3RNdWx0aXBsaWVyW10+ID0gbmV3IE1hcCgpO1xyXG4gIHByaXZhdGUgcGF5cm9sbFN5c3RlbT86IFBheXJvbGxTeXN0ZW07XHJcbiAgcHJpdmF0ZSBiYW1ib29ockNvbmZpZz86IEJhbWJvb0hSQ29uZmlnO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGNvbnNvbGUubG9nKCdQYXlyb2xsIHNlcnZpY2UgaW5pdGlhbGl6ZWQnKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbWFwRGJFbXBsb3llZVRvRG9tYWluKGRiRW1wbG95ZWU6IGFueSk6IEVtcGxveWVlIHtcclxuICAgIGNvbnN0IHN0YXR1c1ZhbHVlID0gKGRiRW1wbG95ZWUuc3RhdHVzIHx8ICcnKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgY29uc3Qgc3RhdHVzOiAnYWN0aXZlJyB8ICdpbmFjdGl2ZScgPSBzdGF0dXNWYWx1ZSA9PT0gJ2FjdGl2ZScgPyAnYWN0aXZlJyA6ICdpbmFjdGl2ZSc7XHJcbiAgICBjb25zdCB0b0lzb0RhdGVTdHJpbmcgPSAoZDogYW55IHwgdW5kZWZpbmVkIHwgbnVsbCk6IHN0cmluZyB8IHVuZGVmaW5lZCA9PiB7XHJcbiAgICAgIGlmICghZCkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgaWYgKHR5cGVvZiBkID09PSAnc3RyaW5nJykgcmV0dXJuIGQ7XHJcbiAgICAgIGlmIChkIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIGQudG9JU09TdHJpbmcoKTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBhc0RhdGUgPSBuZXcgRGF0ZShkKTtcclxuICAgICAgICByZXR1cm4gaXNOYU4oYXNEYXRlLmdldFRpbWUoKSkgPyB1bmRlZmluZWQgOiBhc0RhdGUudG9JU09TdHJpbmcoKTtcclxuICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiBkYkVtcGxveWVlLmlkLFxyXG4gICAgICBuYW1lOiBkYkVtcGxveWVlLm5hbWUsXHJcbiAgICAgIGVtYWlsOiBkYkVtcGxveWVlLmVtYWlsLFxyXG4gICAgICBzdGF0dXMsXHJcbiAgICAgIGRlcGFydG1lbnQ6IGRiRW1wbG95ZWUuZGVwYXJ0bWVudCA/PyB1bmRlZmluZWQsXHJcbiAgICAgIHBvc2l0aW9uOiBkYkVtcGxveWVlLnBvc2l0aW9uID8/IHVuZGVmaW5lZCxcclxuICAgICAgaGlyZURhdGU6IHRvSXNvRGF0ZVN0cmluZyhkYkVtcGxveWVlLmhpcmVEYXRlKSB8fCAnJyxcclxuICAgICAgdGVybWluYXRpb25EYXRlOiB0b0lzb0RhdGVTdHJpbmcoZGJFbXBsb3llZS50ZXJtaW5hdGlvbkRhdGUpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdG9OdW1iZXIodmFsdWU6IGFueSk6IG51bWJlciB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHZhbHVlO1xyXG4gICAgLy8gUHJpc21hIERlY2ltYWwgaGFzIHRvTnVtYmVyKCk7IGZhbGwgYmFjayB0byBwYXJzZUZsb2F0XHJcbiAgICBjb25zdCBtYXliZURlY2ltYWwgPSB2YWx1ZSBhcyB7IHRvTnVtYmVyPzogKCkgPT4gbnVtYmVyIH07XHJcbiAgICBpZiAobWF5YmVEZWNpbWFsICYmIHR5cGVvZiBtYXliZURlY2ltYWwudG9OdW1iZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgcmV0dXJuIG1heWJlRGVjaW1hbC50b051bWJlcigpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VGbG9hdChTdHJpbmcodmFsdWUpKTtcclxuICAgIHJldHVybiBOdW1iZXIuaXNOYU4ocGFyc2VkKSA/IDAgOiBwYXJzZWQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1hcERiU2FsYXJpZXNUb0RvbWFpbihkYlNhbGFyaWVzOiBhbnlbXSk6IEVtcGxveWVlU2FsYXJ5W10ge1xyXG4gICAgcmV0dXJuIChkYlNhbGFyaWVzIHx8IFtdKS5tYXAoKHM6IGFueSkgPT4gKHtcclxuICAgICAgZW1wbG95ZWVJZDogcy5lbXBsb3llZUlkLFxyXG4gICAgICBlZmZlY3RpdmVEYXRlOiBzLmVmZmVjdGl2ZURhdGUsXHJcbiAgICAgIGVuZERhdGU6IHMuZW5kRGF0ZSA/PyB1bmRlZmluZWQsXHJcbiAgICAgIGFubnVhbFNhbGFyeTogdGhpcy50b051bWJlcihzLmFubnVhbFNhbGFyeSksXHJcbiAgICAgIGhvdXJseVJhdGU6IHRoaXMudG9OdW1iZXIocy5ob3VybHlSYXRlKSxcclxuICAgICAgY3VycmVuY3k6IHMuY3VycmVuY3kgPz8gdW5kZWZpbmVkLFxyXG4gICAgICBub3Rlczogcy5ub3RlcyA/PyB1bmRlZmluZWQsXHJcbiAgICB9KSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1hcERiTXVsdGlwbGllcnNUb0RvbWFpbihkYk11bHRpcGxpZXJzOiBhbnlbXSk6IFByb2plY3RNdWx0aXBsaWVyW10ge1xyXG4gICAgcmV0dXJuIChkYk11bHRpcGxpZXJzIHx8IFtdKS5tYXAoKG06IGFueSkgPT4gKHtcclxuICAgICAgcHJvamVjdElkOiBtLnByb2plY3RJZCxcclxuICAgICAgcHJvamVjdE5hbWU6IG0ucHJvamVjdE5hbWUsXHJcbiAgICAgIG11bHRpcGxpZXI6IHRoaXMudG9OdW1iZXIobS5tdWx0aXBsaWVyKSxcclxuICAgICAgZWZmZWN0aXZlRGF0ZTogbS5lZmZlY3RpdmVEYXRlLFxyXG4gICAgICBlbmREYXRlOiBtLmVuZERhdGUgPz8gdW5kZWZpbmVkLFxyXG4gICAgICBub3RlczogbS5ub3RlcyA/PyB1bmRlZmluZWQsXHJcbiAgICB9KSk7XHJcbiAgfVxyXG5cclxuICAvLyBFbXBsb3llZSBNYW5hZ2VtZW50XHJcbiAgYXN5bmMgYWRkRW1wbG95ZWUoZW1wbG95ZWU6IEVtcGxveWVlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyBTYXZlIHRvIGRhdGFiYXNlXHJcbiAgICBhd2FpdCBzYXZlRW1wbG95ZWUoZW1wbG95ZWUpO1xyXG4gICAgLy8gQWxzbyBrZWVwIGluIG1lbW9yeSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxyXG4gICAgdGhpcy5lbXBsb3llZXMuc2V0KGVtcGxveWVlLmlkLCBlbXBsb3llZSk7XHJcbiAgICBjb25zb2xlLmxvZyhgRW1wbG95ZWUgYWRkZWQ6ICR7ZW1wbG95ZWUubmFtZX0gKCR7ZW1wbG95ZWUuaWR9KWApO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0RW1wbG95ZWUoZW1wbG95ZWVJZDogc3RyaW5nKTogUHJvbWlzZTxFbXBsb3llZSB8IG51bGw+IHtcclxuICAgIC8vIFRyeSBtZW1vcnkgZmlyc3QsIHRoZW4gZGF0YWJhc2VcclxuICAgIGxldCBlbXBsb3llZSA9IHRoaXMuZW1wbG95ZWVzLmdldChlbXBsb3llZUlkKTtcclxuICAgIGlmICghZW1wbG95ZWUpIHtcclxuICAgICAgLy8gTG9hZCBmcm9tIGRhdGFiYXNlXHJcbiAgICAgIGNvbnN0IGRiRW1wbG95ZWVzID0gYXdhaXQgZGJHZXRBbGxFbXBsb3llZXMoKTtcclxuICAgICAgY29uc3QgZGJFbXBsb3llZSA9IGRiRW1wbG95ZWVzLmZpbmQoKGVtcDogYW55KSA9PiBlbXAuaWQgPT09IGVtcGxveWVlSWQpO1xyXG4gICAgICBpZiAoZGJFbXBsb3llZSkge1xyXG4gICAgICAgIGNvbnN0IG1hcHBlZCA9IHRoaXMubWFwRGJFbXBsb3llZVRvRG9tYWluKGRiRW1wbG95ZWUpO1xyXG4gICAgICAgIHRoaXMuZW1wbG95ZWVzLnNldChlbXBsb3llZUlkLCBtYXBwZWQpO1xyXG4gICAgICAgIGVtcGxveWVlID0gbWFwcGVkO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW1wbG95ZWUgfHwgbnVsbDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldEFsbEVtcGxveWVlcygpOiBQcm9taXNlPEVtcGxveWVlW10+IHtcclxuICAgIC8vIExvYWQgZnJvbSBkYXRhYmFzZSBhbmQgc3luYyBtZW1vcnlcclxuICAgIGNvbnN0IGRiRW1wbG95ZWVzID0gYXdhaXQgZGJHZXRBbGxFbXBsb3llZXMoKTtcclxuICAgIC8vIFVwZGF0ZSBtZW1vcnkgY2FjaGVcclxuICAgIGNvbnN0IG1hcHBlZCA9IGRiRW1wbG95ZWVzLm1hcCgoZW1wOiBhbnkpID0+IHRoaXMubWFwRGJFbXBsb3llZVRvRG9tYWluKGVtcCkpO1xyXG4gICAgZm9yIChjb25zdCBlbXAgb2YgbWFwcGVkKSB7XHJcbiAgICAgIHRoaXMuZW1wbG95ZWVzLnNldChlbXAuaWQsIGVtcCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWFwcGVkO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgdXBkYXRlRW1wbG95ZWUoZW1wbG95ZWVJZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPEVtcGxveWVlPik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgZW1wbG95ZWUgPSB0aGlzLmVtcGxveWVlcy5nZXQoZW1wbG95ZWVJZCk7XHJcbiAgICBpZiAoZW1wbG95ZWUpIHtcclxuICAgICAgY29uc3QgdXBkYXRlZEVtcGxveWVlID0geyAuLi5lbXBsb3llZSwgLi4udXBkYXRlcyB9O1xyXG4gICAgICAvLyBTYXZlIHRvIGRhdGFiYXNlXHJcbiAgICAgIGF3YWl0IHNhdmVFbXBsb3llZSh1cGRhdGVkRW1wbG95ZWUpO1xyXG4gICAgICAvLyBVcGRhdGUgbWVtb3J5XHJcbiAgICAgIHRoaXMuZW1wbG95ZWVzLnNldChlbXBsb3llZUlkLCB1cGRhdGVkRW1wbG95ZWUpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgRW1wbG95ZWUgdXBkYXRlZDogJHtlbXBsb3llZS5uYW1lfWApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU2FsYXJ5IE1hbmFnZW1lbnRcclxuICBhc3luYyBhZGRTYWxhcnkoc2FsYXJ5OiBFbXBsb3llZVNhbGFyeSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgLy8gU2F2ZSB0byBkYXRhYmFzZVxyXG4gICAgYXdhaXQgc2F2ZUVtcGxveWVlU2FsYXJ5KHNhbGFyeSk7XHJcbiAgICBcclxuICAgIC8vIEFsc28ga2VlcCBpbiBtZW1vcnkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcclxuICAgIGNvbnN0IGVtcGxveWVlU2FsYXJpZXMgPSB0aGlzLnNhbGFyaWVzLmdldChzYWxhcnkuZW1wbG95ZWVJZCkgfHwgW107XHJcbiAgICBcclxuICAgIC8vIElmIHRoaXMgaXMgYSBuZXcgY3VycmVudCBzYWxhcnksIGVuZCB0aGUgcHJldmlvdXMgb25lXHJcbiAgICBpZiAoIXNhbGFyeS5lbmREYXRlKSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRTYWxhcnkgPSBlbXBsb3llZVNhbGFyaWVzLmZpbmQocyA9PiAhcy5lbmREYXRlKTtcclxuICAgICAgaWYgKGN1cnJlbnRTYWxhcnkpIHtcclxuICAgICAgICBjdXJyZW50U2FsYXJ5LmVuZERhdGUgPSBzYWxhcnkuZWZmZWN0aXZlRGF0ZTtcclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHByZXZpb3VzIHNhbGFyeSBpbiBkYXRhYmFzZVxyXG4gICAgICAgIGF3YWl0IHNhdmVFbXBsb3llZVNhbGFyeShjdXJyZW50U2FsYXJ5KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBlbXBsb3llZVNhbGFyaWVzLnB1c2goc2FsYXJ5KTtcclxuICAgIGVtcGxveWVlU2FsYXJpZXMuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYS5lZmZlY3RpdmVEYXRlKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShiLmVmZmVjdGl2ZURhdGUpLmdldFRpbWUoKSk7XHJcbiAgICBcclxuICAgIHRoaXMuc2FsYXJpZXMuc2V0KHNhbGFyeS5lbXBsb3llZUlkLCBlbXBsb3llZVNhbGFyaWVzKTtcclxuICAgIGNvbnNvbGUubG9nKGBTYWxhcnkgYWRkZWQgZm9yICR7c2FsYXJ5LmVtcGxveWVlSWR9IGVmZmVjdGl2ZSAke3NhbGFyeS5lZmZlY3RpdmVEYXRlfWApO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0RW1wbG95ZWVTYWxhcnkoZW1wbG95ZWVJZDogc3RyaW5nLCBkYXRlOiBzdHJpbmcpOiBQcm9taXNlPEVtcGxveWVlU2FsYXJ5IHwgbnVsbD4ge1xyXG4gICAgLy8gVHJ5IG1lbW9yeSBmaXJzdCwgdGhlbiBkYXRhYmFzZVxyXG4gICAgbGV0IGVtcGxveWVlU2FsYXJpZXMgPSB0aGlzLnNhbGFyaWVzLmdldChlbXBsb3llZUlkKTtcclxuICAgIGlmICghZW1wbG95ZWVTYWxhcmllcyB8fCBlbXBsb3llZVNhbGFyaWVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAvLyBMb2FkIGZyb20gZGF0YWJhc2VcclxuICAgICAgY29uc3QgZGJTYWxhcmllcyA9IGF3YWl0IGRiR2V0QWxsRW1wbG95ZWVTYWxhcmllcygpO1xyXG4gICAgICBjb25zdCBlbXBsb3llZURiU2FsYXJpZXMgPSBkYlNhbGFyaWVzLmZpbHRlcigoczogYW55KSA9PiBzLmVtcGxveWVlSWQgPT09IGVtcGxveWVlSWQpO1xyXG4gICAgICBpZiAoZW1wbG95ZWVEYlNhbGFyaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBtYXBwZWQgPSB0aGlzLm1hcERiU2FsYXJpZXNUb0RvbWFpbihlbXBsb3llZURiU2FsYXJpZXMpO1xyXG4gICAgICAgIHRoaXMuc2FsYXJpZXMuc2V0KGVtcGxveWVlSWQsIG1hcHBlZCk7XHJcbiAgICAgICAgZW1wbG95ZWVTYWxhcmllcyA9IG1hcHBlZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoIWVtcGxveWVlU2FsYXJpZXMpIHJldHVybiBudWxsO1xyXG4gICAgXHJcbiAgICBjb25zdCB0YXJnZXREYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICBcclxuICAgIHJldHVybiBlbXBsb3llZVNhbGFyaWVzLmZpbmQoc2FsYXJ5ID0+IHtcclxuICAgICAgY29uc3QgZWZmZWN0aXZlRGF0ZSA9IG5ldyBEYXRlKHNhbGFyeS5lZmZlY3RpdmVEYXRlKTtcclxuICAgICAgY29uc3QgZW5kRGF0ZSA9IHNhbGFyeS5lbmREYXRlID8gbmV3IERhdGUoc2FsYXJ5LmVuZERhdGUpIDogbmV3IERhdGUoJzk5OTktMTItMzEnKTtcclxuICAgICAgcmV0dXJuIHRhcmdldERhdGUgPj0gZWZmZWN0aXZlRGF0ZSAmJiB0YXJnZXREYXRlIDw9IGVuZERhdGU7XHJcbiAgICB9KSB8fCBudWxsO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0RW1wbG95ZWVTYWxhcnlIaXN0b3J5KGVtcGxveWVlSWQ6IHN0cmluZyk6IFByb21pc2U8RW1wbG95ZWVTYWxhcnlbXT4ge1xyXG4gICAgLy8gVHJ5IG1lbW9yeSBmaXJzdCwgdGhlbiBkYXRhYmFzZVxyXG4gICAgbGV0IGVtcGxveWVlU2FsYXJpZXMgPSB0aGlzLnNhbGFyaWVzLmdldChlbXBsb3llZUlkKTtcclxuICAgIGlmICghZW1wbG95ZWVTYWxhcmllcyB8fCBlbXBsb3llZVNhbGFyaWVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAvLyBMb2FkIGZyb20gZGF0YWJhc2VcclxuICAgICAgY29uc3QgZGJTYWxhcmllcyA9IGF3YWl0IGRiR2V0QWxsRW1wbG95ZWVTYWxhcmllcygpO1xyXG4gICAgICBjb25zdCBlbXBsb3llZURiU2FsYXJpZXMgPSBkYlNhbGFyaWVzLmZpbHRlcigoczogYW55KSA9PiBzLmVtcGxveWVlSWQgPT09IGVtcGxveWVlSWQpO1xyXG4gICAgICBpZiAoZW1wbG95ZWVEYlNhbGFyaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBtYXBwZWQgPSB0aGlzLm1hcERiU2FsYXJpZXNUb0RvbWFpbihlbXBsb3llZURiU2FsYXJpZXMpO1xyXG4gICAgICAgIHRoaXMuc2FsYXJpZXMuc2V0KGVtcGxveWVlSWQsIG1hcHBlZCk7XHJcbiAgICAgICAgZW1wbG95ZWVTYWxhcmllcyA9IG1hcHBlZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVtcGxveWVlU2FsYXJpZXMgfHwgW107XHJcbiAgfVxyXG5cclxuICAvLyBQcm9qZWN0IE11bHRpcGxpZXIgTWFuYWdlbWVudFxyXG4gIGFzeW5jIGFkZFByb2plY3RNdWx0aXBsaWVyKG11bHRpcGxpZXI6IFByb2plY3RNdWx0aXBsaWVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyBTYXZlIHRvIGRhdGFiYXNlXHJcbiAgICBhd2FpdCBzYXZlUHJvamVjdE11bHRpcGxpZXIobXVsdGlwbGllcik7XHJcbiAgICBcclxuICAgIC8vIEFsc28ga2VlcCBpbiBtZW1vcnkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcclxuICAgIGNvbnN0IHByb2plY3RNdWx0aXBsaWVycyA9IHRoaXMubXVsdGlwbGllcnMuZ2V0KG11bHRpcGxpZXIucHJvamVjdElkKSB8fCBbXTtcclxuICAgIFxyXG4gICAgLy8gSWYgdGhpcyBpcyBhIG5ldyBjdXJyZW50IG11bHRpcGxpZXIsIGVuZCB0aGUgcHJldmlvdXMgb25lXHJcbiAgICBpZiAoIW11bHRpcGxpZXIuZW5kRGF0ZSkge1xyXG4gICAgICBjb25zdCBjdXJyZW50TXVsdGlwbGllciA9IHByb2plY3RNdWx0aXBsaWVycy5maW5kKG0gPT4gIW0uZW5kRGF0ZSk7XHJcbiAgICAgIGlmIChjdXJyZW50TXVsdGlwbGllcikge1xyXG4gICAgICAgIGN1cnJlbnRNdWx0aXBsaWVyLmVuZERhdGUgPSBtdWx0aXBsaWVyLmVmZmVjdGl2ZURhdGU7XHJcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBwcmV2aW91cyBtdWx0aXBsaWVyIGluIGRhdGFiYXNlXHJcbiAgICAgICAgYXdhaXQgc2F2ZVByb2plY3RNdWx0aXBsaWVyKGN1cnJlbnRNdWx0aXBsaWVyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcm9qZWN0TXVsdGlwbGllcnMucHVzaChtdWx0aXBsaWVyKTtcclxuICAgIHByb2plY3RNdWx0aXBsaWVycy5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShhLmVmZmVjdGl2ZURhdGUpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGIuZWZmZWN0aXZlRGF0ZSkuZ2V0VGltZSgpKTtcclxuICAgIFxyXG4gICAgdGhpcy5tdWx0aXBsaWVycy5zZXQobXVsdGlwbGllci5wcm9qZWN0SWQsIHByb2plY3RNdWx0aXBsaWVycyk7XHJcbiAgICBjb25zb2xlLmxvZyhgTXVsdGlwbGllciBhZGRlZCBmb3IgcHJvamVjdCAke211bHRpcGxpZXIucHJvamVjdE5hbWV9IGVmZmVjdGl2ZSAke211bHRpcGxpZXIuZWZmZWN0aXZlRGF0ZX1gKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFByb2plY3RNdWx0aXBsaWVyKHByb2plY3RJZDogc3RyaW5nLCBkYXRlOiBzdHJpbmcpOiBQcm9taXNlPFByb2plY3RNdWx0aXBsaWVyIHwgbnVsbD4ge1xyXG4gICAgLy8gVHJ5IG1lbW9yeSBmaXJzdCwgdGhlbiBkYXRhYmFzZVxyXG4gICAgbGV0IHByb2plY3RNdWx0aXBsaWVycyA9IHRoaXMubXVsdGlwbGllcnMuZ2V0KHByb2plY3RJZCk7XHJcbiAgICBpZiAoIXByb2plY3RNdWx0aXBsaWVycyB8fCBwcm9qZWN0TXVsdGlwbGllcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIC8vIExvYWQgZnJvbSBkYXRhYmFzZVxyXG4gICAgICBjb25zdCBkYk11bHRpcGxpZXJzID0gYXdhaXQgZGJHZXRBbGxQcm9qZWN0TXVsdGlwbGllcnMoKTtcclxuICAgICAgY29uc3QgcHJvamVjdERiTXVsdGlwbGllcnMgPSBkYk11bHRpcGxpZXJzLmZpbHRlcigobTogYW55KSA9PiBtLnByb2plY3RJZCA9PT0gcHJvamVjdElkKTtcclxuICAgICAgaWYgKHByb2plY3REYk11bHRpcGxpZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBtYXBwZWQgPSB0aGlzLm1hcERiTXVsdGlwbGllcnNUb0RvbWFpbihwcm9qZWN0RGJNdWx0aXBsaWVycyk7XHJcbiAgICAgICAgdGhpcy5tdWx0aXBsaWVycy5zZXQocHJvamVjdElkLCBtYXBwZWQpO1xyXG4gICAgICAgIHByb2plY3RNdWx0aXBsaWVycyA9IG1hcHBlZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoIXByb2plY3RNdWx0aXBsaWVycykgcmV0dXJuIG51bGw7XHJcbiAgICBcclxuICAgIGNvbnN0IHRhcmdldERhdGUgPSBuZXcgRGF0ZShkYXRlKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHByb2plY3RNdWx0aXBsaWVycy5maW5kKG11bHRpcGxpZXIgPT4ge1xyXG4gICAgICBjb25zdCBlZmZlY3RpdmVEYXRlID0gbmV3IERhdGUobXVsdGlwbGllci5lZmZlY3RpdmVEYXRlKTtcclxuICAgICAgY29uc3QgZW5kRGF0ZSA9IG11bHRpcGxpZXIuZW5kRGF0ZSA/IG5ldyBEYXRlKG11bHRpcGxpZXIuZW5kRGF0ZSkgOiBuZXcgRGF0ZSgnOTk5OS0xMi0zMScpO1xyXG4gICAgICByZXR1cm4gdGFyZ2V0RGF0ZSA+PSBlZmZlY3RpdmVEYXRlICYmIHRhcmdldERhdGUgPD0gZW5kRGF0ZTtcclxuICAgIH0pIHx8IG51bGw7XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRQcm9qZWN0TXVsdGlwbGllckhpc3RvcnkocHJvamVjdElkOiBzdHJpbmcpOiBQcm9taXNlPFByb2plY3RNdWx0aXBsaWVyW10+IHtcclxuICAgIC8vIFRyeSBtZW1vcnkgZmlyc3QsIHRoZW4gZGF0YWJhc2VcclxuICAgIGxldCBwcm9qZWN0TXVsdGlwbGllcnMgPSB0aGlzLm11bHRpcGxpZXJzLmdldChwcm9qZWN0SWQpO1xyXG4gICAgaWYgKCFwcm9qZWN0TXVsdGlwbGllcnMgfHwgcHJvamVjdE11bHRpcGxpZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAvLyBMb2FkIGZyb20gZGF0YWJhc2VcclxuICAgICAgY29uc3QgZGJNdWx0aXBsaWVycyA9IGF3YWl0IGRiR2V0QWxsUHJvamVjdE11bHRpcGxpZXJzKCk7XHJcbiAgICAgIGNvbnN0IHByb2plY3REYk11bHRpcGxpZXJzID0gZGJNdWx0aXBsaWVycy5maWx0ZXIoKG06IGFueSkgPT4gbS5wcm9qZWN0SWQgPT09IHByb2plY3RJZCk7XHJcbiAgICAgIGlmIChwcm9qZWN0RGJNdWx0aXBsaWVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgbWFwcGVkID0gdGhpcy5tYXBEYk11bHRpcGxpZXJzVG9Eb21haW4ocHJvamVjdERiTXVsdGlwbGllcnMpO1xyXG4gICAgICAgIHRoaXMubXVsdGlwbGllcnMuc2V0KHByb2plY3RJZCwgbWFwcGVkKTtcclxuICAgICAgICBwcm9qZWN0TXVsdGlwbGllcnMgPSBtYXBwZWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwcm9qZWN0TXVsdGlwbGllcnMgfHwgW107XHJcbiAgfVxyXG5cclxuICAvLyBUaW1lIEVudHJ5IFByb2Nlc3Npbmcgd2l0aCBIaXN0b3JpY2FsIFJhdGVzXHJcbiAgYXN5bmMgcHJvY2Vzc1RpbWVFbnRyaWVzKFxyXG4gICAgY2xvY2tpZnlFbnRyaWVzOiBDbG9ja2lmeVRpbWVFbnRyeVtdLFxyXG4gICAgY2xvY2tpZnlVc2VyczogQ2xvY2tpZnlVc2VyW10sXHJcbiAgICBwcm9qZWN0czogYW55W11cclxuICApOiBQcm9taXNlPEVtcGxveWVlVGltZUVudHJ5W10+IHtcclxuICAgIGNvbnN0IGVtcGxveWVlVGltZUVudHJpZXM6IEVtcGxveWVlVGltZUVudHJ5W10gPSBbXTtcclxuICAgIGNvbnN0IHVzZXJNYXAgPSBuZXcgTWFwKGNsb2NraWZ5VXNlcnMubWFwKHVzZXIgPT4gW3VzZXIuaWQsIHVzZXJdKSk7XHJcblxyXG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBjbG9ja2lmeUVudHJpZXMpIHtcclxuICAgICAgY29uc3QgdXNlciA9IHVzZXJNYXAuZ2V0KGVudHJ5LnVzZXJJZCk7XHJcbiAgICAgIGlmICghdXNlcikgY29udGludWU7XHJcblxyXG4gICAgICBjb25zdCBlbnRyeURhdGUgPSBuZXcgRGF0ZShlbnRyeS50aW1lSW50ZXJ2YWwuc3RhcnQpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcclxuICAgICAgY29uc3QgZW1wbG95ZWUgPSBhd2FpdCB0aGlzLmdldEVtcGxveWVlKGVudHJ5LnVzZXJJZCk7XHJcbiAgICAgIGlmICghZW1wbG95ZWUpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgY29uc3Qgc2FsYXJ5ID0gYXdhaXQgdGhpcy5nZXRFbXBsb3llZVNhbGFyeShlbnRyeS51c2VySWQsIGVudHJ5RGF0ZSk7XHJcbiAgICAgIGlmICghc2FsYXJ5KSBjb250aW51ZTtcclxuXHJcbiAgICAgIGNvbnN0IHByb2plY3QgPSBwcm9qZWN0cy5maW5kKHAgPT4gcC5pZCA9PT0gZW50cnkucHJvamVjdElkKTtcclxuICAgICAgaWYgKCFwcm9qZWN0KSBjb250aW51ZTtcclxuXHJcbiAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSBhd2FpdCB0aGlzLmdldFByb2plY3RNdWx0aXBsaWVyKGVudHJ5LnByb2plY3RJZCwgZW50cnlEYXRlKTtcclxuICAgICAgY29uc3QgcHJvamVjdE11bHRpcGxpZXIgPSBtdWx0aXBsaWVyPy5tdWx0aXBsaWVyIHx8IDEuMDtcclxuXHJcbiAgICAgIGNvbnN0IGR1cmF0aW9uTXMgPSB0aGlzLnBhcnNlRHVyYXRpb24oZW50cnkudGltZUludGVydmFsLmR1cmF0aW9uKTtcclxuICAgICAgY29uc3QgaG91cnMgPSBkdXJhdGlvbk1zIC8gKDEwMDAgKiA2MCAqIDYwKTtcclxuICAgICAgY29uc3QgYmlsbGFibGVIb3VycyA9IGVudHJ5LmJpbGxhYmxlID8gaG91cnMgOiAwO1xyXG4gICAgICBjb25zdCBub25CaWxsYWJsZUhvdXJzID0gZW50cnkuYmlsbGFibGUgPyAwIDogaG91cnM7XHJcblxyXG4gICAgICBjb25zdCB0b3RhbENvc3QgPSBob3VycyAqIHNhbGFyeS5ob3VybHlSYXRlO1xyXG4gICAgICBjb25zdCBiaWxsYWJsZVZhbHVlID0gYmlsbGFibGVIb3VycyAqIHNhbGFyeS5ob3VybHlSYXRlICogcHJvamVjdE11bHRpcGxpZXI7XHJcbiAgICAgIGNvbnN0IGVmZmljaWVuY3kgPSBob3VycyA+IDAgPyBiaWxsYWJsZUhvdXJzIC8gaG91cnMgOiAwO1xyXG5cclxuICAgICAgY29uc3QgdGltZUVudHJ5ID0ge1xyXG4gICAgICAgIGVtcGxveWVlSWQ6IGVudHJ5LnVzZXJJZCxcclxuICAgICAgICBlbXBsb3llZU5hbWU6IHVzZXIubmFtZSxcclxuICAgICAgICBwcm9qZWN0SWQ6IGVudHJ5LnByb2plY3RJZCxcclxuICAgICAgICBwcm9qZWN0TmFtZTogcHJvamVjdC5uYW1lLFxyXG4gICAgICAgIGRhdGU6IGVudHJ5RGF0ZSxcclxuICAgICAgICBob3VycyxcclxuICAgICAgICBiaWxsYWJsZUhvdXJzLFxyXG4gICAgICAgIG5vbkJpbGxhYmxlSG91cnMsXHJcbiAgICAgICAgaG91cmx5UmF0ZTogc2FsYXJ5LmhvdXJseVJhdGUsXHJcbiAgICAgICAgcHJvamVjdE11bHRpcGxpZXIsXHJcbiAgICAgICAgdG90YWxDb3N0LFxyXG4gICAgICAgIGJpbGxhYmxlVmFsdWUsXHJcbiAgICAgICAgZWZmaWNpZW5jeSxcclxuICAgICAgICBkZXNjcmlwdGlvbjogZW50cnkuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgdGFnczogZW50cnkudGFncy5tYXAodGFnID0+IHRhZy5uYW1lKVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gU2F2ZSB0byBkYXRhYmFzZVxyXG4gICAgICBhd2FpdCBzYXZlRW1wbG95ZWVUaW1lRW50cnkodGltZUVudHJ5KTtcclxuXHJcbiAgICAgIGVtcGxveWVlVGltZUVudHJpZXMucHVzaCh0aW1lRW50cnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlbXBsb3llZVRpbWVFbnRyaWVzO1xyXG4gIH1cclxuXHJcbiAgLy8gUHJvZml0YWJpbGl0eSBBbmFseXNpc1xyXG4gIGFzeW5jIGdlbmVyYXRlUHJvamVjdFByb2ZpdGFiaWxpdHlSZXBvcnQoXHJcbiAgICBwcm9qZWN0SWQ6IHN0cmluZyxcclxuICAgIHN0YXJ0RGF0ZTogc3RyaW5nLFxyXG4gICAgZW5kRGF0ZTogc3RyaW5nLFxyXG4gICAgZW1wbG95ZWVUaW1lRW50cmllczogRW1wbG95ZWVUaW1lRW50cnlbXSxcclxuICAgIHJldmVudWU6IG51bWJlclxyXG4gICk6IFByb21pc2U8UHJvamVjdFByb2ZpdGFiaWxpdHlSZXBvcnQ+IHtcclxuICAgIGNvbnN0IHByb2plY3RFbnRyaWVzID0gZW1wbG95ZWVUaW1lRW50cmllcy5maWx0ZXIoZW50cnkgPT4gXHJcbiAgICAgIGVudHJ5LnByb2plY3RJZCA9PT0gcHJvamVjdElkICYmXHJcbiAgICAgIGVudHJ5LmRhdGUgPj0gc3RhcnREYXRlICYmXHJcbiAgICAgIGVudHJ5LmRhdGUgPD0gZW5kRGF0ZVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCB0b3RhbEhvdXJzID0gcHJvamVjdEVudHJpZXMucmVkdWNlKChzdW0sIGVudHJ5KSA9PiBzdW0gKyBlbnRyeS5ob3VycywgMCk7XHJcbiAgICBjb25zdCB0b3RhbEJpbGxhYmxlSG91cnMgPSBwcm9qZWN0RW50cmllcy5yZWR1Y2UoKHN1bSwgZW50cnkpID0+IHN1bSArIGVudHJ5LmJpbGxhYmxlSG91cnMsIDApO1xyXG4gICAgY29uc3QgdG90YWxDb3N0ID0gcHJvamVjdEVudHJpZXMucmVkdWNlKChzdW0sIGVudHJ5KSA9PiBzdW0gKyBlbnRyeS50b3RhbENvc3QsIDApO1xyXG4gICAgY29uc3QgdG90YWxCaWxsYWJsZVZhbHVlID0gcHJvamVjdEVudHJpZXMucmVkdWNlKChzdW0sIGVudHJ5KSA9PiBzdW0gKyBlbnRyeS5iaWxsYWJsZVZhbHVlLCAwKTtcclxuXHJcbiAgICBjb25zdCBncm9zc1Byb2ZpdCA9IHJldmVudWUgLSB0b3RhbENvc3Q7XHJcbiAgICBjb25zdCBwcm9maXRNYXJnaW4gPSByZXZlbnVlID4gMCA/IChncm9zc1Byb2ZpdCAvIHJldmVudWUpICogMTAwIDogMDtcclxuICAgIGNvbnN0IGF2ZXJhZ2VNdWx0aXBsaWVyID0gdG90YWxCaWxsYWJsZUhvdXJzID4gMCA/IHRvdGFsQmlsbGFibGVWYWx1ZSAvICh0b3RhbEJpbGxhYmxlSG91cnMgKiBwcm9qZWN0RW50cmllc1swXT8uaG91cmx5UmF0ZSB8fCAxKSA6IDA7XHJcblxyXG4gICAgLy8gRW1wbG95ZWUgYnJlYWtkb3duXHJcbiAgICBjb25zdCBlbXBsb3llZUJyZWFrZG93biA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XHJcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHByb2plY3RFbnRyaWVzKSB7XHJcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gZW1wbG95ZWVCcmVha2Rvd24uZ2V0KGVudHJ5LmVtcGxveWVlSWQpO1xyXG4gICAgICBpZiAoZXhpc3RpbmcpIHtcclxuICAgICAgICBleGlzdGluZy5ob3VycyArPSBlbnRyeS5ob3VycztcclxuICAgICAgICBleGlzdGluZy5jb3N0ICs9IGVudHJ5LnRvdGFsQ29zdDtcclxuICAgICAgICBleGlzdGluZy5iaWxsYWJsZVZhbHVlICs9IGVudHJ5LmJpbGxhYmxlVmFsdWU7XHJcbiAgICAgICAgZXhpc3RpbmcuZWZmaWNpZW5jeSA9IGV4aXN0aW5nLmhvdXJzID4gMCA/IGV4aXN0aW5nLmJpbGxhYmxlVmFsdWUgLyAoZXhpc3RpbmcuaG91cnMgKiBlbnRyeS5ob3VybHlSYXRlKSA6IDA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZW1wbG95ZWVCcmVha2Rvd24uc2V0KGVudHJ5LmVtcGxveWVlSWQsIHtcclxuICAgICAgICAgIGVtcGxveWVlSWQ6IGVudHJ5LmVtcGxveWVlSWQsXHJcbiAgICAgICAgICBlbXBsb3llZU5hbWU6IGVudHJ5LmVtcGxveWVlTmFtZSxcclxuICAgICAgICAgIGhvdXJzOiBlbnRyeS5ob3VycyxcclxuICAgICAgICAgIGNvc3Q6IGVudHJ5LnRvdGFsQ29zdCxcclxuICAgICAgICAgIGJpbGxhYmxlVmFsdWU6IGVudHJ5LmJpbGxhYmxlVmFsdWUsXHJcbiAgICAgICAgICBlZmZpY2llbmN5OiBlbnRyeS5lZmZpY2llbmN5XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBNb250aGx5IGJyZWFrZG93blxyXG4gICAgY29uc3QgbW9udGhseUJyZWFrZG93biA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XHJcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHByb2plY3RFbnRyaWVzKSB7XHJcbiAgICAgIGNvbnN0IG1vbnRoID0gZW50cnkuZGF0ZS5zdWJzdHJpbmcoMCwgNyk7IC8vIFlZWVktTU1cclxuICAgICAgY29uc3QgZXhpc3RpbmcgPSBtb250aGx5QnJlYWtkb3duLmdldChtb250aCk7XHJcbiAgICAgIGlmIChleGlzdGluZykge1xyXG4gICAgICAgIGV4aXN0aW5nLmhvdXJzICs9IGVudHJ5LmhvdXJzO1xyXG4gICAgICAgIGV4aXN0aW5nLmNvc3QgKz0gZW50cnkudG90YWxDb3N0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG1vbnRobHlCcmVha2Rvd24uc2V0KG1vbnRoLCB7XHJcbiAgICAgICAgICBtb250aCxcclxuICAgICAgICAgIGhvdXJzOiBlbnRyeS5ob3VycyxcclxuICAgICAgICAgIGNvc3Q6IGVudHJ5LnRvdGFsQ29zdCxcclxuICAgICAgICAgIHJldmVudWU6IDAsIC8vIFRoaXMgd291bGQgbmVlZCB0byBiZSBjYWxjdWxhdGVkIGZyb20gYmlsbGluZyBkYXRhXHJcbiAgICAgICAgICBwcm9maXQ6IDBcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHByb2plY3RJZCxcclxuICAgICAgcHJvamVjdE5hbWU6IHByb2plY3RFbnRyaWVzWzBdPy5wcm9qZWN0TmFtZSB8fCAnVW5rbm93biBQcm9qZWN0JyxcclxuICAgICAgcGVyaW9kOiB7IHN0YXJ0OiBzdGFydERhdGUsIGVuZDogZW5kRGF0ZSB9LFxyXG4gICAgICB0b3RhbEhvdXJzLFxyXG4gICAgICB0b3RhbEJpbGxhYmxlSG91cnMsXHJcbiAgICAgIHRvdGFsQ29zdCxcclxuICAgICAgdG90YWxSZXZlbnVlOiByZXZlbnVlLFxyXG4gICAgICBncm9zc1Byb2ZpdCxcclxuICAgICAgcHJvZml0TWFyZ2luLFxyXG4gICAgICBhdmVyYWdlTXVsdGlwbGllcixcclxuICAgICAgZW1wbG95ZWVCcmVha2Rvd246IEFycmF5LmZyb20oZW1wbG95ZWVCcmVha2Rvd24udmFsdWVzKCkpLFxyXG4gICAgICBtb250aGx5QnJlYWtkb3duOiBBcnJheS5mcm9tKG1vbnRobHlCcmVha2Rvd24udmFsdWVzKCkpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2VuZXJhdGVFbXBsb3llZVByb2ZpdGFiaWxpdHlSZXBvcnQoXHJcbiAgICBlbXBsb3llZUlkOiBzdHJpbmcsXHJcbiAgICBzdGFydERhdGU6IHN0cmluZyxcclxuICAgIGVuZERhdGU6IHN0cmluZyxcclxuICAgIGVtcGxveWVlVGltZUVudHJpZXM6IEVtcGxveWVlVGltZUVudHJ5W11cclxuICApOiBQcm9taXNlPEVtcGxveWVlUHJvZml0YWJpbGl0eVJlcG9ydD4ge1xyXG4gICAgY29uc3QgZW1wbG95ZWVFbnRyaWVzID0gZW1wbG95ZWVUaW1lRW50cmllcy5maWx0ZXIoZW50cnkgPT4gXHJcbiAgICAgIGVudHJ5LmVtcGxveWVlSWQgPT09IGVtcGxveWVlSWQgJiZcclxuICAgICAgZW50cnkuZGF0ZSA+PSBzdGFydERhdGUgJiZcclxuICAgICAgZW50cnkuZGF0ZSA8PSBlbmREYXRlXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IHRvdGFsSG91cnMgPSBlbXBsb3llZUVudHJpZXMucmVkdWNlKChzdW0sIGVudHJ5KSA9PiBzdW0gKyBlbnRyeS5ob3VycywgMCk7XHJcbiAgICBjb25zdCB0b3RhbEJpbGxhYmxlSG91cnMgPSBlbXBsb3llZUVudHJpZXMucmVkdWNlKChzdW0sIGVudHJ5KSA9PiBzdW0gKyBlbnRyeS5iaWxsYWJsZUhvdXJzLCAwKTtcclxuICAgIGNvbnN0IHRvdGFsQ29zdCA9IGVtcGxveWVlRW50cmllcy5yZWR1Y2UoKHN1bSwgZW50cnkpID0+IHN1bSArIGVudHJ5LnRvdGFsQ29zdCwgMCk7XHJcbiAgICBjb25zdCB0b3RhbEJpbGxhYmxlVmFsdWUgPSBlbXBsb3llZUVudHJpZXMucmVkdWNlKChzdW0sIGVudHJ5KSA9PiBzdW0gKyBlbnRyeS5iaWxsYWJsZVZhbHVlLCAwKTtcclxuICAgIGNvbnN0IGVmZmljaWVuY3kgPSB0b3RhbEhvdXJzID4gMCA/IHRvdGFsQmlsbGFibGVIb3VycyAvIHRvdGFsSG91cnMgOiAwO1xyXG4gICAgY29uc3QgYXZlcmFnZUhvdXJseVJhdGUgPSB0b3RhbEhvdXJzID4gMCA/IHRvdGFsQ29zdCAvIHRvdGFsSG91cnMgOiAwO1xyXG5cclxuICAgIC8vIFByb2plY3QgYnJlYWtkb3duXHJcbiAgICBjb25zdCBwcm9qZWN0QnJlYWtkb3duID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcclxuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW1wbG95ZWVFbnRyaWVzKSB7XHJcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gcHJvamVjdEJyZWFrZG93bi5nZXQoZW50cnkucHJvamVjdElkKTtcclxuICAgICAgaWYgKGV4aXN0aW5nKSB7XHJcbiAgICAgICAgZXhpc3RpbmcuaG91cnMgKz0gZW50cnkuaG91cnM7XHJcbiAgICAgICAgZXhpc3RpbmcuY29zdCArPSBlbnRyeS50b3RhbENvc3Q7XHJcbiAgICAgICAgZXhpc3RpbmcuYmlsbGFibGVWYWx1ZSArPSBlbnRyeS5iaWxsYWJsZVZhbHVlO1xyXG4gICAgICAgIGV4aXN0aW5nLmVmZmljaWVuY3kgPSBleGlzdGluZy5ob3VycyA+IDAgPyBleGlzdGluZy5iaWxsYWJsZVZhbHVlIC8gKGV4aXN0aW5nLmhvdXJzICogZW50cnkuaG91cmx5UmF0ZSkgOiAwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHByb2plY3RCcmVha2Rvd24uc2V0KGVudHJ5LnByb2plY3RJZCwge1xyXG4gICAgICAgICAgcHJvamVjdElkOiBlbnRyeS5wcm9qZWN0SWQsXHJcbiAgICAgICAgICBwcm9qZWN0TmFtZTogZW50cnkucHJvamVjdE5hbWUsXHJcbiAgICAgICAgICBob3VyczogZW50cnkuaG91cnMsXHJcbiAgICAgICAgICBjb3N0OiBlbnRyeS50b3RhbENvc3QsXHJcbiAgICAgICAgICBiaWxsYWJsZVZhbHVlOiBlbnRyeS5iaWxsYWJsZVZhbHVlLFxyXG4gICAgICAgICAgZWZmaWNpZW5jeTogZW50cnkuZWZmaWNpZW5jeVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZW1wbG95ZWVJZCxcclxuICAgICAgZW1wbG95ZWVOYW1lOiBlbXBsb3llZUVudHJpZXNbMF0/LmVtcGxveWVlTmFtZSB8fCAnVW5rbm93biBFbXBsb3llZScsXHJcbiAgICAgIHBlcmlvZDogeyBzdGFydDogc3RhcnREYXRlLCBlbmQ6IGVuZERhdGUgfSxcclxuICAgICAgdG90YWxIb3VycyxcclxuICAgICAgdG90YWxCaWxsYWJsZUhvdXJzLFxyXG4gICAgICB0b3RhbENvc3QsXHJcbiAgICAgIHRvdGFsQmlsbGFibGVWYWx1ZSxcclxuICAgICAgZWZmaWNpZW5jeSxcclxuICAgICAgYXZlcmFnZUhvdXJseVJhdGUsXHJcbiAgICAgIHByb2plY3RCcmVha2Rvd246IEFycmF5LmZyb20ocHJvamVjdEJyZWFrZG93bi52YWx1ZXMoKSlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBQYXlyb2xsIFN5c3RlbSBJbnRlZ3JhdGlvblxyXG4gIGFzeW5jIGNvbmZpZ3VyZVBheXJvbGxTeXN0ZW0oc3lzdGVtOiBQYXlyb2xsU3lzdGVtKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLnBheXJvbGxTeXN0ZW0gPSBzeXN0ZW07XHJcbiAgICBjb25zb2xlLmxvZyhgUGF5cm9sbCBzeXN0ZW0gY29uZmlndXJlZDogJHtzeXN0ZW0ubmFtZX1gKTtcclxuICB9XHJcblxyXG4gIC8vIEJhbWJvb0hSIEludGVncmF0aW9uXHJcbiAgYXN5bmMgY29uZmlndXJlQmFtYm9vSFIoY29uZmlnOiBCYW1ib29IUkNvbmZpZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdGhpcy5iYW1ib29ockNvbmZpZyA9IGNvbmZpZztcclxuICAgIF9jb25maWd1cmVCYW1ib29IUlNlcnZpY2UoY29uZmlnKTtcclxuICAgIFxyXG4gICAgLy8gU2F2ZSBjb25maWd1cmF0aW9uIHRvIGRhdGFiYXNlXHJcbiAgICBhd2FpdCBzYXZlQmFtYm9vSFJDb25maWcoe1xyXG4gICAgICBzdWJkb21haW46IGNvbmZpZy5zdWJkb21haW4sXHJcbiAgICAgIGFwaUtleTogY29uZmlnLmFwaUtleSxcclxuICAgICAgd2ViaG9va1NlY3JldDogY29uZmlnLndlYmhvb2tTZWNyZXRcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhgQmFtYm9vSFIgY29uZmlndXJlZCBmb3Igc3ViZG9tYWluOiAke2NvbmZpZy5zdWJkb21haW59YCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBpbXBvcnRTYWxhcmllc0Zyb21CYW1ib29IUigpOiBQcm9taXNlPFNhbGFyeUltcG9ydD4ge1xyXG4gICAgaWYgKCF0aGlzLmJhbWJvb2hyQ29uZmlnKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignQmFtYm9vSFIgbm90IGNvbmZpZ3VyZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBJbXBvcnQgZW1wbG95ZWVzIGZyb20gQmFtYm9vSFJcclxuICAgICAgY29uc3QgYmFtYm9vaHJFbXBsb3llZXMgPSBhd2FpdCBpbXBvcnRCYW1ib29IUkVtcGxveWVlcygpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgQmFtYm9vSFIgaW1wb3J0OiB1cHNlcnRpbmcgJHtiYW1ib29ockVtcGxveWVlcy5sZW5ndGh9IGVtcGxveWVlcyB0byBTdXBhYmFzZS9QcmlzbWFgKTtcclxuICAgICAgbGV0IGVtcGxveWVlU3VjY2VzcyA9IDA7XHJcbiAgICAgIGNvbnN0IGVtcGxveWVlRXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICBmb3IgKGNvbnN0IGVtcGxveWVlIG9mIGJhbWJvb2hyRW1wbG95ZWVzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMuYWRkRW1wbG95ZWUoZW1wbG95ZWUpO1xyXG4gICAgICAgICAgZW1wbG95ZWVTdWNjZXNzICs9IDE7XHJcbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdCYW1ib29IUiBlbXBsb3llZSB1cHNlcnQgZmFpbGVkOicsIHtcclxuICAgICAgICAgICAgaWQ6IGVtcGxveWVlLmlkLFxyXG4gICAgICAgICAgICBuYW1lOiBlbXBsb3llZS5uYW1lLFxyXG4gICAgICAgICAgICBlcnJvcjogZT8ubWVzc2FnZSB8fCBTdHJpbmcoZSlcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgZW1wbG95ZWVFcnJvcnMucHVzaChgZW1wOiR7ZW1wbG95ZWUuaWR9OiR7ZT8ubWVzc2FnZSB8fCBlfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSW1wb3J0IHNhbGFyaWVzIGZyb20gQmFtYm9vSFJcclxuICAgICAgY29uc3QgYmFtYm9vaHJTYWxhcmllcyA9IGF3YWl0IGltcG9ydEJhbWJvb0hSU2FsYXJpZXMoKTtcclxuICAgICAgY29uc29sZS5sb2coYEJhbWJvb0hSIGltcG9ydDogdXBzZXJ0aW5nICR7YmFtYm9vaHJTYWxhcmllcy5sZW5ndGh9IHNhbGFyaWVzIHRvIFN1cGFiYXNlL1ByaXNtYWApO1xyXG4gICAgICBsZXQgc2FsYXJ5U3VjY2VzcyA9IDA7XHJcbiAgICAgIGNvbnN0IHNhbGFyeUVycm9yczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgZm9yIChjb25zdCBzYWxhcnkgb2YgYmFtYm9vaHJTYWxhcmllcykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLmFkZFNhbGFyeShzYWxhcnkpO1xyXG4gICAgICAgICAgc2FsYXJ5U3VjY2VzcyArPSAxO1xyXG4gICAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignQmFtYm9vSFIgc2FsYXJ5IHVwc2VydCBmYWlsZWQ6Jywge1xyXG4gICAgICAgICAgICBlbXBsb3llZUlkOiBzYWxhcnkuZW1wbG95ZWVJZCxcclxuICAgICAgICAgICAgZWZmZWN0aXZlRGF0ZTogc2FsYXJ5LmVmZmVjdGl2ZURhdGUsXHJcbiAgICAgICAgICAgIGFubnVhbFNhbGFyeTogc2FsYXJ5LmFubnVhbFNhbGFyeSxcclxuICAgICAgICAgICAgaG91cmx5UmF0ZTogc2FsYXJ5LmhvdXJseVJhdGUsXHJcbiAgICAgICAgICAgIGVycm9yOiBlPy5tZXNzYWdlIHx8IFN0cmluZyhlKVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzYWxhcnlFcnJvcnMucHVzaChgc2FsOiR7c2FsYXJ5LmVtcGxveWVlSWR9OiR7c2FsYXJ5LmVmZmVjdGl2ZURhdGV9OiR7ZT8ubWVzc2FnZSB8fCBlfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYEJhbWJvb0hSIGltcG9ydCBjb21wbGV0ZWQ6IGVtcGxveWVlcyBvaz0ke2VtcGxveWVlU3VjY2Vzc30sIHNhbGFyaWVzIG9rPSR7c2FsYXJ5U3VjY2Vzc30sIGVtcEVycm9ycz0ke2VtcGxveWVlRXJyb3JzLmxlbmd0aH0sIHNhbEVycm9ycz0ke3NhbGFyeUVycm9ycy5sZW5ndGh9YCk7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHNvdXJjZTogJ2JhbWJvb2hyJyxcclxuICAgICAgICBpbXBvcnREYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgcmVjb3Jkc0ltcG9ydGVkOiBlbXBsb3llZVN1Y2Nlc3MgKyBzYWxhcnlTdWNjZXNzLFxyXG4gICAgICAgIGVycm9yczogWy4uLmVtcGxveWVlRXJyb3JzLCAuLi5zYWxhcnlFcnJvcnNdXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc291cmNlOiAnYmFtYm9vaHInLFxyXG4gICAgICAgIGltcG9ydERhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICByZWNvcmRzSW1wb3J0ZWQ6IDAsXHJcbiAgICAgICAgZXJyb3JzOiBbZXJyb3IubWVzc2FnZV1cclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGltcG9ydFNhbGFyaWVzRnJvbVBheXJvbGxTeXN0ZW0oKTogUHJvbWlzZTxTYWxhcnlJbXBvcnQ+IHtcclxuICAgIGlmICghdGhpcy5wYXlyb2xsU3lzdGVtKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcGF5cm9sbCBzeXN0ZW0gY29uZmlndXJlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnBheXJvbGxTeXN0ZW0udHlwZSA9PT0gJ2JhbWJvb2hyJyAmJiB0aGlzLmJhbWJvb2hyQ29uZmlnKSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmltcG9ydFNhbGFyaWVzRnJvbUJhbWJvb0hSKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhpcyB3b3VsZCBpbnRlZ3JhdGUgd2l0aCBvdGhlciBwYXlyb2xsIHN5c3RlbSBBUElzXHJcbiAgICAvLyBGb3Igbm93LCByZXR1cm4gYSBtb2NrIGltcG9ydFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc291cmNlOiAnYXBpJyBhcyBjb25zdCxcclxuICAgICAgaW1wb3J0RGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICByZWNvcmRzSW1wb3J0ZWQ6IDAsXHJcbiAgICAgIGVycm9yczogW2Ake3RoaXMucGF5cm9sbFN5c3RlbS50eXBlfSBpbnRlZ3JhdGlvbiBub3QgeWV0IGltcGxlbWVudGVkYF1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBVdGlsaXR5IE1ldGhvZHNcclxuICBwcml2YXRlIHBhcnNlRHVyYXRpb24oZHVyYXRpb246IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICBjb25zdCByZWdleCA9IC9QVCg/OihcXGQrKUgpPyg/OihcXGQrKU0pPyg/OihcXGQrKVMpPy87XHJcbiAgICBjb25zdCBtYXRjaCA9IGR1cmF0aW9uLm1hdGNoKHJlZ2V4KTtcclxuICAgIFxyXG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIDA7XHJcbiAgICBcclxuICAgIGNvbnN0IGhvdXJzID0gcGFyc2VJbnQobWF0Y2hbMV0gfHwgJzAnKTtcclxuICAgIGNvbnN0IG1pbnV0ZXMgPSBwYXJzZUludChtYXRjaFsyXSB8fCAnMCcpO1xyXG4gICAgY29uc3Qgc2Vjb25kcyA9IHBhcnNlSW50KG1hdGNoWzNdIHx8ICcwJyk7XHJcbiAgICBcclxuICAgIHJldHVybiAoaG91cnMgKiAzNjAwICsgbWludXRlcyAqIDYwICsgc2Vjb25kcykgKiAxMDAwO1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlSG91cmx5UmF0ZShhbm51YWxTYWxhcnk6IG51bWJlciwgd29ya0hvdXJzUGVyWWVhcjogbnVtYmVyID0gMjA4MCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gYW5udWFsU2FsYXJ5IC8gd29ya0hvdXJzUGVyWWVhcjtcclxuICB9XHJcblxyXG4gIC8vIE5vcm1hbGl6YXRpb24gaGVscGVycyB0byBjb252ZXJ0IFByaXNtYSByZXN1bHRzIHRvIGRvbWFpbiB0eXBlc1xyXG4gIHByaXZhdGUgbm9ybWFsaXplRW1wbG95ZWUoZGJFbXBsb3llZTogYW55KTogRW1wbG95ZWUge1xyXG4gICAgY29uc3Qgc3RhdHVzVmFsdWUgPSAoZGJFbXBsb3llZS5zdGF0dXMgfHwgJ2FjdGl2ZScpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCBub3JtYWxpemVkU3RhdHVzOiAnYWN0aXZlJyB8ICdpbmFjdGl2ZScgPVxyXG4gICAgICBzdGF0dXNWYWx1ZSA9PT0gJ2FjdGl2ZScgPyAnYWN0aXZlJyA6ICdpbmFjdGl2ZSc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogZGJFbXBsb3llZS5pZCxcclxuICAgICAgbmFtZTogZGJFbXBsb3llZS5uYW1lLFxyXG4gICAgICBlbWFpbDogZGJFbXBsb3llZS5lbWFpbCxcclxuICAgICAgc3RhdHVzOiBub3JtYWxpemVkU3RhdHVzLFxyXG4gICAgICBkZXBhcnRtZW50OiBkYkVtcGxveWVlLmRlcGFydG1lbnQgPz8gdW5kZWZpbmVkLFxyXG4gICAgICBwb3NpdGlvbjogZGJFbXBsb3llZS5wb3NpdGlvbiA/PyB1bmRlZmluZWQsXHJcbiAgICAgIGhpcmVEYXRlOiBkYkVtcGxveWVlLmhpcmVEYXRlLFxyXG4gICAgICB0ZXJtaW5hdGlvbkRhdGU6IGRiRW1wbG95ZWUudGVybWluYXRpb25EYXRlID8/IHVuZGVmaW5lZFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbm9ybWFsaXplU2FsYXJ5KGRiU2FsYXJ5OiBhbnkpOiBFbXBsb3llZVNhbGFyeSB7XHJcbiAgICBjb25zdCB0b051bWJlciA9ICh2OiBhbnkpID0+ICh2ICYmIHR5cGVvZiB2ID09PSAnb2JqZWN0JyAmJiAndG9OdW1iZXInIGluIHYgPyB2LnRvTnVtYmVyKCkgOiBOdW1iZXIodikpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZW1wbG95ZWVJZDogZGJTYWxhcnkuZW1wbG95ZWVJZCxcclxuICAgICAgZWZmZWN0aXZlRGF0ZTogZGJTYWxhcnkuZWZmZWN0aXZlRGF0ZSxcclxuICAgICAgZW5kRGF0ZTogZGJTYWxhcnkuZW5kRGF0ZSA/PyB1bmRlZmluZWQsXHJcbiAgICAgIGFubnVhbFNhbGFyeTogdG9OdW1iZXIoZGJTYWxhcnkuYW5udWFsU2FsYXJ5KSxcclxuICAgICAgaG91cmx5UmF0ZTogdG9OdW1iZXIoZGJTYWxhcnkuaG91cmx5UmF0ZSksXHJcbiAgICAgIGN1cnJlbmN5OiBkYlNhbGFyeS5jdXJyZW5jeSB8fCAnVVNEJyxcclxuICAgICAgbm90ZXM6IGRiU2FsYXJ5Lm5vdGVzID8/IHVuZGVmaW5lZFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbm9ybWFsaXplUHJvamVjdE11bHRpcGxpZXIoZGJNdWx0aXBsaWVyOiBhbnkpOiBQcm9qZWN0TXVsdGlwbGllciB7XHJcbiAgICBjb25zdCB0b051bWJlciA9ICh2OiBhbnkpID0+ICh2ICYmIHR5cGVvZiB2ID09PSAnb2JqZWN0JyAmJiAndG9OdW1iZXInIGluIHYgPyB2LnRvTnVtYmVyKCkgOiBOdW1iZXIodikpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcHJvamVjdElkOiBkYk11bHRpcGxpZXIucHJvamVjdElkLFxyXG4gICAgICBwcm9qZWN0TmFtZTogZGJNdWx0aXBsaWVyLnByb2plY3ROYW1lLFxyXG4gICAgICBtdWx0aXBsaWVyOiB0b051bWJlcihkYk11bHRpcGxpZXIubXVsdGlwbGllciksXHJcbiAgICAgIGVmZmVjdGl2ZURhdGU6IGRiTXVsdGlwbGllci5lZmZlY3RpdmVEYXRlLFxyXG4gICAgICBlbmREYXRlOiBkYk11bHRpcGxpZXIuZW5kRGF0ZSA/PyB1bmRlZmluZWQsXHJcbiAgICAgIG5vdGVzOiBkYk11bHRpcGxpZXIubm90ZXMgPz8gdW5kZWZpbmVkXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gRGF0YSBFeHBvcnQvSW1wb3J0XHJcbiAgICBhc3luYyBleHBvcnREYXRhKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBlbXBsb3llZXM6IEFycmF5LmZyb20odGhpcy5lbXBsb3llZXMudmFsdWVzKCkpLFxyXG4gICAgICBzYWxhcmllczogQXJyYXkuZnJvbSh0aGlzLnNhbGFyaWVzLmVudHJpZXMoKSksXHJcbiAgICAgIG11bHRpcGxpZXJzOiBBcnJheS5mcm9tKHRoaXMubXVsdGlwbGllcnMuZW50cmllcygpKSxcclxuICAgICAgcGF5cm9sbFN5c3RlbTogdGhpcy5wYXlyb2xsU3lzdGVtLFxyXG4gICAgICBiYW1ib29ockNvbmZpZzogdGhpcy5iYW1ib29ockNvbmZpZ1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGltcG9ydERhdGEoZGF0YTogYW55KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLmVtcGxveWVlcyA9IG5ldyBNYXAoZGF0YS5lbXBsb3llZXMubWFwKChlbXA6IEVtcGxveWVlKSA9PiBbZW1wLmlkLCBlbXBdKSk7XHJcbiAgICB0aGlzLnNhbGFyaWVzID0gbmV3IE1hcChkYXRhLnNhbGFyaWVzKTtcclxuICAgIHRoaXMubXVsdGlwbGllcnMgPSBuZXcgTWFwKGRhdGEubXVsdGlwbGllcnMpO1xyXG4gICAgdGhpcy5wYXlyb2xsU3lzdGVtID0gZGF0YS5wYXlyb2xsU3lzdGVtO1xyXG4gICAgdGhpcy5iYW1ib29ockNvbmZpZyA9IGRhdGEuYmFtYm9vaHJDb25maWc7XHJcblxyXG4gICAgaWYgKHRoaXMuYmFtYm9vaHJDb25maWcpIHtcclxuICAgICAgX2NvbmZpZ3VyZUJhbWJvb0hSU2VydmljZSh0aGlzLmJhbWJvb2hyQ29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygnUGF5cm9sbCBkYXRhIGltcG9ydGVkIHN1Y2Nlc3NmdWxseScpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQ3JlYXRlIHNpbmdsZXRvbiBpbnN0YW5jZVxyXG5leHBvcnQgY29uc3QgcGF5cm9sbFNlcnZpY2UgPSBuZXcgUGF5cm9sbFNlcnZpY2UoKTtcclxuXHJcbi8vIEV4cG9ydCBjb252ZW5pZW5jZSBmdW5jdGlvbnNcclxuZXhwb3J0IGNvbnN0IGFkZEVtcGxveWVlID0gYXN5bmMgKGVtcGxveWVlOiBFbXBsb3llZSkgPT4ge1xyXG4gIGF3YWl0IHBheXJvbGxTZXJ2aWNlLmFkZEVtcGxveWVlKGVtcGxveWVlKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRTYWxhcnkgPSBhc3luYyAoc2FsYXJ5OiBFbXBsb3llZVNhbGFyeSkgPT4ge1xyXG4gIGF3YWl0IHBheXJvbGxTZXJ2aWNlLmFkZFNhbGFyeShzYWxhcnkpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZFByb2plY3RNdWx0aXBsaWVyID0gYXN5bmMgKG11bHRpcGxpZXI6IFByb2plY3RNdWx0aXBsaWVyKSA9PiB7XHJcbiAgYXdhaXQgcGF5cm9sbFNlcnZpY2UuYWRkUHJvamVjdE11bHRpcGxpZXIobXVsdGlwbGllcik7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcHJvY2Vzc1RpbWVFbnRyaWVzID0gYXN5bmMgKFxyXG4gIGNsb2NraWZ5RW50cmllczogQ2xvY2tpZnlUaW1lRW50cnlbXSxcclxuICBjbG9ja2lmeVVzZXJzOiBDbG9ja2lmeVVzZXJbXSxcclxuICBwcm9qZWN0czogYW55W11cclxuKSA9PiB7XHJcbiAgcmV0dXJuIGF3YWl0IHBheXJvbGxTZXJ2aWNlLnByb2Nlc3NUaW1lRW50cmllcyhjbG9ja2lmeUVudHJpZXMsIGNsb2NraWZ5VXNlcnMsIHByb2plY3RzKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVByb2plY3RQcm9maXRhYmlsaXR5UmVwb3J0ID0gYXN5bmMgKFxyXG4gIHByb2plY3RJZDogc3RyaW5nLFxyXG4gIHN0YXJ0RGF0ZTogc3RyaW5nLFxyXG4gIGVuZERhdGU6IHN0cmluZyxcclxuICBlbXBsb3llZVRpbWVFbnRyaWVzOiBFbXBsb3llZVRpbWVFbnRyeVtdLFxyXG4gIHJldmVudWU6IG51bWJlclxyXG4pID0+IHtcclxuICByZXR1cm4gYXdhaXQgcGF5cm9sbFNlcnZpY2UuZ2VuZXJhdGVQcm9qZWN0UHJvZml0YWJpbGl0eVJlcG9ydChcclxuICAgIHByb2plY3RJZCwgc3RhcnREYXRlLCBlbmREYXRlLCBlbXBsb3llZVRpbWVFbnRyaWVzLCByZXZlbnVlXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUVtcGxveWVlUHJvZml0YWJpbGl0eVJlcG9ydCA9IGFzeW5jIChcclxuICBlbXBsb3llZUlkOiBzdHJpbmcsXHJcbiAgc3RhcnREYXRlOiBzdHJpbmcsXHJcbiAgZW5kRGF0ZTogc3RyaW5nLFxyXG4gIGVtcGxveWVlVGltZUVudHJpZXM6IEVtcGxveWVlVGltZUVudHJ5W11cclxuKSA9PiB7XHJcbiAgcmV0dXJuIGF3YWl0IHBheXJvbGxTZXJ2aWNlLmdlbmVyYXRlRW1wbG95ZWVQcm9maXRhYmlsaXR5UmVwb3J0KFxyXG4gICAgZW1wbG95ZWVJZCwgc3RhcnREYXRlLCBlbmREYXRlLCBlbXBsb3llZVRpbWVFbnRyaWVzXHJcbiAgKTtcclxufTtcclxuXHJcbi8vIEJhbWJvb0hSIHNwZWNpZmljIGZ1bmN0aW9uc1xyXG5leHBvcnQgY29uc3QgY29uZmlndXJlQmFtYm9vSFIgPSBhc3luYyAoY29uZmlnOiBCYW1ib29IUkNvbmZpZykgPT4ge1xyXG4gIGF3YWl0IHBheXJvbGxTZXJ2aWNlLmNvbmZpZ3VyZUJhbWJvb0hSKGNvbmZpZyk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaW1wb3J0QmFtYm9vSFJEYXRhID0gYXN5bmMgKCkgPT4ge1xyXG4gIHJldHVybiBhd2FpdCBwYXlyb2xsU2VydmljZS5pbXBvcnRTYWxhcmllc0Zyb21CYW1ib29IUigpO1xyXG59O1xyXG4iXSwibmFtZXMiOlsiY29uZmlndXJlQmFtYm9vSFIiLCJfY29uZmlndXJlQmFtYm9vSFJTZXJ2aWNlIiwiaW1wb3J0QmFtYm9vSFJFbXBsb3llZXMiLCJpbXBvcnRCYW1ib29IUlNhbGFyaWVzIiwic2F2ZUVtcGxveWVlIiwic2F2ZUVtcGxveWVlU2FsYXJ5Iiwic2F2ZVByb2plY3RNdWx0aXBsaWVyIiwic2F2ZUVtcGxveWVlVGltZUVudHJ5IiwiZ2V0QWxsRW1wbG95ZWVzIiwiZGJHZXRBbGxFbXBsb3llZXMiLCJnZXRBbGxFbXBsb3llZVNhbGFyaWVzIiwiZGJHZXRBbGxFbXBsb3llZVNhbGFyaWVzIiwiZ2V0QWxsUHJvamVjdE11bHRpcGxpZXJzIiwiZGJHZXRBbGxQcm9qZWN0TXVsdGlwbGllcnMiLCJzYXZlQmFtYm9vSFJDb25maWciLCJQYXlyb2xsU2VydmljZSIsImNvbnN0cnVjdG9yIiwiZW1wbG95ZWVzIiwiTWFwIiwic2FsYXJpZXMiLCJtdWx0aXBsaWVycyIsImNvbnNvbGUiLCJsb2ciLCJtYXBEYkVtcGxveWVlVG9Eb21haW4iLCJkYkVtcGxveWVlIiwic3RhdHVzVmFsdWUiLCJzdGF0dXMiLCJ0b0xvd2VyQ2FzZSIsInRvSXNvRGF0ZVN0cmluZyIsImQiLCJ1bmRlZmluZWQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJhc0RhdGUiLCJpc05hTiIsImdldFRpbWUiLCJpZCIsIm5hbWUiLCJlbWFpbCIsImRlcGFydG1lbnQiLCJwb3NpdGlvbiIsImhpcmVEYXRlIiwidGVybWluYXRpb25EYXRlIiwidG9OdW1iZXIiLCJ2YWx1ZSIsIm1heWJlRGVjaW1hbCIsInBhcnNlZCIsInBhcnNlRmxvYXQiLCJTdHJpbmciLCJOdW1iZXIiLCJtYXBEYlNhbGFyaWVzVG9Eb21haW4iLCJkYlNhbGFyaWVzIiwibWFwIiwicyIsImVtcGxveWVlSWQiLCJlZmZlY3RpdmVEYXRlIiwiZW5kRGF0ZSIsImFubnVhbFNhbGFyeSIsImhvdXJseVJhdGUiLCJjdXJyZW5jeSIsIm5vdGVzIiwibWFwRGJNdWx0aXBsaWVyc1RvRG9tYWluIiwiZGJNdWx0aXBsaWVycyIsIm0iLCJwcm9qZWN0SWQiLCJwcm9qZWN0TmFtZSIsIm11bHRpcGxpZXIiLCJhZGRFbXBsb3llZSIsImVtcGxveWVlIiwic2V0IiwiZ2V0RW1wbG95ZWUiLCJnZXQiLCJkYkVtcGxveWVlcyIsImZpbmQiLCJlbXAiLCJtYXBwZWQiLCJ1cGRhdGVFbXBsb3llZSIsInVwZGF0ZXMiLCJ1cGRhdGVkRW1wbG95ZWUiLCJhZGRTYWxhcnkiLCJzYWxhcnkiLCJlbXBsb3llZVNhbGFyaWVzIiwiY3VycmVudFNhbGFyeSIsInB1c2giLCJzb3J0IiwiYSIsImIiLCJnZXRFbXBsb3llZVNhbGFyeSIsImRhdGUiLCJsZW5ndGgiLCJlbXBsb3llZURiU2FsYXJpZXMiLCJmaWx0ZXIiLCJ0YXJnZXREYXRlIiwiZ2V0RW1wbG95ZWVTYWxhcnlIaXN0b3J5IiwiYWRkUHJvamVjdE11bHRpcGxpZXIiLCJwcm9qZWN0TXVsdGlwbGllcnMiLCJjdXJyZW50TXVsdGlwbGllciIsImdldFByb2plY3RNdWx0aXBsaWVyIiwicHJvamVjdERiTXVsdGlwbGllcnMiLCJnZXRQcm9qZWN0TXVsdGlwbGllckhpc3RvcnkiLCJwcm9jZXNzVGltZUVudHJpZXMiLCJjbG9ja2lmeUVudHJpZXMiLCJjbG9ja2lmeVVzZXJzIiwicHJvamVjdHMiLCJlbXBsb3llZVRpbWVFbnRyaWVzIiwidXNlck1hcCIsInVzZXIiLCJlbnRyeSIsInVzZXJJZCIsImVudHJ5RGF0ZSIsInRpbWVJbnRlcnZhbCIsInN0YXJ0Iiwic3BsaXQiLCJwcm9qZWN0IiwicCIsInByb2plY3RNdWx0aXBsaWVyIiwiZHVyYXRpb25NcyIsInBhcnNlRHVyYXRpb24iLCJkdXJhdGlvbiIsImhvdXJzIiwiYmlsbGFibGVIb3VycyIsImJpbGxhYmxlIiwibm9uQmlsbGFibGVIb3VycyIsInRvdGFsQ29zdCIsImJpbGxhYmxlVmFsdWUiLCJlZmZpY2llbmN5IiwidGltZUVudHJ5IiwiZW1wbG95ZWVOYW1lIiwiZGVzY3JpcHRpb24iLCJ0YWdzIiwidGFnIiwiZ2VuZXJhdGVQcm9qZWN0UHJvZml0YWJpbGl0eVJlcG9ydCIsInN0YXJ0RGF0ZSIsInJldmVudWUiLCJwcm9qZWN0RW50cmllcyIsInRvdGFsSG91cnMiLCJyZWR1Y2UiLCJzdW0iLCJ0b3RhbEJpbGxhYmxlSG91cnMiLCJ0b3RhbEJpbGxhYmxlVmFsdWUiLCJncm9zc1Byb2ZpdCIsInByb2ZpdE1hcmdpbiIsImF2ZXJhZ2VNdWx0aXBsaWVyIiwiZW1wbG95ZWVCcmVha2Rvd24iLCJleGlzdGluZyIsImNvc3QiLCJtb250aGx5QnJlYWtkb3duIiwibW9udGgiLCJzdWJzdHJpbmciLCJwcm9maXQiLCJwZXJpb2QiLCJlbmQiLCJ0b3RhbFJldmVudWUiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJnZW5lcmF0ZUVtcGxveWVlUHJvZml0YWJpbGl0eVJlcG9ydCIsImVtcGxveWVlRW50cmllcyIsImF2ZXJhZ2VIb3VybHlSYXRlIiwicHJvamVjdEJyZWFrZG93biIsImNvbmZpZ3VyZVBheXJvbGxTeXN0ZW0iLCJzeXN0ZW0iLCJwYXlyb2xsU3lzdGVtIiwiY29uZmlnIiwiYmFtYm9vaHJDb25maWciLCJzdWJkb21haW4iLCJhcGlLZXkiLCJ3ZWJob29rU2VjcmV0IiwiaW1wb3J0U2FsYXJpZXNGcm9tQmFtYm9vSFIiLCJFcnJvciIsImJhbWJvb2hyRW1wbG95ZWVzIiwiZW1wbG95ZWVTdWNjZXNzIiwiZW1wbG95ZWVFcnJvcnMiLCJlIiwiZXJyb3IiLCJtZXNzYWdlIiwiYmFtYm9vaHJTYWxhcmllcyIsInNhbGFyeVN1Y2Nlc3MiLCJzYWxhcnlFcnJvcnMiLCJzb3VyY2UiLCJpbXBvcnREYXRlIiwicmVjb3Jkc0ltcG9ydGVkIiwiZXJyb3JzIiwiaW1wb3J0U2FsYXJpZXNGcm9tUGF5cm9sbFN5c3RlbSIsInR5cGUiLCJyZWdleCIsIm1hdGNoIiwicGFyc2VJbnQiLCJtaW51dGVzIiwic2Vjb25kcyIsImNhbGN1bGF0ZUhvdXJseVJhdGUiLCJ3b3JrSG91cnNQZXJZZWFyIiwibm9ybWFsaXplRW1wbG95ZWUiLCJub3JtYWxpemVkU3RhdHVzIiwibm9ybWFsaXplU2FsYXJ5IiwiZGJTYWxhcnkiLCJ2Iiwibm9ybWFsaXplUHJvamVjdE11bHRpcGxpZXIiLCJkYk11bHRpcGxpZXIiLCJleHBvcnREYXRhIiwiZW50cmllcyIsImltcG9ydERhdGEiLCJkYXRhIiwicGF5cm9sbFNlcnZpY2UiLCJpbXBvcnRCYW1ib29IUkRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/payroll.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayroll%2Fbamboohr%2Froute&page=%2Fapi%2Fpayroll%2Fbamboohr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayroll%2Fbamboohr%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();