"use strict";(()=>{var e={};e.id=128,e.ids=[128],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},81243:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>_,patchFetch:()=>x,requestAsyncStorage:()=>j,routeModule:()=>g,serverHooks:()=>y,staticGenerationAsyncStorage:()=>h});var r={};s.r(r),s.d(r,{DELETE:()=>m,GET:()=>u,POST:()=>d,dynamic:()=>p});var a=s(49303),o=s(88716),n=s(60670),c=s(87070),i=s(52663),l=s(24544);let p="force-dynamic";async function u(){try{if(!await (0,l.Xp)())return console.log("Tables do not exist yet, returning empty project assignments"),c.NextResponse.json({});let e=(await i.Z.projectAssignment.findMany()).reduce((e,t)=>(e[t.projectId]=t.managerId,e),{});return c.NextResponse.json(e)}catch(e){if(console.error("Error fetching project assignments:",e),"P2021"===e.code||e.message?.includes("does not exist"))return console.log("Tables do not exist, returning empty project assignments"),c.NextResponse.json({});return c.NextResponse.json({error:"Failed to fetch project assignments"},{status:500})}}async function d(e){let{projectId:t,managerId:s}=await e.json();try{return await (0,l.Xp)()||(console.log("Tables do not exist yet, but Prisma Accelerate will create them on first insert"),console.log("Attempting to create table by inserting data...")),await i.Z.projectAssignment.upsert({where:{projectId:t},update:{managerId:s},create:{projectId:t,managerId:s}}),c.NextResponse.json({success:!0})}catch(e){if(console.error("Error updating project assignment:",e),e instanceof Error&&(e.message?.includes("does not exist")||"code"in e&&"P2021"===e.code)){console.log("Table does not exist, attempting to create schema...");try{return await i.Z.projectAssignment.create({data:{projectId:"__test__",managerId:"__test__"}}),await i.Z.projectAssignment.deleteMany({where:{projectId:"__test__"}}),await i.Z.projectAssignment.upsert({where:{projectId:t},update:{managerId:s},create:{projectId:t,managerId:s}}),c.NextResponse.json({success:!0})}catch(e){return console.error("Failed to create table:",e),c.NextResponse.json({error:"Database schema not ready. Please run database setup first."},{status:500})}}return c.NextResponse.json({error:"Failed to update project assignment"},{status:500})}}async function m(e){let{projectId:t}=await e.json();try{return await i.Z.projectAssignment.delete({where:{projectId:t}}),c.NextResponse.json({success:!0})}catch(e){return console.error("Error removing project assignment:",e),c.NextResponse.json({error:"Failed to remove project assignment"},{status:500})}}let g=new a.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/project-assignments/route",pathname:"/api/project-assignments",filename:"route",bundlePath:"app/api/project-assignments/route"},resolvedPagePath:"C:\\Users\\Jonathan\\Desktop\\Billing\\app\\api\\project-assignments\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:j,staticGenerationAsyncStorage:h,serverHooks:y}=g,_="/api/project-assignments/route";function x(){return(0,n.patchFetch)({serverHooks:y,staticGenerationAsyncStorage:h})}},24544:(e,t,s)=>{s.d(t,{Xp:()=>a,_B:()=>r.Z,eK:()=>o});var r=s(52663);async function a(){try{return await r.Z.projection.findFirst(),console.log("Database schema already exists"),!0}catch(e){if(console.log("Tables do not exist, attempting to create schema..."),"P2021"===e.code||e.message?.includes("does not exist"))try{return console.log("Attempting to create database schema..."),await r.Z.projection.create({data:{projectId:"__test__",month:"__test__",value:0}}),await r.Z.projection.deleteMany({where:{projectId:"__test__",month:"__test__"}}),console.log("Database schema created successfully"),!0}catch(e){return console.error("Failed to create database schema:",e),!1}return console.log("Tables do not exist, but Prisma Accelerate will create them automatically"),console.log("Note: With Prisma Accelerate, tables are created automatically when you first insert data"),!1}}async function o(){try{if(console.log("Creating database schema..."),await a())return console.log("Database schema creation completed successfully"),!0;return console.error("Database schema creation failed"),!1}catch(e){return console.error("Database schema creation failed:",e),!1}}},52663:(e,t,s)=>{s.d(t,{Z:()=>a});let r=require("@prisma/client"),a=globalThis.prisma??new r.PrismaClient({log:["error"]})}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[276,972],()=>s(81243));module.exports=r})();