"use strict";(()=>{var e={};e.id=8128,e.ids=[8128],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},81243:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>j,patchFetch:()=>b,requestAsyncStorage:()=>f,routeModule:()=>y,serverHooks:()=>h,staticGenerationAsyncStorage:()=>g});var o={};a.r(o),a.d(o,{DELETE:()=>m,GET:()=>u,POST:()=>d,dynamic:()=>p});var r=a(49303),n=a(88716),s=a(60670),i=a(87070),c=a(9487),l=a(24544);let p="force-dynamic";async function u(){try{if(!await (0,l.Xp)())return console.log("Tables do not exist yet, returning empty project assignments"),i.NextResponse.json({});let e=(await c.Z.projectAssignment.findMany()).reduce((e,t)=>(e[t.projectId]=t.managerId,e),{});return i.NextResponse.json(e)}catch(e){if(console.error("Error fetching project assignments:",e),"P2021"===e.code||e.message?.includes("does not exist"))return console.log("Tables do not exist, returning empty project assignments"),i.NextResponse.json({});return i.NextResponse.json({error:"Failed to fetch project assignments"},{status:500})}}async function d(e){let{projectId:t,managerId:a}=await e.json();try{return await (0,l.Xp)()||(console.log("Tables do not exist yet, but Prisma Accelerate will create them on first insert"),console.log("Attempting to create table by inserting data...")),await c.Z.projectAssignment.upsert({where:{projectId:t},update:{managerId:a},create:{projectId:t,managerId:a}}),i.NextResponse.json({success:!0})}catch(e){if(console.error("Error updating project assignment:",e),e instanceof Error&&(e.message?.includes("does not exist")||"code"in e&&"P2021"===e.code)){console.log("Table does not exist, attempting to create schema...");try{return await c.Z.projectAssignment.create({data:{projectId:"__test__",managerId:"__test__"}}),await c.Z.projectAssignment.deleteMany({where:{projectId:"__test__"}}),await c.Z.projectAssignment.upsert({where:{projectId:t},update:{managerId:a},create:{projectId:t,managerId:a}}),i.NextResponse.json({success:!0})}catch(e){return console.error("Failed to create table:",e),i.NextResponse.json({error:"Database schema not ready. Please run database setup first."},{status:500})}}return i.NextResponse.json({error:"Failed to update project assignment"},{status:500})}}async function m(e){let{projectId:t}=await e.json();try{return await c.Z.projectAssignment.delete({where:{projectId:t}}),i.NextResponse.json({success:!0})}catch(e){return console.error("Error removing project assignment:",e),i.NextResponse.json({error:"Failed to remove project assignment"},{status:500})}}let y=new r.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/project-assignments/route",pathname:"/api/project-assignments",filename:"route",bundlePath:"app/api/project-assignments/route"},resolvedPagePath:"C:\\Users\\Jonathan\\Desktop\\Billing\\app\\api\\project-assignments\\route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:f,staticGenerationAsyncStorage:g,serverHooks:h}=y,j="/api/project-assignments/route";function b(){return(0,s.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:g})}},24544:(e,t,a)=>{a.d(t,{DD:()=>d,K7:()=>c,XA:()=>u,Xp:()=>r,Y0:()=>m,_B:()=>o.Z,eC:()=>l,eK:()=>n,jv:()=>p,lA:()=>i,te:()=>s});var o=a(9487);async function r(){try{return await o.Z.$connect(),console.log("Database connection successful"),await o.Z.projection.findFirst(),console.log("Database schema already exists"),!0}catch(e){if(console.error("Database connection or schema check failed:",e),e.message?.includes("ENOTFOUND")||e.message?.includes("ECONNREFUSED"))return console.error("❌ Database connection failed - check your DATABASE_URL"),console.error("   Current DATABASE_URL:",process.env.DATABASE_URL?"Set":"Not set"),!1;if("P2021"===e.code||e.message?.includes("does not exist"))try{return console.log("Tables do not exist, attempting to create schema..."),await o.Z.projection.create({data:{projectId:"__test__",month:"__test__",value:0}}),await o.Z.projection.deleteMany({where:{projectId:"__test__",month:"__test__"}}),console.log("Database schema created successfully"),!0}catch(e){return console.error("Failed to create database schema:",e),!1}return console.log("Tables do not exist, but Prisma Accelerate will create them automatically"),console.log("Note: With Prisma Accelerate, tables are created automatically when you first insert data"),!1}finally{await o.Z.$disconnect()}}async function n(){try{if(console.log("Creating database schema..."),await r())return console.log("Database schema creation completed successfully"),!0;return console.error("Database schema creation failed"),!1}catch(e){return console.error("Database schema creation failed:",e),!1}}async function s(e){try{let t=await o.Z.bambooHRConfig.upsert({where:{subdomain:e.subdomain},update:{apiKey:e.apiKey,webhookSecret:e.webhookSecret,isActive:!0,lastSync:new Date,updatedAt:new Date},create:{subdomain:e.subdomain,apiKey:e.apiKey,webhookSecret:e.webhookSecret,isActive:!0,lastSync:new Date}});return console.log(`BambooHR config saved for subdomain: ${e.subdomain}`),t}catch(e){throw console.error("Error saving BambooHR config:",e),e}}async function i(e){try{console.log(`🔄 Attempting to upsert employee:`,JSON.stringify(e,null,2));let t=await o.Z.employee.upsert({where:{id:e.id},update:{name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hireDate:e.hireDate||null,terminationDate:e.terminationDate,updatedAt:new Date},create:{id:e.id,name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hireDate:e.hireDate||null,terminationDate:e.terminationDate}});return console.log(`✅ Employee saved: ${e.name} (${e.id})`),t}catch(t){if(console.error("❌ Error saving employee:",t),"P2025"===t.code){console.log(`🔄 Record not found, attempting to create employee: ${e.name} (${e.id})`);try{let t=await o.Z.employee.create({data:{id:e.id,name:e.name,email:e.email,status:e.status,department:e.department,position:e.position,hireDate:e.hireDate||null,terminationDate:e.terminationDate}});return console.log(`✅ Employee created: ${e.name} (${e.id})`),t}catch(e){throw console.error("❌ Error creating employee:",e),e}}throw t}}async function c(e){try{console.log(`🔄 Attempting to upsert employee salary:`,JSON.stringify(e,null,2));let t=await o.Z.employeeSalary.upsert({where:{employeeId_effectiveDate:{employeeId:e.employeeId,effectiveDate:e.effectiveDate}},update:{endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency,notes:e.notes,source:e.source,updatedAt:new Date},create:{employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency||"USD",notes:e.notes,source:e.source||"bamboohr"}});return console.log(`✅ Employee salary saved for ${e.employeeId} effective ${e.effectiveDate}`),t}catch(t){if(console.error("❌ Error saving employee salary:",t),"P2025"===t.code){console.log(`🔄 Record not found, attempting to create employee salary for ${e.employeeId} effective ${e.effectiveDate}`);try{let t=await o.Z.employeeSalary.create({data:{employeeId:e.employeeId,effectiveDate:e.effectiveDate,endDate:e.endDate,annualSalary:e.annualSalary,hourlyRate:e.hourlyRate,currency:e.currency||"USD",notes:e.notes,source:e.source||"bamboohr"}});return console.log(`✅ Employee salary created for ${e.employeeId} effective ${e.effectiveDate}`),t}catch(e){throw console.error("❌ Error creating employee salary:",e),e}}throw t}}async function l(e){try{let t=await o.Z.projectMultiplier.upsert({where:{projectId_effectiveDate:{projectId:e.projectId,effectiveDate:e.effectiveDate}},update:{projectName:e.projectName,multiplier:e.multiplier,endDate:e.endDate,notes:e.notes,updatedAt:new Date},create:{projectId:e.projectId,projectName:e.projectName,multiplier:e.multiplier,effectiveDate:e.effectiveDate,endDate:e.endDate,notes:e.notes}});return console.log(`Project multiplier saved for ${e.projectName} effective ${e.effectiveDate}`),t}catch(e){throw console.error("Error saving project multiplier:",e),e}}async function p(e){try{let t=await o.Z.employeeTimeEntry.upsert({where:{employeeId_projectId_date:{employeeId:e.employeeId,projectId:e.projectId,date:e.date}},update:{employeeName:e.employeeName,projectName:e.projectName,hours:e.hours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:e.hourlyRate,projectMultiplier:e.projectMultiplier,totalCost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency,description:e.description,tags:e.tags,updatedAt:new Date},create:{employeeId:e.employeeId,employeeName:e.employeeName,projectId:e.projectId,projectName:e.projectName,date:e.date,hours:e.hours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:e.hourlyRate,projectMultiplier:e.projectMultiplier,totalCost:e.totalCost,billableValue:e.billableValue,efficiency:e.efficiency,description:e.description,tags:e.tags}});return console.log(`Time entry saved for ${e.employeeName} on ${e.date}`),t}catch(e){throw console.error("Error saving time entry:",e),e}}async function u(){try{return await o.Z.employee.findMany({include:{salaries:!0}})}catch(e){throw console.error("Error getting all employees:",e),e}}async function d(){try{return await o.Z.employeeSalary.findMany({include:{employee:!0}})}catch(e){throw console.error("Error getting all employee salaries:",e),e}}async function m(){try{return await o.Z.projectMultiplier.findMany()}catch(e){throw console.error("Error getting all project multipliers:",e),e}}},9487:(e,t,a)=>{a.d(t,{Z:()=>r});var o=a(53524);let r=globalThis.prisma??new o.PrismaClient({log:["error"]})}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),o=t.X(0,[9276,5972],()=>a(81243));module.exports=o})();