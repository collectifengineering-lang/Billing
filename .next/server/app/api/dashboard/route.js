"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/dashboard/route";
exports.ids = ["app/api/dashboard/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdashboard%2Froute&page=%2Fapi%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdashboard%2Froute&page=%2Fapi%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Jonathan_Desktop_Billing_app_api_dashboard_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/dashboard/route.ts */ \"(rsc)/./app/api/dashboard/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/dashboard/route\",\n        pathname: \"/api/dashboard\",\n        filename: \"route\",\n        bundlePath: \"app/api/dashboard/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\Billing\\\\app\\\\api\\\\dashboard\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Jonathan_Desktop_Billing_app_api_dashboard_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/dashboard/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZkYXNoYm9hcmQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmRhc2hib2FyZCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmRhc2hib2FyZCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNvQjtBQUNqRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8/YTgxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxKb25hdGhhblxcXFxEZXNrdG9wXFxcXEJpbGxpbmdcXFxcYXBwXFxcXGFwaVxcXFxkYXNoYm9hcmRcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2Rhc2hib2FyZC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2Rhc2hib2FyZFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvZGFzaGJvYXJkL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcSm9uYXRoYW5cXFxcRGVza3RvcFxcXFxCaWxsaW5nXFxcXGFwcFxcXFxhcGlcXFxcZGFzaGJvYXJkXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9kYXNoYm9hcmQvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdashboard%2Froute&page=%2Fapi%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/dashboard/route.ts":
/*!************************************!*\
  !*** ./app/api/dashboard/route.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_payroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/payroll */ \"(rsc)/./lib/payroll.ts\");\n/* harmony import */ var _lib_clockify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/clockify */ \"(rsc)/./lib/clockify.ts\");\n/* harmony import */ var _lib_zoho__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/zoho */ \"(rsc)/./lib/zoho.ts\");\n\n\n\n\nasync function GET(request) {\n    // Helper function to parse ISO 8601 duration\n    function parseDuration(duration) {\n        const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/;\n        const match = duration.match(regex);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || \"0\");\n        const minutes = parseInt(match[2] || \"0\");\n        const seconds = parseInt(match[3] || \"0\");\n        return (hours * 3600 + minutes * 60 + seconds) * 1000;\n    }\n    try {\n        // Get current date info\n        const now = new Date();\n        const currentYear = now.getFullYear();\n        const currentMonth = now.getMonth();\n        // Calculate multipliers (this would come from your payroll system)\n        const currentYearMultiplier = 3.2;\n        const lastYearMultiplier = 3.0;\n        const twoYearsAgoMultiplier = 2.8;\n        // Calculate overhead rates (this would come from your financial data)\n        const currentYearOverhead = 0.28;\n        const lastYearOverhead = 0.30;\n        const twoYearsAgoOverhead = 0.32;\n        // Get employee count and revenue data\n        const employees = await _lib_payroll__WEBPACK_IMPORTED_MODULE_1__.payrollService.getAllEmployees();\n        const totalEmployees = employees.length;\n        // Calculate revenue per employee (this would come from your financial system)\n        const currentYearRevenuePerEmployee = 285000;\n        const lastYearRevenuePerEmployee = 265000;\n        const twoYearsAgoRevenuePerEmployee = 245000;\n        // Get project data from Zoho\n        let totalActiveProjects = 0;\n        let averageProjectSize = 125000;\n        let ytdProfit = 425000;\n        let lastYearYtdProfit = 385000;\n        try {\n            const projects = await _lib_zoho__WEBPACK_IMPORTED_MODULE_3__.zohoService.getProjects();\n            totalActiveProjects = projects.filter((p)=>p.status === \"active\").length;\n            // Calculate average project size (using budget amount as proxy)\n            const projectValues = projects.map((p)=>p.budget_amount || 0);\n            if (projectValues.length > 0) {\n                averageProjectSize = projectValues.reduce((sum, val)=>sum + val, 0) / projectValues.length;\n            }\n        } catch (error) {\n            console.log(\"Using default project data\");\n        }\n        // Get Clockify data for utilization rate\n        let utilizationRate = 0.85;\n        let averageBillingRate = 185;\n        try {\n            const clockifyUser = await _lib_clockify__WEBPACK_IMPORTED_MODULE_2__.clockifyService.getUser();\n            const clockifyProjects = await _lib_clockify__WEBPACK_IMPORTED_MODULE_2__.clockifyService.getProjects();\n            // Calculate utilization rate based on billable hours vs total hours\n            const timeEntries = await _lib_clockify__WEBPACK_IMPORTED_MODULE_2__.clockifyService.getAllTimeEntries(new Date(currentYear, 0, 1).toISOString(), now.toISOString());\n            const totalHours = timeEntries.reduce((sum, entry)=>sum + (parseDuration(entry.timeInterval.duration) || 0), 0) / 3600000; // Convert from milliseconds\n            const billableHours = timeEntries.filter((entry)=>entry.billable).reduce((sum, entry)=>sum + (parseDuration(entry.timeInterval.duration) || 0), 0) / 3600000;\n            if (totalHours > 0) {\n                utilizationRate = billableHours / totalHours;\n            }\n            // Calculate average billing rate (using default rate for now)\n            if (timeEntries.length > 0) {\n                // For now, use a default billing rate since we don't have amount data\n                averageBillingRate = 185; // Default rate, would be calculated from hourly rates in real implementation\n            }\n        } catch (error) {\n            console.log(\"Using default Clockify data\");\n        }\n        // Calculate cashflow (this would come from your accounting system)\n        const currentCashflow = 125000;\n        const previousMonthCashflow = 110000;\n        const cashflowTrend = currentCashflow > previousMonthCashflow ? \"up\" : currentCashflow < previousMonthCashflow ? \"down\" : \"stable\";\n        // Invoice data (this would come from Zoho Books)\n        const overdueInvoiceValue = 45000;\n        const totalOutstandingInvoices = 125000;\n        const averageDaysToPayment = 42;\n        // Profit margins\n        const currentYearGrossMargin = 0.35;\n        const lastYearGrossMargin = 0.32;\n        const ytdOperatingIncome = 285000;\n        const lastYearYtdOperatingIncome = 245000;\n        // Client retention rate (this would come from your CRM data)\n        const clientRetentionRate = 0.92;\n        // Generate trailing 12 months data\n        const trailing12Months = [];\n        for(let i = 11; i >= 0; i--){\n            const month = new Date(currentYear, currentMonth - i, 1);\n            const monthName = month.toLocaleDateString(\"en-US\", {\n                month: \"short\"\n            });\n            const baseRevenue = 180000 + i * 15000;\n            const baseExpenses = 120000 + i * 5000;\n            const profit = baseRevenue - baseExpenses;\n            const profitMargin = profit / baseRevenue;\n            trailing12Months.push({\n                month: monthName,\n                revenue: baseRevenue,\n                expenses: baseExpenses,\n                profit,\n                profitMargin\n            });\n        }\n        // Generate forecast data\n        const forecast = [];\n        for(let i = 1; i <= 6; i++){\n            const month = new Date(currentYear, currentMonth + i, 1);\n            const monthName = month.toLocaleDateString(\"en-US\", {\n                month: \"short\"\n            });\n            const projectedRevenue = 360000 + i * 15000;\n            const projectedExpenses = 180000 + i * 5000;\n            const projectedProfit = projectedRevenue - projectedExpenses;\n            forecast.push({\n                month: monthName,\n                projectedRevenue,\n                projectedExpenses,\n                projectedProfit\n            });\n        }\n        const dashboardData = {\n            // Multipliers\n            currentYearMultiplier,\n            lastYearMultiplier,\n            twoYearsAgoMultiplier,\n            // Overhead Rates\n            currentYearOverhead,\n            lastYearOverhead,\n            twoYearsAgoOverhead,\n            // Revenue per Employee\n            currentYearRevenuePerEmployee,\n            lastYearRevenuePerEmployee,\n            twoYearsAgoRevenuePerEmployee,\n            // Cashflow\n            currentCashflow,\n            previousMonthCashflow,\n            cashflowTrend,\n            // Invoices\n            overdueInvoiceValue,\n            totalOutstandingInvoices,\n            averageDaysToPayment,\n            // Profit Metrics\n            ytdProfit,\n            lastYearYtdProfit,\n            currentYearGrossMargin,\n            lastYearGrossMargin,\n            ytdOperatingIncome,\n            lastYearYtdOperatingIncome,\n            // Trailing 12 Months\n            trailing12Months,\n            // Forecast\n            forecast,\n            // Additional Metrics\n            utilizationRate,\n            averageProjectSize,\n            clientRetentionRate,\n            averageBillingRate,\n            totalActiveProjects,\n            totalEmployees\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(dashboardData);\n    } catch (error) {\n        console.error(\"Error fetching dashboard data:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to fetch dashboard data\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/dashboard/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/clockify.ts":
/*!*************************!*\
  !*** ./lib/clockify.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clockifyService: () => (/* binding */ clockifyService),\n/* harmony export */   fetchAllClockifyTimeSummaries: () => (/* binding */ fetchAllClockifyTimeSummaries),\n/* harmony export */   fetchClockifyProjects: () => (/* binding */ fetchClockifyProjects),\n/* harmony export */   fetchClockifyTimeEntries: () => (/* binding */ fetchClockifyTimeEntries),\n/* harmony export */   fetchClockifyTimeReport: () => (/* binding */ fetchClockifyTimeReport)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n\nclass ClockifyService {\n    constructor(){\n        this.apiKey = \"OTg4NTg3YjMtMmQzYS00ZWE1LThiOTctZmY4NDAwYzRiZjZj\";\n        this.workspaceId = null;\n        this.baseUrl = \"https://api.clockify.me/api/v1\";\n        // Initialize with the provided API key\n        console.log(\"Clockify service initialized with API key\");\n    }\n    getHeaders() {\n        return {\n            \"X-Api-Key\": this.apiKey,\n            \"Content-Type\": \"application/json\"\n        };\n    }\n    async makeRequest(endpoint, params) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.baseUrl}${endpoint}`, {\n                headers: this.getHeaders(),\n                params\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Clockify API error:\", error.response?.data || error.message);\n            throw new Error(`Clockify API error: ${error.response?.data?.message || error.message}`);\n        }\n    }\n    // Get user information\n    async getUser() {\n        return this.makeRequest(\"/user\");\n    }\n    // Get workspaces\n    async getWorkspaces() {\n        return this.makeRequest(\"/workspaces\");\n    }\n    // Get projects for a workspace\n    async getProjects(workspaceId) {\n        const wsId = workspaceId || this.workspaceId;\n        if (!wsId) {\n            // If no workspace ID is provided, get the first workspace\n            const workspaces = await this.getWorkspaces();\n            if (workspaces.length > 0) {\n                this.workspaceId = workspaces[0].id;\n                console.log(`Using workspace: ${workspaces[0].name} (${workspaces[0].id})`);\n            } else {\n                throw new Error(\"No workspaces found\");\n            }\n        }\n        return this.makeRequest(`/workspaces/${this.workspaceId}/projects`);\n    }\n    // Get time entries for a project\n    async getProjectTimeEntries(projectId, startDate, endDate, workspaceId) {\n        const wsId = workspaceId || this.workspaceId;\n        if (!wsId) {\n            throw new Error(\"Workspace ID not configured\");\n        }\n        const params = {};\n        if (startDate) params[\"start\"] = startDate;\n        if (endDate) params[\"end\"] = endDate;\n        return this.makeRequest(`/workspaces/${wsId}/projects/${projectId}/time-entries`, params);\n    }\n    // Get time entries for a user\n    async getUserTimeEntries(userId, startDate, endDate, workspaceId) {\n        const wsId = workspaceId || this.workspaceId;\n        if (!wsId) {\n            throw new Error(\"Workspace ID not configured\");\n        }\n        const params = {};\n        if (startDate) params[\"start\"] = startDate;\n        if (endDate) params[\"end\"] = endDate;\n        return this.makeRequest(`/workspaces/${wsId}/user/${userId}/time-entries`, params);\n    }\n    // Get all time entries for a workspace\n    async getAllTimeEntries(startDate, endDate, workspaceId) {\n        const wsId = workspaceId || this.workspaceId;\n        if (!wsId) {\n            throw new Error(\"Workspace ID not configured\");\n        }\n        const params = {};\n        if (startDate) params[\"start\"] = startDate;\n        if (endDate) params[\"end\"] = endDate;\n        return this.makeRequest(`/workspaces/${wsId}/time-entries`, params);\n    }\n    // Get detailed time report for a project\n    async getProjectTimeReport(projectId, startDate, endDate, workspaceId) {\n        const entries = await this.getProjectTimeEntries(projectId, startDate, endDate, workspaceId);\n        const project = await this.getProjectById(projectId, workspaceId);\n        let totalHours = 0;\n        let billableHours = 0;\n        let nonBillableHours = 0;\n        let totalAmount = 0;\n        let billableAmount = 0;\n        let nonBillableAmount = 0;\n        entries.forEach((entry)=>{\n            const durationMs = this.parseDuration(entry.timeInterval.duration);\n            const hours = durationMs / (1000 * 60 * 60);\n            totalHours += hours;\n            if (entry.billable) {\n                billableHours += hours;\n                billableAmount += entry.costRate?.amount || 0;\n            } else {\n                nonBillableHours += hours;\n                nonBillableAmount += entry.costRate?.amount || 0;\n            }\n            totalAmount += entry.costRate?.amount || 0;\n        });\n        return {\n            projectId,\n            projectName: project?.name || \"Unknown Project\",\n            totalHours,\n            billableHours,\n            nonBillableHours,\n            totalAmount,\n            billableAmount,\n            nonBillableAmount,\n            entries,\n            period: {\n                start: startDate,\n                end: endDate\n            }\n        };\n    }\n    // Get project by ID\n    async getProjectById(projectId, workspaceId) {\n        const wsId = workspaceId || this.workspaceId;\n        if (!wsId) {\n            throw new Error(\"Workspace ID not configured\");\n        }\n        try {\n            return await this.makeRequest(`/workspaces/${wsId}/projects/${projectId}`);\n        } catch (error) {\n            console.error(`Project ${projectId} not found`);\n            return null;\n        }\n    }\n    // Get time summary for a project\n    async getProjectTimeSummary(projectId, startDate, endDate, workspaceId) {\n        const report = await this.getProjectTimeReport(projectId, startDate, endDate, workspaceId);\n        return {\n            projectId: report.projectId,\n            projectName: report.projectName,\n            totalHours: report.totalHours,\n            billableHours: report.billableHours,\n            nonBillableHours: report.nonBillableHours,\n            totalAmount: report.totalAmount,\n            billableAmount: report.billableAmount,\n            nonBillableAmount: report.nonBillableAmount,\n            period: report.period\n        };\n    }\n    // Get all projects with time summaries for a date range\n    async getAllProjectsTimeSummary(startDate, endDate, workspaceId) {\n        const projects = await this.getProjects(workspaceId);\n        const summaries = [];\n        for (const project of projects){\n            try {\n                const summary = await this.getProjectTimeSummary(project.id, startDate, endDate, workspaceId);\n                summaries.push(summary);\n            } catch (error) {\n                console.error(`Error getting summary for project ${project.id}:`, error);\n            }\n        }\n        return summaries;\n    }\n    // Parse duration string (e.g., \"PT2H30M\") to milliseconds\n    parseDuration(duration) {\n        const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/;\n        const match = duration.match(regex);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || \"0\");\n        const minutes = parseInt(match[2] || \"0\");\n        const seconds = parseInt(match[3] || \"0\");\n        return (hours * 3600 + minutes * 60 + seconds) * 1000;\n    }\n    // Check if service is configured\n    isConfigured() {\n        return !!this.apiKey;\n    }\n    // Get configuration status\n    getConfigStatus() {\n        return {\n            apiKey: !!this.apiKey,\n            workspaceId: !!this.workspaceId,\n            configured: this.isConfigured()\n        };\n    }\n    // Set workspace ID\n    setWorkspaceId(workspaceId) {\n        this.workspaceId = workspaceId;\n    }\n}\n// Create singleton instance\nconst clockifyService = new ClockifyService();\n// Export convenience functions\nconst fetchClockifyProjects = async ()=>{\n    try {\n        return await clockifyService.getProjects();\n    } catch (error) {\n        console.error(\"Error fetching Clockify projects:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeEntries = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getProjectTimeEntries(projectId, startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time entries:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeReport = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getProjectTimeReport(projectId, startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time report:\", error);\n        return null;\n    }\n};\nconst fetchAllClockifyTimeSummaries = async (startDate, endDate)=>{\n    try {\n        return await clockifyService.getAllProjectsTimeSummary(startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time summaries:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/clockify.ts\n");

/***/ }),

/***/ "(rsc)/./lib/payroll.ts":
/*!************************!*\
  !*** ./lib/payroll.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PayrollService: () => (/* binding */ PayrollService),\n/* harmony export */   addEmployee: () => (/* binding */ addEmployee),\n/* harmony export */   addProjectMultiplier: () => (/* binding */ addProjectMultiplier),\n/* harmony export */   addSalary: () => (/* binding */ addSalary),\n/* harmony export */   configureSurePayroll: () => (/* binding */ configureSurePayroll),\n/* harmony export */   generateEmployeeProfitabilityReport: () => (/* binding */ generateEmployeeProfitabilityReport),\n/* harmony export */   generateProjectProfitabilityReport: () => (/* binding */ generateProjectProfitabilityReport),\n/* harmony export */   importSurePayrollData: () => (/* binding */ importSurePayrollData),\n/* harmony export */   payrollService: () => (/* binding */ payrollService),\n/* harmony export */   processTimeEntries: () => (/* binding */ processTimeEntries)\n/* harmony export */ });\n/* harmony import */ var _surepayroll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./surepayroll */ \"(rsc)/./lib/surepayroll.ts\");\n\nclass PayrollService {\n    constructor(){\n        this.employees = new Map();\n        this.salaries = new Map();\n        this.multipliers = new Map();\n        console.log(\"Payroll service initialized\");\n    }\n    // Employee Management\n    async addEmployee(employee) {\n        this.employees.set(employee.id, employee);\n        console.log(`Employee added: ${employee.name} (${employee.id})`);\n    }\n    async getEmployee(employeeId) {\n        return this.employees.get(employeeId) || null;\n    }\n    async getAllEmployees() {\n        return Array.from(this.employees.values());\n    }\n    async updateEmployee(employeeId, updates) {\n        const employee = this.employees.get(employeeId);\n        if (employee) {\n            this.employees.set(employeeId, {\n                ...employee,\n                ...updates\n            });\n            console.log(`Employee updated: ${employee.name}`);\n        }\n    }\n    // Salary Management\n    async addSalary(salary) {\n        const employeeSalaries = this.salaries.get(salary.employeeId) || [];\n        // If this is a new current salary, end the previous one\n        if (!salary.endDate) {\n            const currentSalary = employeeSalaries.find((s)=>!s.endDate);\n            if (currentSalary) {\n                currentSalary.endDate = salary.effectiveDate;\n            }\n        }\n        employeeSalaries.push(salary);\n        employeeSalaries.sort((a, b)=>new Date(a.effectiveDate).getTime() - new Date(b.effectiveDate).getTime());\n        this.salaries.set(salary.employeeId, employeeSalaries);\n        console.log(`Salary added for ${salary.employeeId} effective ${salary.effectiveDate}`);\n    }\n    async getEmployeeSalary(employeeId, date) {\n        const employeeSalaries = this.salaries.get(employeeId) || [];\n        const targetDate = new Date(date);\n        return employeeSalaries.find((salary)=>{\n            const effectiveDate = new Date(salary.effectiveDate);\n            const endDate = salary.endDate ? new Date(salary.endDate) : new Date(\"9999-12-31\");\n            return targetDate >= effectiveDate && targetDate <= endDate;\n        }) || null;\n    }\n    async getEmployeeSalaryHistory(employeeId) {\n        return this.salaries.get(employeeId) || [];\n    }\n    // Project Multiplier Management\n    async addProjectMultiplier(multiplier) {\n        const projectMultipliers = this.multipliers.get(multiplier.projectId) || [];\n        // If this is a new current multiplier, end the previous one\n        if (!multiplier.endDate) {\n            const currentMultiplier = projectMultipliers.find((m)=>!m.endDate);\n            if (currentMultiplier) {\n                currentMultiplier.endDate = multiplier.effectiveDate;\n            }\n        }\n        projectMultipliers.push(multiplier);\n        projectMultipliers.sort((a, b)=>new Date(a.effectiveDate).getTime() - new Date(b.effectiveDate).getTime());\n        this.multipliers.set(multiplier.projectId, projectMultipliers);\n        console.log(`Multiplier added for project ${multiplier.projectName} effective ${multiplier.effectiveDate}`);\n    }\n    async getProjectMultiplier(projectId, date) {\n        const projectMultipliers = this.multipliers.get(projectId) || [];\n        const targetDate = new Date(date);\n        return projectMultipliers.find((multiplier)=>{\n            const effectiveDate = new Date(multiplier.effectiveDate);\n            const endDate = multiplier.endDate ? new Date(multiplier.endDate) : new Date(\"9999-12-31\");\n            return targetDate >= effectiveDate && targetDate <= endDate;\n        }) || null;\n    }\n    async getProjectMultiplierHistory(projectId) {\n        return this.multipliers.get(projectId) || [];\n    }\n    // Time Entry Processing with Historical Rates\n    async processTimeEntries(clockifyEntries, clockifyUsers, projects) {\n        const employeeTimeEntries = [];\n        const userMap = new Map(clockifyUsers.map((user)=>[\n                user.id,\n                user\n            ]));\n        for (const entry of clockifyEntries){\n            const user = userMap.get(entry.userId);\n            if (!user) continue;\n            const entryDate = new Date(entry.timeInterval.start).toISOString().split(\"T\")[0];\n            const employee = await this.getEmployee(entry.userId);\n            if (!employee) continue;\n            const salary = await this.getEmployeeSalary(entry.userId, entryDate);\n            if (!salary) continue;\n            const project = projects.find((p)=>p.id === entry.projectId);\n            if (!project) continue;\n            const multiplier = await this.getProjectMultiplier(entry.projectId, entryDate);\n            const projectMultiplier = multiplier?.multiplier || 1.0;\n            const durationMs = this.parseDuration(entry.timeInterval.duration);\n            const hours = durationMs / (1000 * 60 * 60);\n            const billableHours = entry.billable ? hours : 0;\n            const nonBillableHours = entry.billable ? 0 : hours;\n            const totalCost = hours * salary.hourlyRate;\n            const billableValue = billableHours * salary.hourlyRate * projectMultiplier;\n            const efficiency = hours > 0 ? billableHours / hours : 0;\n            employeeTimeEntries.push({\n                employeeId: entry.userId,\n                employeeName: user.name,\n                projectId: entry.projectId,\n                projectName: project.name,\n                date: entryDate,\n                hours,\n                billableHours,\n                nonBillableHours,\n                hourlyRate: salary.hourlyRate,\n                projectMultiplier,\n                totalCost,\n                billableValue,\n                efficiency,\n                description: entry.description,\n                tags: entry.tags.map((tag)=>tag.name)\n            });\n        }\n        return employeeTimeEntries;\n    }\n    // Profitability Analysis\n    async generateProjectProfitabilityReport(projectId, startDate, endDate, employeeTimeEntries, revenue) {\n        const projectEntries = employeeTimeEntries.filter((entry)=>entry.projectId === projectId && entry.date >= startDate && entry.date <= endDate);\n        const totalHours = projectEntries.reduce((sum, entry)=>sum + entry.hours, 0);\n        const totalBillableHours = projectEntries.reduce((sum, entry)=>sum + entry.billableHours, 0);\n        const totalCost = projectEntries.reduce((sum, entry)=>sum + entry.totalCost, 0);\n        const totalBillableValue = projectEntries.reduce((sum, entry)=>sum + entry.billableValue, 0);\n        const grossProfit = revenue - totalCost;\n        const profitMargin = revenue > 0 ? grossProfit / revenue * 100 : 0;\n        const averageMultiplier = totalBillableHours > 0 ? totalBillableValue / (totalBillableHours * projectEntries[0]?.hourlyRate || 1) : 0;\n        // Employee breakdown\n        const employeeBreakdown = new Map();\n        for (const entry of projectEntries){\n            const existing = employeeBreakdown.get(entry.employeeId);\n            if (existing) {\n                existing.hours += entry.hours;\n                existing.cost += entry.totalCost;\n                existing.billableValue += entry.billableValue;\n                existing.efficiency = existing.hours > 0 ? existing.billableValue / (existing.hours * entry.hourlyRate) : 0;\n            } else {\n                employeeBreakdown.set(entry.employeeId, {\n                    employeeId: entry.employeeId,\n                    employeeName: entry.employeeName,\n                    hours: entry.hours,\n                    cost: entry.totalCost,\n                    billableValue: entry.billableValue,\n                    efficiency: entry.efficiency\n                });\n            }\n        }\n        // Monthly breakdown\n        const monthlyBreakdown = new Map();\n        for (const entry of projectEntries){\n            const month = entry.date.substring(0, 7); // YYYY-MM\n            const existing = monthlyBreakdown.get(month);\n            if (existing) {\n                existing.hours += entry.hours;\n                existing.cost += entry.totalCost;\n            } else {\n                monthlyBreakdown.set(month, {\n                    month,\n                    hours: entry.hours,\n                    cost: entry.totalCost,\n                    revenue: 0,\n                    profit: 0\n                });\n            }\n        }\n        return {\n            projectId,\n            projectName: projectEntries[0]?.projectName || \"Unknown Project\",\n            period: {\n                start: startDate,\n                end: endDate\n            },\n            totalHours,\n            totalBillableHours,\n            totalCost,\n            totalRevenue: revenue,\n            grossProfit,\n            profitMargin,\n            averageMultiplier,\n            employeeBreakdown: Array.from(employeeBreakdown.values()),\n            monthlyBreakdown: Array.from(monthlyBreakdown.values())\n        };\n    }\n    async generateEmployeeProfitabilityReport(employeeId, startDate, endDate, employeeTimeEntries) {\n        const employeeEntries = employeeTimeEntries.filter((entry)=>entry.employeeId === employeeId && entry.date >= startDate && entry.date <= endDate);\n        const totalHours = employeeEntries.reduce((sum, entry)=>sum + entry.hours, 0);\n        const totalBillableHours = employeeEntries.reduce((sum, entry)=>sum + entry.billableHours, 0);\n        const totalCost = employeeEntries.reduce((sum, entry)=>sum + entry.totalCost, 0);\n        const totalBillableValue = employeeEntries.reduce((sum, entry)=>sum + entry.billableValue, 0);\n        const efficiency = totalHours > 0 ? totalBillableHours / totalHours : 0;\n        const averageHourlyRate = totalHours > 0 ? totalCost / totalHours : 0;\n        // Project breakdown\n        const projectBreakdown = new Map();\n        for (const entry of employeeEntries){\n            const existing = projectBreakdown.get(entry.projectId);\n            if (existing) {\n                existing.hours += entry.hours;\n                existing.cost += entry.totalCost;\n                existing.billableValue += entry.billableValue;\n                existing.efficiency = existing.hours > 0 ? existing.billableValue / (existing.hours * entry.hourlyRate) : 0;\n            } else {\n                projectBreakdown.set(entry.projectId, {\n                    projectId: entry.projectId,\n                    projectName: entry.projectName,\n                    hours: entry.hours,\n                    cost: entry.totalCost,\n                    billableValue: entry.billableValue,\n                    efficiency: entry.efficiency\n                });\n            }\n        }\n        return {\n            employeeId,\n            employeeName: employeeEntries[0]?.employeeName || \"Unknown Employee\",\n            period: {\n                start: startDate,\n                end: endDate\n            },\n            totalHours,\n            totalBillableHours,\n            totalCost,\n            totalBillableValue,\n            efficiency,\n            averageHourlyRate,\n            projectBreakdown: Array.from(projectBreakdown.values())\n        };\n    }\n    // Payroll System Integration\n    async configurePayrollSystem(system) {\n        this.payrollSystem = system;\n        console.log(`Payroll system configured: ${system.name}`);\n    }\n    // SurePayroll Integration\n    async configureSurePayroll(config) {\n        this.surepayrollConfig = config;\n        (0,_surepayroll__WEBPACK_IMPORTED_MODULE_0__.configureSurePayroll)(config);\n        console.log(`SurePayroll configured for client ID: ${config.clientId}`);\n    }\n    async importSalariesFromSurePayroll() {\n        if (!this.surepayrollConfig) {\n            throw new Error(\"SurePayroll not configured\");\n        }\n        try {\n            // Import employees from SurePayroll\n            const surepayrollEmployees = await (0,_surepayroll__WEBPACK_IMPORTED_MODULE_0__.importSurePayrollEmployees)();\n            for (const employee of surepayrollEmployees){\n                await this.addEmployee(employee);\n            }\n            // Import salaries from SurePayroll\n            const surepayrollSalaries = await (0,_surepayroll__WEBPACK_IMPORTED_MODULE_0__.importSurePayrollSalaries)();\n            for (const salary of surepayrollSalaries){\n                await this.addSalary(salary);\n            }\n            return {\n                source: \"surepayroll\",\n                importDate: new Date().toISOString(),\n                recordsImported: surepayrollEmployees.length + surepayrollSalaries.length,\n                errors: []\n            };\n        } catch (error) {\n            return {\n                source: \"surepayroll\",\n                importDate: new Date().toISOString(),\n                recordsImported: 0,\n                errors: [\n                    error.message\n                ]\n            };\n        }\n    }\n    async importSalariesFromPayrollSystem() {\n        if (!this.payrollSystem) {\n            throw new Error(\"No payroll system configured\");\n        }\n        if (this.payrollSystem.type === \"surepayroll\" && this.surepayrollConfig) {\n            return await this.importSalariesFromSurePayroll();\n        }\n        // This would integrate with other payroll system APIs\n        // For now, return a mock import\n        return {\n            source: \"api\",\n            importDate: new Date().toISOString(),\n            recordsImported: 0,\n            errors: [\n                `${this.payrollSystem.type} integration not yet implemented`\n            ]\n        };\n    }\n    // Utility Methods\n    parseDuration(duration) {\n        const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/;\n        const match = duration.match(regex);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || \"0\");\n        const minutes = parseInt(match[2] || \"0\");\n        const seconds = parseInt(match[3] || \"0\");\n        return (hours * 3600 + minutes * 60 + seconds) * 1000;\n    }\n    calculateHourlyRate(annualSalary, workHoursPerYear = 2080) {\n        return annualSalary / workHoursPerYear;\n    }\n    // Data Export/Import\n    async exportData() {\n        return {\n            employees: Array.from(this.employees.values()),\n            salaries: Array.from(this.salaries.entries()),\n            multipliers: Array.from(this.multipliers.entries()),\n            payrollSystem: this.payrollSystem,\n            surepayrollConfig: this.surepayrollConfig\n        };\n    }\n    async importData(data) {\n        this.employees = new Map(data.employees.map((emp)=>[\n                emp.id,\n                emp\n            ]));\n        this.salaries = new Map(data.salaries);\n        this.multipliers = new Map(data.multipliers);\n        this.payrollSystem = data.payrollSystem;\n        this.surepayrollConfig = data.surepayrollConfig;\n        if (this.surepayrollConfig) {\n            (0,_surepayroll__WEBPACK_IMPORTED_MODULE_0__.configureSurePayroll)(this.surepayrollConfig);\n        }\n        console.log(\"Payroll data imported successfully\");\n    }\n}\n// Create singleton instance\nconst payrollService = new PayrollService();\n// Export convenience functions\nconst addEmployee = async (employee)=>{\n    await payrollService.addEmployee(employee);\n};\nconst addSalary = async (salary)=>{\n    await payrollService.addSalary(salary);\n};\nconst addProjectMultiplier = async (multiplier)=>{\n    await payrollService.addProjectMultiplier(multiplier);\n};\nconst processTimeEntries = async (clockifyEntries, clockifyUsers, projects)=>{\n    return await payrollService.processTimeEntries(clockifyEntries, clockifyUsers, projects);\n};\nconst generateProjectProfitabilityReport = async (projectId, startDate, endDate, employeeTimeEntries, revenue)=>{\n    return await payrollService.generateProjectProfitabilityReport(projectId, startDate, endDate, employeeTimeEntries, revenue);\n};\nconst generateEmployeeProfitabilityReport = async (employeeId, startDate, endDate, employeeTimeEntries)=>{\n    return await payrollService.generateEmployeeProfitabilityReport(employeeId, startDate, endDate, employeeTimeEntries);\n};\n// SurePayroll specific functions\nconst configureSurePayroll = async (config)=>{\n    await payrollService.configureSurePayroll(config);\n};\nconst importSurePayrollData = async ()=>{\n    return await payrollService.importSalariesFromSurePayroll();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/payroll.ts\n");

/***/ }),

/***/ "(rsc)/./lib/surepayroll.ts":
/*!****************************!*\
  !*** ./lib/surepayroll.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SurePayrollService: () => (/* binding */ SurePayrollService),\n/* harmony export */   configureSurePayroll: () => (/* binding */ configureSurePayroll),\n/* harmony export */   getSurePayrollService: () => (/* binding */ getSurePayrollService),\n/* harmony export */   importSurePayrollData: () => (/* binding */ importSurePayrollData),\n/* harmony export */   importSurePayrollEmployees: () => (/* binding */ importSurePayrollEmployees),\n/* harmony export */   importSurePayrollSalaries: () => (/* binding */ importSurePayrollSalaries),\n/* harmony export */   surepayrollService: () => (/* binding */ surepayrollService)\n/* harmony export */ });\nclass SurePayrollService {\n    constructor(config){\n        this.config = config;\n        this.baseUrl = `https://api.surepayroll.com/v1`;\n    }\n    async makeRequest(endpoint, options = {}) {\n        const url = `${this.baseUrl}${endpoint}`;\n        const headers = {\n            \"Authorization\": `Bearer ${this.config.apiKey}`,\n            \"X-Client-ID\": this.config.clientId,\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            ...options.headers\n        };\n        try {\n            const response = await fetch(url, {\n                ...options,\n                headers\n            });\n            if (!response.ok) {\n                throw new Error(`SurePayroll API error: ${response.status} ${response.statusText}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"SurePayroll API request failed:\", error);\n            throw error;\n        }\n    }\n    // Employee Management\n    async getAllEmployees() {\n        const response = await this.makeRequest(\"/employees\");\n        return response.employees || [];\n    }\n    async getEmployee(employeeId) {\n        const response = await this.makeRequest(`/employees/${employeeId}`);\n        return response.employee;\n    }\n    async getEmployeeDirectory() {\n        const response = await this.makeRequest(\"/employees/directory\");\n        return response.employees || [];\n    }\n    // Compensation Management\n    async getEmployeeCompensation(employeeId) {\n        const response = await this.makeRequest(`/employees/${employeeId}/compensation`);\n        return response.compensation || [];\n    }\n    async getCompensationHistory(employeeId, startDate, endDate) {\n        let endpoint = `/employees/${employeeId}/compensation/history`;\n        const params = new URLSearchParams();\n        if (startDate) params.append(\"startDate\", startDate);\n        if (endDate) params.append(\"endDate\", endDate);\n        if (params.toString()) {\n            endpoint += `?${params.toString()}`;\n        }\n        const response = await this.makeRequest(endpoint);\n        return response.compensation || [];\n    }\n    // Time Off Management\n    async getEmployeeTimeOff(employeeId) {\n        const response = await this.makeRequest(`/employees/${employeeId}/timeoff`);\n        return response.timeOff || [];\n    }\n    async getAllTimeOff(startDate, endDate) {\n        let endpoint = \"/timeoff\";\n        const params = new URLSearchParams();\n        if (startDate) params.append(\"startDate\", startDate);\n        if (endDate) params.append(\"endDate\", endDate);\n        if (params.toString()) {\n            endpoint += `?${params.toString()}`;\n        }\n        const response = await this.makeRequest(endpoint);\n        return response.timeOff || [];\n    }\n    // Reports\n    async getCustomReport(reportId) {\n        const response = await this.makeRequest(`/reports/${reportId}`);\n        return response.report;\n    }\n    async createCustomReport(reportData) {\n        const response = await this.makeRequest(\"/reports\", {\n            method: \"POST\",\n            body: JSON.stringify(reportData)\n        });\n        return response.report;\n    }\n    // Company Information\n    async getCompanyInfo() {\n        const response = await this.makeRequest(\"/company\");\n        return response.company;\n    }\n    // Webhook Management\n    async createWebhook(webhookData) {\n        const response = await this.makeRequest(\"/webhooks\", {\n            method: \"POST\",\n            body: JSON.stringify(webhookData)\n        });\n        return response.webhook;\n    }\n    async getWebhooks() {\n        const response = await this.makeRequest(\"/webhooks\");\n        return response.webhooks || [];\n    }\n    async deleteWebhook(webhookId) {\n        await this.makeRequest(`/webhooks/${webhookId}`, {\n            method: \"DELETE\"\n        });\n    }\n    // Utility Methods\n    calculateHourlyRate(annualSalary, paySchedule) {\n        let hoursPerYear;\n        switch(paySchedule){\n            case \"weekly\":\n                hoursPerYear = 52 * 40; // 40 hours per week\n                break;\n            case \"bi-weekly\":\n                hoursPerYear = 26 * 80; // 80 hours per 2 weeks\n                break;\n            case \"semi-monthly\":\n                hoursPerYear = 24 * 86.67; // 86.67 hours per pay period\n                break;\n            case \"monthly\":\n                hoursPerYear = 12 * 173.33; // 173.33 hours per month\n                break;\n            default:\n                hoursPerYear = 2080; // Standard 40-hour work week\n        }\n        return annualSalary / hoursPerYear;\n    }\n    // Data Import Methods\n    async importEmployees() {\n        const surepayrollEmployees = await this.getAllEmployees();\n        return surepayrollEmployees.map((emp)=>({\n                id: emp.id,\n                name: emp.displayName,\n                email: emp.email,\n                status: emp.status === \"active\" ? \"active\" : \"inactive\",\n                department: emp.department,\n                position: emp.jobTitle,\n                hireDate: emp.hireDate,\n                terminationDate: emp.terminationDate\n            }));\n    }\n    async importSalaries() {\n        const employees = await this.getAllEmployees();\n        const salaries = [];\n        for (const employee of employees){\n            const compensations = await this.getEmployeeCompensation(employee.id);\n            for (const comp of compensations){\n                salaries.push({\n                    employeeId: comp.employeeId,\n                    effectiveDate: comp.effectiveDate,\n                    endDate: comp.endDate,\n                    annualSalary: comp.annualSalary,\n                    hourlyRate: comp.hourlyRate,\n                    currency: comp.currency,\n                    notes: `Imported from SurePayroll - ${comp.payType} (${comp.paySchedule})`\n                });\n            }\n        }\n        return salaries;\n    }\n    async importAllData() {\n        try {\n            const employees = await this.importEmployees();\n            const salaries = await this.importSalaries();\n            return {\n                source: \"surepayroll\",\n                importDate: new Date().toISOString(),\n                recordsImported: employees.length + salaries.length,\n                errors: []\n            };\n        } catch (error) {\n            return {\n                source: \"surepayroll\",\n                importDate: new Date().toISOString(),\n                recordsImported: 0,\n                errors: [\n                    error.message\n                ]\n            };\n        }\n    }\n    // Helper Methods\n    async searchEmployees(query) {\n        const employees = await this.getAllEmployees();\n        return employees.filter((emp)=>emp.displayName.toLowerCase().includes(query.toLowerCase()) || emp.email.toLowerCase().includes(query.toLowerCase()));\n    }\n    async getEmployeesByDepartment(department) {\n        const employees = await this.getAllEmployees();\n        return employees.filter((emp)=>emp.department === department);\n    }\n    async getActiveEmployees() {\n        const employees = await this.getAllEmployees();\n        return employees.filter((emp)=>emp.status === \"active\");\n    }\n}\nlet surepayrollService = null;\nconst configureSurePayroll = (config)=>{\n    surepayrollService = new SurePayrollService(config);\n    console.log(`SurePayroll service configured for client ID: ${config.clientId}`);\n};\nconst getSurePayrollService = ()=>{\n    if (!surepayrollService) {\n        throw new Error(\"SurePayroll service not configured. Call configureSurePayroll first.\");\n    }\n    return surepayrollService;\n};\nconst importSurePayrollEmployees = async ()=>{\n    const service = getSurePayrollService();\n    return await service.importEmployees();\n};\nconst importSurePayrollSalaries = async ()=>{\n    const service = getSurePayrollService();\n    return await service.importSalaries();\n};\nconst importSurePayrollData = async ()=>{\n    const service = getSurePayrollService();\n    return await service.importAllData();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/surepayroll.ts\n");

/***/ }),

/***/ "(rsc)/./lib/zoho.ts":
/*!*********************!*\
  !*** ./lib/zoho.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchInvoices: () => (/* binding */ fetchInvoices),\n/* harmony export */   fetchProjects: () => (/* binding */ fetchProjects),\n/* harmony export */   zohoService: () => (/* binding */ zohoService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n\nclass ZohoService {\n    constructor(){\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.refreshPromise = null;\n        this.TOKEN_REFRESH_BUFFER = 5 * 60 * 1000 // 5 minutes buffer\n        ;\n        this.autoRefreshTimer = null;\n        this.AUTO_REFRESH_INTERVAL = 45 * 60 * 1000 // 45 minutes\n        ;\n        this.lastRefreshTime = 0 // Track when auto-refresh was last triggered\n        ;\n        // Start automatic token refresh\n        this._startAutoRefresh();\n    }\n    _startAutoRefresh() {\n        // Clear any existing timer\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n        }\n        // Set up automatic refresh every 45 minutes\n        this.autoRefreshTimer = setInterval(async ()=>{\n            try {\n                console.log(\"Auto-refreshing Zoho token (45-minute interval)...\");\n                this.lastRefreshTime = Date.now(); // Track when refresh was triggered\n                await this.forceRefreshToken();\n                console.log(\"Auto-refresh completed successfully\");\n            } catch (error) {\n                console.error(\"Auto-refresh failed:\", error);\n            }\n        }, this.AUTO_REFRESH_INTERVAL);\n        // Set initial refresh time\n        this.lastRefreshTime = Date.now();\n        console.log(\"Automatic Zoho token refresh started (every 45 minutes)\");\n    }\n    _stopAutoRefresh() {\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n            this.autoRefreshTimer = null;\n            console.log(\"Automatic Zoho token refresh stopped\");\n        }\n    }\n    async getAccessToken() {\n        // Check if token is still valid (with buffer)\n        if (this.accessToken && Date.now() < this.tokenExpiry - this.TOKEN_REFRESH_BUFFER) {\n            return this.accessToken;\n        }\n        // If there's already a refresh in progress, wait for it\n        if (this.refreshPromise) {\n            return this.refreshPromise;\n        }\n        // Start a new refresh\n        this.refreshPromise = this.refreshAccessToken();\n        try {\n            const token = await this.refreshPromise;\n            return token;\n        } finally{\n            this.refreshPromise = null;\n        }\n    }\n    async refreshAccessToken() {\n        try {\n            console.log(\"Refreshing Zoho access token...\");\n            // Create form data for the request\n            const formData = new URLSearchParams();\n            formData.append(\"refresh_token\", \"1000.4bf26c4881dfba83aae32546453d662d.a9353e91362a18c457b5cbec86b10ed2\" || 0);\n            formData.append(\"client_id\", \"1000.8RL8WMTDXS0WIP2EJF2XUS6NDSLQEP\" || 0);\n            formData.append(\"client_secret\", \"8a7ee3c04f0a0d860dd215c4449deab9bf15d1d00b\" || 0);\n            formData.append(\"grant_type\", \"refresh_token\");\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"https://accounts.zoho.com/oauth/v2/token\", formData, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            });\n            this.accessToken = response.data.access_token;\n            this.tokenExpiry = Date.now() + response.data.expires_in * 1000;\n            console.log(`Token refreshed successfully. Expires in ${Math.round(response.data.expires_in / 60)} minutes`);\n            return this.accessToken;\n        } catch (error) {\n            console.error(\"Error refreshing Zoho access token:\", error);\n            throw new Error(\"Failed to authenticate with Zoho\");\n        }\n    }\n    async makeRequest(endpoint) {\n        const token = await this.getAccessToken();\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://www.zohoapis.com/books/v3/${endpoint}`, {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                params: {\n                    organization_id: \"652094923\"\n                }\n            });\n            return response.data;\n        } catch (error) {\n            // If we get a 401, try refreshing the token once\n            if (error.response?.status === 401) {\n                console.log(\"Token expired, refreshing...\");\n                this.accessToken = null;\n                this.tokenExpiry = 0;\n                const newToken = await this.getAccessToken();\n                // Retry the request with the new token\n                const retryResponse = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://www.zohoapis.com/books/v3/${endpoint}`, {\n                    headers: {\n                        \"Authorization\": `Bearer ${newToken}`,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    params: {\n                        organization_id: \"652094923\"\n                    }\n                });\n                return retryResponse.data;\n            }\n            console.error(`Error making Zoho request to ${endpoint}:`, error);\n            throw new Error(`Failed to fetch data from Zoho: ${endpoint}`);\n        }\n    }\n    async getProjects() {\n        try {\n            let allProjects = [];\n            let page = 1;\n            const perPage = 200;\n            while(true){\n                const data = await this.makeRequest(`projects?page=${page}&per_page=${perPage}`);\n                const projects = data.projects?.map((project)=>{\n                    // Log the first project to see available fields\n                    if (page === 1 && allProjects.length === 0) {\n                        console.log(\"Sample Zoho project data:\", JSON.stringify(project, null, 2));\n                    }\n                    return {\n                        project_id: project.project_id,\n                        project_name: project.project_name || project.name || \"\",\n                        description: project.description || \"\",\n                        status: project.status || \"active\",\n                        start_date: project.start_date || \"\",\n                        end_date: project.end_date || \"\",\n                        budget_amount: project.budget_amount || 0,\n                        rate_per_hour: project.rate_per_hour || 0,\n                        customer_id: project.customer_id || \"\",\n                        customer_name: project.customer_name || \"\",\n                        signed_fee: undefined\n                    };\n                }) || [];\n                allProjects = allProjects.concat(projects);\n                // Check if we've reached the end\n                if (projects.length < perPage) {\n                    break;\n                }\n                page++;\n            }\n            console.log(`Fetched ${allProjects.length} projects from Zoho`);\n            return allProjects;\n        } catch (error) {\n            console.error(\"Error fetching projects:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithRevenueBudget() {\n        try {\n            console.log(\"Fetching projects with revenue budget data...\");\n            const projects = await this.getProjects();\n            // Log projects that have revenue_budget data\n            const projectsWithRevenueBudget = projects.filter((project)=>{\n                const hasRevenueBudget = project.signed_fee && project.signed_fee > 0;\n                if (hasRevenueBudget) {\n                    console.log(`Project ${project.project_name} has revenue budget: $${project.signed_fee}`);\n                }\n                return hasRevenueBudget;\n            });\n            console.log(`Found ${projectsWithRevenueBudget.length} projects with revenue budget data`);\n            return projects;\n        } catch (error) {\n            console.error(\"Error fetching projects with revenue budget:\", error);\n            return [];\n        }\n    }\n    async debugProjectFields() {\n        try {\n            console.log(\"Debugging Zoho project fields...\");\n            const data = await this.makeRequest(\"projects?page=1&per_page=5\");\n            if (data.projects && data.projects.length > 0) {\n                console.log(\"Available fields in Zoho project response:\");\n                const sampleProject = data.projects[0];\n                Object.keys(sampleProject).forEach((key)=>{\n                    console.log(`  ${key}: ${sampleProject[key]} (${typeof sampleProject[key]})`);\n                });\n                // Check specifically for revenue_budget\n                if (sampleProject.revenue_budget !== undefined) {\n                    console.log(`✅ Found revenue_budget field: ${sampleProject.revenue_budget}`);\n                } else {\n                    console.log(\"❌ revenue_budget field not found in Zoho response\");\n                    console.log(\"Available budget-related fields:\");\n                    Object.keys(sampleProject).forEach((key)=>{\n                        if (key.toLowerCase().includes(\"budget\") || key.toLowerCase().includes(\"revenue\")) {\n                            console.log(`  ${key}: ${sampleProject[key]}`);\n                        }\n                    });\n                }\n            } else {\n                console.log(\"No projects found in Zoho response\");\n            }\n        } catch (error) {\n            console.error(\"Error debugging project fields:\", error);\n        }\n    }\n    async getProjectsWithEstimates() {\n        try {\n            const projects = await this.getProjects();\n            // For the first few projects, try to get estimates to see if that contains the signed fee\n            const projectsWithEstimates = await Promise.all(projects.slice(0, 5).map(async (project)=>{\n                try {\n                    const estimates = await this.getProjectEstimates(project.project_id);\n                    const totalEstimateAmount = estimates.reduce((sum, estimate)=>sum + (estimate.total || 0), 0);\n                    console.log(`Project ${project.project_name} estimates:`, estimates.length, \"total amount:\", totalEstimateAmount);\n                    return {\n                        ...project,\n                        signed_fee: project.signed_fee || totalEstimateAmount || 0\n                    };\n                } catch (error) {\n                    console.error(`Error fetching estimates for project ${project.project_id}:`, error);\n                    return project;\n                }\n            }));\n            // Return all projects, with the first 5 having updated signed fees from estimates\n            return [\n                ...projectsWithEstimates,\n                ...projects.slice(5)\n            ];\n        } catch (error) {\n            console.error(\"Error fetching projects with estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithInvoiceTotals() {\n        try {\n            const [projects, invoices] = await Promise.all([\n                this.getProjects(),\n                this.getInvoices()\n            ]);\n            // Calculate signed fee as total of all invoices for each project\n            const projectsWithInvoiceTotals = projects.map((project)=>{\n                const projectInvoices = invoices.filter((invoice)=>invoice.project_id === project.project_id);\n                const totalInvoiceAmount = projectInvoices.reduce((sum, invoice)=>sum + invoice.amount, 0);\n                console.log(`Project ${project.project_name} invoices:`, projectInvoices.length, \"total amount:\", totalInvoiceAmount);\n                return {\n                    ...project,\n                    signed_fee: project.signed_fee || totalInvoiceAmount || 0\n                };\n            });\n            return projectsWithInvoiceTotals;\n        } catch (error) {\n            console.error(\"Error fetching projects with invoice totals:\", error);\n            return [];\n        }\n    }\n    async getInvoices() {\n        try {\n            const data = await this.makeRequest(\"invoices\");\n            return data.invoices?.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                })) || [];\n        } catch (error) {\n            console.error(\"Error fetching invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectInvoices(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/invoices`);\n            return data.invoices?.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                })) || [];\n        } catch (error) {\n            console.error(\"Error fetching project invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectDetails(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}`);\n            console.log(`Project ${projectId} details:`, JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching project details:\", error);\n            return null;\n        }\n    }\n    async getProjectEstimates(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/estimates`);\n            console.log(`Project ${projectId} estimates:`, JSON.stringify(data, null, 2));\n            return data.estimates || [];\n        } catch (error) {\n            console.error(\"Error fetching project estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectContracts(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/contracts`);\n            console.log(`Project ${projectId} contracts:`, JSON.stringify(data, null, 2));\n            return data.contracts || [];\n        } catch (error) {\n            console.error(\"Error fetching project contracts:\", error);\n            return [];\n        }\n    }\n    // Method to manually refresh token (for testing)\n    async forceRefreshToken() {\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.lastRefreshTime = Date.now(); // Track manual refresh time\n        await this.getAccessToken();\n    }\n    // Get token status for debugging\n    getTokenStatus() {\n        const now = Date.now();\n        return {\n            hasToken: !!this.accessToken,\n            expiresIn: this.tokenExpiry - now,\n            isExpired: now >= this.tokenExpiry\n        };\n    }\n    // Method to get auto-refresh status\n    getAutoRefreshStatus() {\n        const now = Date.now();\n        const timeSinceLastRefresh = now - this.lastRefreshTime;\n        const nextRefreshIn = Math.max(0, this.AUTO_REFRESH_INTERVAL - timeSinceLastRefresh);\n        return {\n            isActive: !!this.autoRefreshTimer,\n            nextRefreshIn\n        };\n    }\n    // Public method to start auto-refresh\n    enableAutoRefresh() {\n        this._startAutoRefresh();\n    }\n    // Public method to stop auto-refresh\n    disableAutoRefresh() {\n        this._stopAutoRefresh();\n    }\n    // Public method to get comprehensive status\n    getStatus() {\n        return {\n            ...this.getTokenStatus(),\n            autoRefresh: this.getAutoRefreshStatus()\n        };\n    }\n}\nconst zohoService = new ZohoService();\n// Export the functions that are being imported in page.tsx\nconst fetchProjects = async ()=>{\n    try {\n        console.log(\"Client: Fetching projects from API\");\n        const response = await fetch(\"/api/projects\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"projects\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching projects:\", error);\n        throw error;\n    }\n};\nconst fetchInvoices = async ()=>{\n    try {\n        console.log(\"Client: Fetching invoices from API\");\n        const response = await fetch(\"/api/invoices\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"invoices\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching invoices:\", error);\n        throw error;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/zoho.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/form-data","vendor-chunks/get-intrinsic","vendor-chunks/asynckit","vendor-chunks/combined-stream","vendor-chunks/mime-types","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/es-set-tostringtag","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/has-flag","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdashboard%2Froute&page=%2Fapi%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();