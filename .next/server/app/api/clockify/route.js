"use strict";(()=>{var e={};e.id=529,e.ids=[529],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6455:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>m,patchFetch:()=>y,requestAsyncStorage:()=>d,routeModule:()=>p,serverHooks:()=>h,staticGenerationAsyncStorage:()=>k});var o={};r.r(o),r.d(o,{GET:()=>u,POST:()=>l});var s=r(49303),a=r(88716),i=r(60670),n=r(87070),c=r(88403);async function u(e){try{let{searchParams:t}=new URL(e.url),r=t.get("startDate"),o=t.get("endDate"),s=t.get("action");if(!c.e1.isConfigured())return n.NextResponse.json({error:"Clockify not configured",configStatus:c.e1.getConfigStatus()},{status:400});switch(s){case"status":return n.NextResponse.json({configured:c.e1.isConfigured(),configStatus:c.e1.getConfigStatus()});case"projects":let a=await c.e1.getProjects();return n.NextResponse.json({projects:a});case"time-summaries":if(!r||!o)return n.NextResponse.json({error:"startDate and endDate are required for time summaries"},{status:400});let i=await (0,c.wu)(r,o);return n.NextResponse.json({timeSummaries:i});case"user":let u=await c.e1.getUser();return n.NextResponse.json({user:u});case"workspaces":let l=await c.e1.getWorkspaces();return n.NextResponse.json({workspaces:l});case"test-connection":try{let e=await c.e1.getUser(),t=await c.e1.getWorkspaces();return n.NextResponse.json({success:!0,user:e,workspaces:t,message:"Connection successful"})}catch(e){return n.NextResponse.json({success:!1,error:e.message},{status:400})}default:return n.NextResponse.json({error:"Invalid action. Supported actions: status, projects, time-summaries, user, workspaces, test-connection"},{status:400})}}catch(e){return console.error("Clockify API error:",e),n.NextResponse.json({error:e.message||"Failed to fetch Clockify data"},{status:500})}}async function l(e){try{let{action:t,data:r}=await e.json();switch(t){case"enhance-billing-data":let{billingData:o,clockifyReports:s}=r,a=o.map(e=>{let t=s.find(t=>t.projectId===e.projectId||t.projectName.toLowerCase().includes(e.projectName.toLowerCase()));if(t){let r=function(e){let t=e.totalHours>0?e.billableHours/e.totalHours:0,r=e.billableHours>0?e.billableAmount/e.billableHours:0;return{projectId:e.projectId,projectName:e.projectName,totalHours:e.totalHours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:r,totalValue:e.billableAmount,efficiency:t,period:e.period}}(t);return{...e,clockifyData:t,totalHours:t.totalHours,billableHours:t.billableHours,nonBillableHours:t.nonBillableHours,hourlyRate:r.hourlyRate,efficiency:r.efficiency}}return e});return n.NextResponse.json({enhancedData:a});case"set-workspace":let{workspaceId:i}=r;if(i)return c.e1.setWorkspaceId(i),n.NextResponse.json({success:!0,message:"Workspace set successfully"});return n.NextResponse.json({error:"Workspace ID is required"},{status:400});default:return n.NextResponse.json({error:"Invalid action. Supported actions: enhance-billing-data, set-workspace"},{status:400})}}catch(e){return console.error("Clockify POST error:",e),n.NextResponse.json({error:e.message||"Failed to process Clockify data"},{status:500})}}let p=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/clockify/route",pathname:"/api/clockify",filename:"route",bundlePath:"app/api/clockify/route"},resolvedPagePath:"C:\\Users\\Jonathan\\Desktop\\Billing\\app\\api\\clockify\\route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:d,staticGenerationAsyncStorage:k,serverHooks:h}=p,m="/api/clockify/route";function y(){return(0,i.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:k})}},88403:(e,t,r)=>{r.d(t,{ZP:()=>a,e1:()=>s,wu:()=>i});class o{constructor(){this.apiKey=null,this.workspaceId=null,this.baseUrl="https://api.clockify.me/api/v1",this._isConfigured=!1,this.apiKey=process.env.CLOCKIFY_API_KEY||null,this.workspaceId=process.env.CLOCKIFY_WORKSPACE_ID||null,this.apiKey&&"your_clockify_api_key_here"!==this.apiKey&&this.workspaceId&&"your_clockify_workspace_id_here"!==this.workspaceId?(this._isConfigured=!0,console.log("Clockify service initialized with valid credentials")):(this._isConfigured=!1,console.warn("Clockify service initialized without valid credentials - will use mock data"),console.warn("Please set CLOCKIFY_API_KEY and CLOCKIFY_WORKSPACE_ID in your environment variables"))}getHeaders(){if(!this.apiKey)throw Error("Clockify API key not configured");return{"X-Api-Key":this.apiKey,"Content-Type":"application/json"}}async makeRequest(e,t){if(!this._isConfigured)throw Error("Clockify service not properly configured");try{let r=new URL(`${this.baseUrl}${e}`);t&&Object.keys(t).forEach(e=>{void 0!==t[e]&&null!==t[e]&&r.searchParams.append(e,t[e])});let o=await fetch(r.toString(),{method:"GET",headers:this.getHeaders()});if(401===o.status)throw Error("Clockify API authentication failed - check your API key");if(403===o.status)throw Error("Clockify API access forbidden - check your workspace ID and permissions");if(429===o.status)throw Error("Clockify API rate limit exceeded - try again later");if(!o.ok)throw Error(`Clockify API error: ${o.status} ${o.statusText}`);return await o.json()}catch(e){if(e instanceof Error)throw e;throw Error(`Clockify API request failed: ${e}`)}}isConfigured(){return this._isConfigured}getConfigurationStatus(){return{configured:this._isConfigured,hasApiKey:!!(this.apiKey&&"your_clockify_api_key_here"!==this.apiKey),hasWorkspaceId:!!(this.workspaceId&&"your_clockify_workspace_id_here"!==this.workspaceId)}}getConfigStatus(){return this.getConfigurationStatus()}setWorkspaceId(e){this.workspaceId=e,this.apiKey&&"your_clockify_api_key_here"!==this.apiKey&&(this._isConfigured=!0)}async getUser(){try{return await this.makeRequest("/user")}catch(e){return console.error("Failed to get Clockify user:",e),{id:"mock-user-id",name:"Mock User",email:"user@example.com",status:"ACTIVE"}}}async getWorkspaces(){try{return await this.makeRequest("/workspaces")}catch(e){return console.error("Failed to get Clockify workspaces:",e),[{id:"mock-workspace-id",name:"Mock Workspace",hourlyRate:{amount:100,currency:"USD"}}]}}async getProjects(){try{if(!this.workspaceId)throw Error("Workspace ID not configured");return await this.makeRequest(`/workspaces/${this.workspaceId}/projects`)}catch(e){return console.error("Failed to get Clockify projects:",e),[{id:"mock-project-1",name:"Mock Project 1",clientId:"mock-client-1",clientName:"Mock Client 1",status:"ACTIVE",billable:!0,hourlyRate:{amount:150,currency:"USD"}},{id:"mock-project-2",name:"Mock Project 2",clientId:"mock-client-2",clientName:"Mock Client 2",status:"ACTIVE",billable:!0,hourlyRate:{amount:175,currency:"USD"}}]}}async getTimeEntries(e,t,r){try{if(!this.workspaceId)throw Error("Workspace ID not configured");return await this.makeRequest(`/workspaces/${this.workspaceId}/projects/${e}/time-entries`,{start:t,end:r})}catch(e){return console.error("Failed to get Clockify time entries:",e),[{id:"mock-time-entry-1",description:"Mock work session",timeInterval:{start:t,end:r,duration:"PT2H30M"},billable:!0,userId:"mock-user-id",userName:"Mock User"}]}}async getAllTimeEntries(e,t){try{if(!this.workspaceId)throw Error("Workspace ID not configured");return await this.makeRequest(`/workspaces/${this.workspaceId}/time-entries`,{start:e,end:t})}catch(r){return console.error("Failed to get all Clockify time entries:",r),[{id:"mock-time-entry-1",description:"Mock work session",timeInterval:{start:e,end:t,duration:"PT8H0M"},billable:!0,userId:"mock-user-id",userName:"Mock User",projectId:"mock-project-1",projectName:"Mock Project 1"}]}}async getUsers(){try{if(!this.workspaceId)throw Error("Workspace ID not configured");return await this.makeRequest(`/workspaces/${this.workspaceId}/users`)}catch(e){return console.error("Failed to get Clockify users:",e),[{id:"mock-user-1",name:"Mock User 1",email:"user1@example.com",status:"ACTIVE",hourlyRate:{amount:100,currency:"USD"}},{id:"mock-user-2",name:"Mock User 2",email:"user2@example.com",status:"ACTIVE",hourlyRate:{amount:120,currency:"USD"}}]}}async getProjectTimeReport(e,t,r){try{if(!this.workspaceId)throw Error("Workspace ID not configured");let o=await this.getTimeEntries(e,t,r),s=await this.getProjects().then(t=>t.find(t=>t.id===e));if(!s)throw Error("Project not found");let a=o.reduce((e,t)=>{let r=t.timeInterval.duration,o=this.parseDuration(r);return e+o},0),i=o.filter(e=>e.billable).reduce((e,t)=>{let r=t.timeInterval.duration,o=this.parseDuration(r);return e+o},0),n=a-i;return{projectId:e,projectName:s.name,totalHours:a,billableHours:i,nonBillableHours:n,totalAmount:a*(s.hourlyRate?.amount||0),billableAmount:i*(s.hourlyRate?.amount||0),nonBillableAmount:n*(s.hourlyRate?.amount||0),entries:o,period:{start:t,end:r}}}catch(e){return console.error("Failed to get project time report:",e),null}}async getAllProjectsTimeSummary(e,t){try{if(!this.workspaceId)throw Error("Workspace ID not configured");let r=await this.getProjects(),o=[];for(let s of r){let r=await this.getProjectTimeReport(s.id,e,t);r&&o.push(r)}return o}catch(e){return console.error("Failed to get all projects time summary:",e),[]}}parseDuration(e){let t=e.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);return t?parseInt(t[1]||"0")+parseInt(t[2]||"0")/60+parseInt(t[3]||"0")/3600:0}}let s=new o,a=s,i=async(e,t)=>{try{return await s.getAllProjectsTimeSummary(e,t)}catch(e){return console.error("Error fetching Clockify time summaries:",e),[]}}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[276,972],()=>r(6455));module.exports=o})();