"use strict";(()=>{var e={};e.id=4529,e.ids=[4529],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6455:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>h,patchFetch:()=>I,requestAsyncStorage:()=>f,routeModule:()=>m,serverHooks:()=>C,staticGenerationAsyncStorage:()=>g});var r={};s.r(r),s.d(r,{GET:()=>p,POST:()=>d,dynamic:()=>l});var o=s(49303),a=s(88716),n=s(60670),i=s(87070),c=s(88403),u=s(77014);let l="force-dynamic";async function p(e){try{let{searchParams:t}=new URL(e.url),s=t.get("startDate"),r=t.get("endDate"),o=t.get("action");if(!c.e1.isConfigured())return i.NextResponse.json({error:"Clockify not configured",configStatus:c.e1.getConfigStatus()},{status:400});switch(o){case"status":return i.NextResponse.json({configured:c.e1.isConfigured(),configStatus:c.e1.getConfigStatus()});case"projects":let a=await c.e1.getProjects();return i.NextResponse.json({projects:a});case"time-summaries":if(!s||!r)return i.NextResponse.json({error:"startDate and endDate are required for time summaries"},{status:400});let n=await (0,c.wu)(s,r);return i.NextResponse.json({timeSummaries:n});case"user":let l=await c.e1.getUser();return i.NextResponse.json({user:l});case"workspaces":let p=await c.e1.getWorkspaces();return i.NextResponse.json({workspaces:p});case"import-time-entries":if(!s||!r)return i.NextResponse.json({error:"startDate and endDate are required for importing time entries"},{status:400});try{console.log(`ðŸ”„ Starting Clockify time entries import for ${s} to ${r}`);let e=await (0,u.i4)(s,r);return i.NextResponse.json({success:!0,message:"Time entries import completed",result:e})}catch(e){return console.error("Clockify import error:",e),i.NextResponse.json({success:!1,error:e.message||"Failed to import time entries"},{status:500})}case"import-stats":try{let e=await u.Nu.getImportStatistics();return i.NextResponse.json({success:!0,stats:e})}catch(e){return console.error("Clockify import stats error:",e),i.NextResponse.json({success:!1,error:e.message||"Failed to get import statistics"},{status:500})}case"test-connection":try{let e=await c.e1.getUser(),t=await c.e1.getWorkspaces();return i.NextResponse.json({success:!0,user:e,workspaces:t,message:"Connection successful"})}catch(e){return i.NextResponse.json({success:!1,error:e.message},{status:400})}case"validate-config":let d=c.e1.getConfigStatus(),m={hasApiKey:!!process.env.CLOCKIFY_API_KEY,hasWorkspaceId:!!process.env.CLOCKIFY_WORKSPACE_ID,apiKeyLength:process.env.CLOCKIFY_API_KEY?.length||0,workspaceIdLength:process.env.CLOCKIFY_WORKSPACE_ID?.length||0,apiKeyPreview:process.env.CLOCKIFY_API_KEY?`${process.env.CLOCKIFY_API_KEY.substring(0,8)}...`:"Not set",workspaceIdPreview:process.env.CLOCKIFY_WORKSPACE_ID?`${process.env.CLOCKIFY_WORKSPACE_ID.substring(0,8)}...`:"Not set"};return i.NextResponse.json({configStatus:d,environmentVariables:m,recommendations:function(e,t){let s=[];return t.hasApiKey||s.push("Set CLOCKIFY_API_KEY environment variable"),t.hasWorkspaceId||s.push("Set CLOCKIFY_WORKSPACE_ID environment variable"),t.apiKeyLength<20&&s.push("CLOCKIFY_API_KEY appears to be too short - verify it's correct"),t.workspaceIdLength<20&&s.push("CLOCKIFY_WORKSPACE_ID appears to be too short - verify it's correct"),t.hasApiKey&&t.hasWorkspaceId&&!e.configured&&s.push("Check if API key and workspace ID are valid and accessible"),0===s.length&&s.push("Configuration appears correct - check Clockify API status"),s}(d,m)});default:return i.NextResponse.json({error:"Invalid action. Supported actions: status, projects, time-summaries, user, workspaces, import-time-entries, import-stats, test-connection"},{status:400})}}catch(e){return console.error("Clockify API error:",e),i.NextResponse.json({error:e.message||"Failed to fetch Clockify data"},{status:500})}}async function d(e){try{let{action:t,data:s}=await e.json();switch(t){case"enhance-billing-data":let{billingData:r,clockifyReports:o}=s,a=r.map(e=>{let t=o.find(t=>t.projectId===e.projectId||t.projectName.toLowerCase().includes(e.projectName.toLowerCase()));if(t){let s=function(e){let t=e.totalHours>0?e.billableHours/e.totalHours:0,s=e.billableHours>0?e.billableAmount/e.billableHours:0;return{projectId:e.projectId,projectName:e.projectName,totalHours:e.totalHours,billableHours:e.billableHours,nonBillableHours:e.nonBillableHours,hourlyRate:s,totalValue:e.billableAmount,efficiency:t,period:e.period}}(t);return{...e,clockifyData:t,totalHours:t.totalHours,billableHours:t.billableHours,nonBillableHours:t.nonBillableHours,hourlyRate:s.hourlyRate,efficiency:s.efficiency}}return e});return i.NextResponse.json({enhancedData:a});case"set-workspace":let{workspaceId:n}=s;if(n)return c.e1.setWorkspaceId(n),i.NextResponse.json({success:!0,message:"Workspace set successfully"});return i.NextResponse.json({error:"Workspace ID is required"},{status:400});default:return i.NextResponse.json({error:"Invalid action. Supported actions: enhance-billing-data, set-workspace"},{status:400})}}catch(e){return console.error("Clockify POST error:",e),i.NextResponse.json({error:e.message||"Failed to process Clockify data"},{status:500})}}let m=new o.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/clockify/route",pathname:"/api/clockify",filename:"route",bundlePath:"app/api/clockify/route"},resolvedPagePath:"C:\\Users\\Jonathan\\Desktop\\Billing\\app\\api\\clockify\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:f,staticGenerationAsyncStorage:g,serverHooks:C}=m,h="/api/clockify/route";function I(){return(0,n.patchFetch)({serverHooks:C,staticGenerationAsyncStorage:g})}}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[9276,5972,8403,7014],()=>s(6455));module.exports=r})();