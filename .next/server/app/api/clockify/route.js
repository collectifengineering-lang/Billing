"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/clockify/route";
exports.ids = ["app/api/clockify/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Froute&page=%2Fapi%2Fclockify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Froute&page=%2Fapi%2Fclockify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Jonathan_Desktop_Billing_app_api_clockify_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/clockify/route.ts */ \"(rsc)/./app/api/clockify/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/clockify/route\",\n        pathname: \"/api/clockify\",\n        filename: \"route\",\n        bundlePath: \"app/api/clockify/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\Billing\\\\app\\\\api\\\\clockify\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Jonathan_Desktop_Billing_app_api_clockify_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/clockify/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjbG9ja2lmeSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2xvY2tpZnklMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZjbG9ja2lmeSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNtQjtBQUNoRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8/OTRkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxKb25hdGhhblxcXFxEZXNrdG9wXFxcXEJpbGxpbmdcXFxcYXBwXFxcXGFwaVxcXFxjbG9ja2lmeVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY2xvY2tpZnkvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jbG9ja2lmeVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY2xvY2tpZnkvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxKb25hdGhhblxcXFxEZXNrdG9wXFxcXEJpbGxpbmdcXFxcYXBwXFxcXGFwaVxcXFxjbG9ja2lmeVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvY2xvY2tpZnkvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Froute&page=%2Fapi%2Fclockify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/clockify/route.ts":
/*!***********************************!*\
  !*** ./app/api/clockify/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_clockify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/clockify */ \"(rsc)/./lib/clockify.ts\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/utils */ \"(rsc)/./lib/utils.ts\");\n\n\n\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const startDate = searchParams.get(\"startDate\");\n        const endDate = searchParams.get(\"endDate\");\n        const action = searchParams.get(\"action\");\n        // Check if Clockify is configured\n        if (!_lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.isConfigured()) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Clockify not configured\",\n                configStatus: _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getConfigStatus()\n            }, {\n                status: 400\n            });\n        }\n        switch(action){\n            case \"status\":\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    configured: _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.isConfigured(),\n                    configStatus: _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getConfigStatus()\n                });\n            case \"projects\":\n                const projects = await _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getProjects();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    projects\n                });\n            case \"time-summaries\":\n                if (!startDate || !endDate) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: \"startDate and endDate are required for time summaries\"\n                    }, {\n                        status: 400\n                    });\n                }\n                const timeSummaries = await (0,_lib_clockify__WEBPACK_IMPORTED_MODULE_1__.fetchAllClockifyTimeSummaries)(startDate, endDate);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    timeSummaries\n                });\n            case \"user\":\n                const user = await _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getUser();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    user\n                });\n            case \"workspaces\":\n                const workspaces = await _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getWorkspaces();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    workspaces\n                });\n            case \"test-connection\":\n                try {\n                    const user = await _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getUser();\n                    const workspaces = await _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getWorkspaces();\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        user,\n                        workspaces,\n                        message: \"Connection successful\"\n                    });\n                } catch (error) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: false,\n                        error: error.message\n                    }, {\n                        status: 400\n                    });\n                }\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Invalid action. Supported actions: status, projects, time-summaries, user, workspaces, test-connection\"\n                }, {\n                    status: 400\n                });\n        }\n    } catch (error) {\n        console.error(\"Clockify API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message || \"Failed to fetch Clockify data\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { action, data } = body;\n        switch(action){\n            case \"enhance-billing-data\":\n                const { billingData, clockifyReports } = data;\n                const enhancedData = (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.enhanceBillingDataWithClockify)(billingData, clockifyReports);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    enhancedData\n                });\n            case \"set-workspace\":\n                const { workspaceId } = data;\n                if (workspaceId) {\n                    _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.setWorkspaceId(workspaceId);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        message: \"Workspace set successfully\"\n                    });\n                } else {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: \"Workspace ID is required\"\n                    }, {\n                        status: 400\n                    });\n                }\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Invalid action. Supported actions: enhance-billing-data, set-workspace\"\n                }, {\n                    status: 400\n                });\n        }\n    } catch (error) {\n        console.error(\"Clockify POST error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message || \"Failed to process Clockify data\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/clockify/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/clockify.ts":
/*!*************************!*\
  !*** ./lib/clockify.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clockifyService: () => (/* binding */ clockifyService),\n/* harmony export */   fetchAllClockifyTimeSummaries: () => (/* binding */ fetchAllClockifyTimeSummaries),\n/* harmony export */   fetchClockifyProjects: () => (/* binding */ fetchClockifyProjects),\n/* harmony export */   fetchClockifyTimeEntries: () => (/* binding */ fetchClockifyTimeEntries),\n/* harmony export */   fetchClockifyTimeReport: () => (/* binding */ fetchClockifyTimeReport)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n\nclass ClockifyService {\n    constructor(){\n        this.apiKey = \"OTg4NTg3YjMtMmQzYS00ZWE1LThiOTctZmY4NDAwYzRiZjZj\";\n        this.workspaceId = null;\n        this.baseUrl = \"https://api.clockify.me/api/v1\";\n        // Initialize with the provided API key\n        console.log(\"Clockify service initialized with API key\");\n    }\n    getHeaders() {\n        return {\n            \"X-Api-Key\": this.apiKey,\n            \"Content-Type\": \"application/json\"\n        };\n    }\n    async makeRequest(endpoint, params) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.baseUrl}${endpoint}`, {\n                headers: this.getHeaders(),\n                params\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Clockify API error:\", error.response?.data || error.message);\n            throw new Error(`Clockify API error: ${error.response?.data?.message || error.message}`);\n        }\n    }\n    // Get user information\n    async getUser() {\n        return this.makeRequest(\"/user\");\n    }\n    // Get workspaces\n    async getWorkspaces() {\n        return this.makeRequest(\"/workspaces\");\n    }\n    // Get projects for a workspace\n    async getProjects(workspaceId) {\n        const wsId = workspaceId || this.workspaceId;\n        if (!wsId) {\n            // If no workspace ID is provided, get the first workspace\n            const workspaces = await this.getWorkspaces();\n            if (workspaces.length > 0) {\n                this.workspaceId = workspaces[0].id;\n                console.log(`Using workspace: ${workspaces[0].name} (${workspaces[0].id})`);\n            } else {\n                throw new Error(\"No workspaces found\");\n            }\n        }\n        return this.makeRequest(`/workspaces/${this.workspaceId}/projects`);\n    }\n    // Get time entries for a project\n    async getProjectTimeEntries(projectId, startDate, endDate, workspaceId) {\n        const wsId = workspaceId || this.workspaceId;\n        if (!wsId) {\n            throw new Error(\"Workspace ID not configured\");\n        }\n        const params = {};\n        if (startDate) params[\"start\"] = startDate;\n        if (endDate) params[\"end\"] = endDate;\n        return this.makeRequest(`/workspaces/${wsId}/projects/${projectId}/time-entries`, params);\n    }\n    // Get time entries for a user\n    async getUserTimeEntries(userId, startDate, endDate, workspaceId) {\n        const wsId = workspaceId || this.workspaceId;\n        if (!wsId) {\n            throw new Error(\"Workspace ID not configured\");\n        }\n        const params = {};\n        if (startDate) params[\"start\"] = startDate;\n        if (endDate) params[\"end\"] = endDate;\n        return this.makeRequest(`/workspaces/${wsId}/user/${userId}/time-entries`, params);\n    }\n    // Get all time entries for a workspace\n    async getAllTimeEntries(startDate, endDate, workspaceId) {\n        const wsId = workspaceId || this.workspaceId;\n        if (!wsId) {\n            throw new Error(\"Workspace ID not configured\");\n        }\n        const params = {};\n        if (startDate) params[\"start\"] = startDate;\n        if (endDate) params[\"end\"] = endDate;\n        return this.makeRequest(`/workspaces/${wsId}/time-entries`, params);\n    }\n    // Get detailed time report for a project\n    async getProjectTimeReport(projectId, startDate, endDate, workspaceId) {\n        const entries = await this.getProjectTimeEntries(projectId, startDate, endDate, workspaceId);\n        const project = await this.getProjectById(projectId, workspaceId);\n        let totalHours = 0;\n        let billableHours = 0;\n        let nonBillableHours = 0;\n        let totalAmount = 0;\n        let billableAmount = 0;\n        let nonBillableAmount = 0;\n        entries.forEach((entry)=>{\n            const durationMs = this.parseDuration(entry.timeInterval.duration);\n            const hours = durationMs / (1000 * 60 * 60);\n            totalHours += hours;\n            if (entry.billable) {\n                billableHours += hours;\n                billableAmount += entry.costRate?.amount || 0;\n            } else {\n                nonBillableHours += hours;\n                nonBillableAmount += entry.costRate?.amount || 0;\n            }\n            totalAmount += entry.costRate?.amount || 0;\n        });\n        return {\n            projectId,\n            projectName: project?.name || \"Unknown Project\",\n            totalHours,\n            billableHours,\n            nonBillableHours,\n            totalAmount,\n            billableAmount,\n            nonBillableAmount,\n            entries,\n            period: {\n                start: startDate,\n                end: endDate\n            }\n        };\n    }\n    // Get project by ID\n    async getProjectById(projectId, workspaceId) {\n        const wsId = workspaceId || this.workspaceId;\n        if (!wsId) {\n            throw new Error(\"Workspace ID not configured\");\n        }\n        try {\n            return await this.makeRequest(`/workspaces/${wsId}/projects/${projectId}`);\n        } catch (error) {\n            console.error(`Project ${projectId} not found`);\n            return null;\n        }\n    }\n    // Get time summary for a project\n    async getProjectTimeSummary(projectId, startDate, endDate, workspaceId) {\n        const report = await this.getProjectTimeReport(projectId, startDate, endDate, workspaceId);\n        return {\n            projectId: report.projectId,\n            projectName: report.projectName,\n            totalHours: report.totalHours,\n            billableHours: report.billableHours,\n            nonBillableHours: report.nonBillableHours,\n            totalAmount: report.totalAmount,\n            billableAmount: report.billableAmount,\n            nonBillableAmount: report.nonBillableAmount,\n            period: report.period\n        };\n    }\n    // Get all projects with time summaries for a date range\n    async getAllProjectsTimeSummary(startDate, endDate, workspaceId) {\n        const projects = await this.getProjects(workspaceId);\n        const summaries = [];\n        for (const project of projects){\n            try {\n                const summary = await this.getProjectTimeSummary(project.id, startDate, endDate, workspaceId);\n                summaries.push(summary);\n            } catch (error) {\n                console.error(`Error getting summary for project ${project.id}:`, error);\n            }\n        }\n        return summaries;\n    }\n    // Parse duration string (e.g., \"PT2H30M\") to milliseconds\n    parseDuration(duration) {\n        const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/;\n        const match = duration.match(regex);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || \"0\");\n        const minutes = parseInt(match[2] || \"0\");\n        const seconds = parseInt(match[3] || \"0\");\n        return (hours * 3600 + minutes * 60 + seconds) * 1000;\n    }\n    // Check if service is configured\n    isConfigured() {\n        return !!this.apiKey;\n    }\n    // Get configuration status\n    getConfigStatus() {\n        return {\n            apiKey: !!this.apiKey,\n            workspaceId: !!this.workspaceId,\n            configured: this.isConfigured()\n        };\n    }\n    // Set workspace ID\n    setWorkspaceId(workspaceId) {\n        this.workspaceId = workspaceId;\n    }\n}\n// Create singleton instance\nconst clockifyService = new ClockifyService();\n// Export convenience functions\nconst fetchClockifyProjects = async ()=>{\n    try {\n        return await clockifyService.getProjects();\n    } catch (error) {\n        console.error(\"Error fetching Clockify projects:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeEntries = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getProjectTimeEntries(projectId, startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time entries:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeReport = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getProjectTimeReport(projectId, startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time report:\", error);\n        return null;\n    }\n};\nconst fetchAllClockifyTimeSummaries = async (startDate, endDate)=>{\n    try {\n        return await clockifyService.getAllProjectsTimeSummary(startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time summaries:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/clockify.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateDashboardStats: () => (/* binding */ calculateDashboardStats),\n/* harmony export */   calculateProfitabilityMetrics: () => (/* binding */ calculateProfitabilityMetrics),\n/* harmony export */   calculateTimeTrackingKPIs: () => (/* binding */ calculateTimeTrackingKPIs),\n/* harmony export */   cn: () => (/* binding */ cn),\n/* harmony export */   createChartData: () => (/* binding */ createChartData),\n/* harmony export */   enhanceBillingDataWithClockify: () => (/* binding */ enhanceBillingDataWithClockify),\n/* harmony export */   formatCurrency: () => (/* binding */ formatCurrency),\n/* harmony export */   formatEfficiency: () => (/* binding */ formatEfficiency),\n/* harmony export */   formatHours: () => (/* binding */ formatHours),\n/* harmony export */   formatMonth: () => (/* binding */ formatMonth),\n/* harmony export */   generateMonthRange: () => (/* binding */ generateMonthRange),\n/* harmony export */   getChartMonthRange: () => (/* binding */ getChartMonthRange),\n/* harmony export */   getCurrentMonthRange: () => (/* binding */ getCurrentMonthRange),\n/* harmony export */   getProjectionsMonthRange: () => (/* binding */ getProjectionsMonthRange),\n/* harmony export */   initializeProjectionsTable: () => (/* binding */ initializeProjectionsTable),\n/* harmony export */   isCurrentMonth: () => (/* binding */ isCurrentMonth),\n/* harmony export */   isFutureMonth: () => (/* binding */ isFutureMonth),\n/* harmony export */   isLocalStorageAvailable: () => (/* binding */ isLocalStorageAvailable),\n/* harmony export */   isPastMonth: () => (/* binding */ isPastMonth),\n/* harmony export */   processBillingData: () => (/* binding */ processBillingData),\n/* harmony export */   safeLocalStorageGet: () => (/* binding */ safeLocalStorageGet),\n/* harmony export */   safeLocalStorageRemove: () => (/* binding */ safeLocalStorageRemove),\n/* harmony export */   safeLocalStorageSet: () => (/* binding */ safeLocalStorageSet)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(rsc)/./node_modules/date-fns/esm/startOfMonth/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(rsc)/./node_modules/date-fns/esm/endOfMonth/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(rsc)/./node_modules/date-fns/esm/format/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(rsc)/./node_modules/date-fns/esm/addMonths/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(rsc)/./node_modules/date-fns/esm/subMonths/index.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(rsc)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind-merge */ \"(rsc)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n\n\n\nfunction cn(...inputs) {\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_1__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\nfunction generateMonthRange(startDate, endDate) {\n    const months = [];\n    let currentDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(startDate);\n    const end = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(endDate);\n    while(currentDate <= end){\n        months.push((0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currentDate, \"yyyy-MM\"));\n        currentDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currentDate, 1);\n    }\n    return months;\n}\nfunction getCurrentMonthRange(monthsBack = 12, monthsForward = 24) {\n    const today = new Date();\n    const startDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(today, monthsBack);\n    const endDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(today, monthsForward);\n    return generateMonthRange(startDate, endDate);\n}\nfunction getProjectionsMonthRange() {\n    const startDate = new Date(2022, 0, 1); // January 1, 2022\n    const today = new Date();\n    const endDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(today, 24); // 24 months beyond current month\n    return generateMonthRange(startDate, endDate);\n}\nfunction getChartMonthRange() {\n    const today = new Date();\n    const startDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(today, 12); // 1 year in the past\n    const endDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(today, 12); // 1 year in the future\n    return generateMonthRange(startDate, endDate);\n}\nfunction processBillingData(projects, invoices, projections) {\n    // Handle undefined or null inputs\n    const safeProjects = projects || [];\n    const safeInvoices = invoices || [];\n    const safeProjections = projections || {};\n    const monthRange = getProjectionsMonthRange();\n    return safeProjects.map((project)=>{\n        const projectInvoices = safeInvoices.filter((invoice)=>invoice.project_id === project.project_id);\n        const monthlyData = monthRange.map((month)=>{\n            const monthInvoices = projectInvoices.filter((invoice)=>{\n                const invoiceMonth = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(invoice.date), \"yyyy-MM\");\n                return invoiceMonth === month;\n            });\n            const billed = monthInvoices.reduce((sum, invoice)=>sum + invoice.billed_amount, 0);\n            const unbilled = monthInvoices.reduce((sum, invoice)=>sum + invoice.unbilled_amount, 0);\n            const projected = safeProjections[project.project_id]?.months?.[month]?.value || 0;\n            const actual = billed + unbilled;\n            return {\n                month,\n                billed,\n                unbilled,\n                projected,\n                actual\n            };\n        });\n        const totalBilled = monthlyData.reduce((sum, data)=>sum + data.billed, 0);\n        const totalUnbilled = monthlyData.reduce((sum, data)=>sum + data.unbilled, 0);\n        const totalProjected = monthlyData.reduce((sum, data)=>sum + data.projected, 0);\n        return {\n            projectId: project.project_id,\n            projectName: project.project_name,\n            customerName: project.customer_name,\n            signedFee: undefined,\n            monthlyData,\n            totalBilled,\n            totalUnbilled,\n            totalProjected\n        };\n    });\n}\nfunction calculateDashboardStats(billingData, closedProjects, monthlyProjections, monthlyStatuses) {\n    // Handle undefined or null billingData\n    if (!billingData || !Array.isArray(billingData)) {\n        return {\n            totalProjects: 0,\n            totalBilled: 0,\n            totalUnbilled: 0,\n            totalProjected: 0,\n            activeProjects: 0,\n            // Clockify KPIs\n            totalHours: 0,\n            billableHours: 0,\n            nonBillableHours: 0,\n            averageHourlyRate: 0,\n            totalTimeValue: 0,\n            efficiency: 0,\n            averageHoursPerProject: 0,\n            topPerformingProjects: []\n        };\n    }\n    const totalProjects = billingData.length;\n    const closedProjectsCount = closedProjects ? closedProjects.size : 0;\n    const activeProjects = totalProjects - closedProjectsCount;\n    // Use database projections and statuses if provided, otherwise fall back to localStorage\n    const projections = monthlyProjections || safeLocalStorageGet(\"monthlyProjections\") || {};\n    const statuses = monthlyStatuses || safeLocalStorageGet(\"monthlyStatuses\") || {};\n    // Calculate Total Billed YTD (sum of all projections marked as \"Billed\" for current year)\n    const currentYear = new Date().getFullYear().toString();\n    let totalBilledYTD = 0;\n    Object.keys(projections).forEach((projectId)=>{\n        const projectProjections = projections[projectId];\n        const projectStatuses = statuses[projectId];\n        if (projectProjections && projectStatuses) {\n            Object.keys(projectProjections).forEach((month)=>{\n                // Check if month is in current year and status is \"Billed\"\n                if (month.startsWith(currentYear) && projectStatuses[month] === \"Billed\") {\n                    totalBilledYTD += projectProjections[month] || 0;\n                }\n            });\n        }\n    });\n    // Calculate Backlog (sum of all projections NOT marked as \"Billed\" for current and future months)\n    const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n    let backlog = 0;\n    Object.keys(projections).forEach((projectId)=>{\n        const projectProjections = projections[projectId];\n        const projectStatuses = statuses[projectId];\n        if (projectProjections && projectStatuses) {\n            Object.keys(projectProjections).forEach((month)=>{\n                // Check if month is current or future and status is NOT \"Billed\"\n                if (month >= currentMonth && projectStatuses[month] !== \"Billed\") {\n                    backlog += projectProjections[month] || 0;\n                }\n            });\n        }\n    });\n    // Calculate Total Projected (sum of all projections for current and future months)\n    let totalProjected = 0;\n    Object.keys(projections).forEach((projectId)=>{\n        const projectProjections = projections[projectId];\n        if (projectProjections) {\n            Object.keys(projectProjections).forEach((month)=>{\n                // Include all projections for current and future months\n                if (month >= currentMonth) {\n                    totalProjected += projectProjections[month] || 0;\n                }\n            });\n        }\n    });\n    // Calculate Clockify KPIs\n    let totalHours = 0;\n    let billableHours = 0;\n    let nonBillableHours = 0;\n    let totalTimeValue = 0;\n    let totalHourlyRate = 0;\n    let projectsWithTimeData = 0;\n    const projectEfficiencies = [];\n    billingData.forEach((project)=>{\n        if (project.clockifyData) {\n            const timeData = project.clockifyData;\n            totalHours += timeData.totalHours;\n            billableHours += timeData.billableHours;\n            nonBillableHours += timeData.nonBillableHours;\n            totalTimeValue += timeData.billableAmount;\n            if (timeData.totalHours > 0) {\n                const efficiency = timeData.billableHours / timeData.totalHours;\n                projectEfficiencies.push({\n                    projectId: project.projectId,\n                    efficiency,\n                    hours: timeData.totalHours\n                });\n                projectsWithTimeData++;\n            }\n        }\n    });\n    const averageHourlyRate = projectsWithTimeData > 0 ? totalTimeValue / billableHours : 0;\n    const efficiency = totalHours > 0 ? billableHours / totalHours : 0;\n    const averageHoursPerProject = projectsWithTimeData > 0 ? totalHours / projectsWithTimeData : 0;\n    // Get top performing projects (by efficiency and hours)\n    const topPerformingProjects = projectEfficiencies.sort((a, b)=>b.efficiency * b.hours - a.efficiency * a.hours).slice(0, 5).map((p)=>p.projectId);\n    return {\n        totalProjects,\n        totalBilled: totalBilledYTD,\n        totalUnbilled: backlog,\n        totalProjected,\n        activeProjects,\n        // Clockify KPIs\n        totalHours,\n        billableHours,\n        nonBillableHours,\n        averageHourlyRate,\n        totalTimeValue,\n        efficiency,\n        averageHoursPerProject,\n        topPerformingProjects\n    };\n}\nfunction formatCurrency(amount) {\n    return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\"\n    }).format(amount);\n}\nfunction formatMonth(monthString) {\n    const [year, month] = monthString.split(\"-\");\n    const date = new Date(parseInt(year), parseInt(month) - 1);\n    return (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(date, \"MMM yyyy\");\n}\nfunction isCurrentMonth(monthString) {\n    const currentMonth = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(), \"yyyy-MM\");\n    return monthString === currentMonth;\n}\nfunction isFutureMonth(monthString) {\n    const currentMonth = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(), \"yyyy-MM\");\n    return monthString > currentMonth;\n}\nfunction isPastMonth(monthString) {\n    const currentMonth = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(), \"yyyy-MM\");\n    return monthString < currentMonth;\n}\n// localStorage utility functions\nfunction isLocalStorageAvailable() {\n    try {\n        const test = \"__localStorage_test__\";\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n    } catch  {\n        return false;\n    }\n}\nfunction safeLocalStorageGet(key) {\n    if (!isLocalStorageAvailable()) {\n        console.warn(\"localStorage is not available\");\n        return null;\n    }\n    try {\n        const item = localStorage.getItem(key);\n        return item ? JSON.parse(item) : null;\n    } catch (error) {\n        console.error(`Error reading from localStorage key '${key}':`, error);\n        return null;\n    }\n}\nfunction safeLocalStorageSet(key, value) {\n    if (!isLocalStorageAvailable()) {\n        console.warn(\"localStorage is not available\");\n        return false;\n    }\n    try {\n        localStorage.setItem(key, JSON.stringify(value));\n        return true;\n    } catch (error) {\n        console.error(`Error writing to localStorage key '${key}':`, error);\n        return false;\n    }\n}\nfunction safeLocalStorageRemove(key) {\n    if (!isLocalStorageAvailable()) {\n        return false;\n    }\n    try {\n        localStorage.removeItem(key);\n        return true;\n    } catch (error) {\n        console.error(`Error removing localStorage key '${key}':`, error);\n        return false;\n    }\n}\nfunction createChartData(billingData) {\n    return billingData.map((data)=>({\n            name: data.projectName,\n            billed: data.totalBilled,\n            unbilled: data.totalUnbilled,\n            projected: data.totalProjected\n        }));\n}\nfunction initializeProjectionsTable(projects) {\n    // Handle undefined or null projects\n    const safeProjects = projects || [];\n    const monthRange = getProjectionsMonthRange();\n    const table = {};\n    safeProjects.forEach((project)=>{\n        table[project.project_id] = {\n            months: {},\n            asrFee: 0\n        };\n        monthRange.forEach((month)=>{\n            const isEditable = isFutureMonth(month);\n            table[project.project_id].months[month] = {\n                value: 0,\n                isEditable,\n                isProjected: isEditable\n            };\n        });\n    });\n    return table;\n}\n// New functions for Clockify integration\nfunction calculateTimeTrackingKPIs(clockifyData) {\n    const efficiency = clockifyData.totalHours > 0 ? clockifyData.billableHours / clockifyData.totalHours : 0;\n    const averageHourlyRate = clockifyData.billableHours > 0 ? clockifyData.billableAmount / clockifyData.billableHours : 0;\n    return {\n        projectId: clockifyData.projectId,\n        projectName: clockifyData.projectName,\n        totalHours: clockifyData.totalHours,\n        billableHours: clockifyData.billableHours,\n        nonBillableHours: clockifyData.nonBillableHours,\n        hourlyRate: averageHourlyRate,\n        totalValue: clockifyData.billableAmount,\n        efficiency,\n        period: clockifyData.period\n    };\n}\nfunction enhanceBillingDataWithClockify(billingData, clockifyReports) {\n    return billingData.map((project)=>{\n        const clockifyReport = clockifyReports.find((report)=>report.projectId === project.projectId || report.projectName.toLowerCase().includes(project.projectName.toLowerCase()));\n        if (clockifyReport) {\n            const timeTrackingKPI = calculateTimeTrackingKPIs(clockifyReport);\n            return {\n                ...project,\n                clockifyData: clockifyReport,\n                totalHours: clockifyReport.totalHours,\n                billableHours: clockifyReport.billableHours,\n                nonBillableHours: clockifyReport.nonBillableHours,\n                hourlyRate: timeTrackingKPI.hourlyRate,\n                efficiency: timeTrackingKPI.efficiency\n            };\n        }\n        return project;\n    });\n}\nfunction calculateProfitabilityMetrics(billingData, timeTrackingKPI) {\n    const revenue = billingData.totalBilled + billingData.totalUnbilled;\n    const cost = timeTrackingKPI ? timeTrackingKPI.totalValue : 0;\n    const profit = revenue - cost;\n    const margin = revenue > 0 ? profit / revenue * 100 : 0;\n    return {\n        revenue,\n        cost,\n        profit,\n        margin\n    };\n}\nfunction formatHours(hours) {\n    const wholeHours = Math.floor(hours);\n    const minutes = Math.round((hours - wholeHours) * 60);\n    return `${wholeHours}h ${minutes}m`;\n}\nfunction formatEfficiency(efficiency) {\n    return `${(efficiency * 100).toFixed(1)}%`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/form-data","vendor-chunks/get-intrinsic","vendor-chunks/asynckit","vendor-chunks/combined-stream","vendor-chunks/mime-types","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/es-set-tostringtag","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/has-flag","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/date-fns","vendor-chunks/tailwind-merge","vendor-chunks/@babel","vendor-chunks/clsx"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Froute&page=%2Fapi%2Fclockify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();