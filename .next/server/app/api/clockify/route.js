"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/clockify/route";
exports.ids = ["app/api/clockify/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Froute&page=%2Fapi%2Fclockify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Froute&page=%2Fapi%2Fclockify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Jonathan_Desktop_Billing_app_api_clockify_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/clockify/route.ts */ \"(rsc)/./app/api/clockify/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/clockify/route\",\n        pathname: \"/api/clockify\",\n        filename: \"route\",\n        bundlePath: \"app/api/clockify/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\Billing\\\\app\\\\api\\\\clockify\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Jonathan_Desktop_Billing_app_api_clockify_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/clockify/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjbG9ja2lmeSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2xvY2tpZnklMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZjbG9ja2lmeSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNtQjtBQUNoRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8/OTRkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxKb25hdGhhblxcXFxEZXNrdG9wXFxcXEJpbGxpbmdcXFxcYXBwXFxcXGFwaVxcXFxjbG9ja2lmeVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY2xvY2tpZnkvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jbG9ja2lmeVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY2xvY2tpZnkvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxKb25hdGhhblxcXFxEZXNrdG9wXFxcXEJpbGxpbmdcXFxcYXBwXFxcXGFwaVxcXFxjbG9ja2lmeVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvY2xvY2tpZnkvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Froute&page=%2Fapi%2Fclockify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/clockify/route.ts":
/*!***********************************!*\
  !*** ./app/api/clockify/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_clockify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/clockify */ \"(rsc)/./lib/clockify.ts\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/utils */ \"(rsc)/./lib/utils.ts\");\n\n\n\n// Force dynamic rendering to prevent static generation errors\nconst dynamic = \"force-dynamic\";\n// Helper function to provide configuration recommendations\nfunction getConfigRecommendations(configStatus, envVars) {\n    const recommendations = [];\n    if (!envVars.hasApiKey) {\n        recommendations.push(\"Set CLOCKIFY_API_KEY environment variable\");\n    }\n    if (!envVars.hasWorkspaceId) {\n        recommendations.push(\"Set CLOCKIFY_WORKSPACE_ID environment variable\");\n    }\n    if (envVars.apiKeyLength < 20) {\n        recommendations.push(\"CLOCKIFY_API_KEY appears to be too short - verify it's correct\");\n    }\n    if (envVars.workspaceIdLength < 20) {\n        recommendations.push(\"CLOCKIFY_WORKSPACE_ID appears to be too short - verify it's correct\");\n    }\n    if (envVars.hasApiKey && envVars.hasWorkspaceId && !configStatus.configured) {\n        recommendations.push(\"Check if API key and workspace ID are valid and accessible\");\n    }\n    if (recommendations.length === 0) {\n        recommendations.push(\"Configuration appears correct - check Clockify API status\");\n    }\n    return recommendations;\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const startDate = searchParams.get(\"startDate\");\n        const endDate = searchParams.get(\"endDate\");\n        const action = searchParams.get(\"action\");\n        // Check if Clockify is configured\n        if (!_lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.isConfigured()) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Clockify not configured\",\n                configStatus: _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getConfigStatus()\n            }, {\n                status: 400\n            });\n        }\n        switch(action){\n            case \"status\":\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    configured: _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.isConfigured(),\n                    configStatus: _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getConfigStatus()\n                });\n            case \"projects\":\n                const projects = await _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getProjects();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    projects\n                });\n            case \"time-summaries\":\n                if (!startDate || !endDate) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: \"startDate and endDate are required for time summaries\"\n                    }, {\n                        status: 400\n                    });\n                }\n                const timeSummaries = await (0,_lib_clockify__WEBPACK_IMPORTED_MODULE_1__.fetchAllClockifyTimeSummaries)(startDate, endDate);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    timeSummaries\n                });\n            case \"user\":\n                const user = await _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getUser();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    user\n                });\n            case \"workspaces\":\n                const workspaces = await _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getWorkspaces();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    workspaces\n                });\n            case \"test-connection\":\n                try {\n                    const user = await _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getUser();\n                    const workspaces = await _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getWorkspaces();\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        user,\n                        workspaces,\n                        message: \"Connection successful\"\n                    });\n                } catch (error) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: false,\n                        error: error.message\n                    }, {\n                        status: 400\n                    });\n                }\n            case \"validate-config\":\n                const configStatus = _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getConfigStatus();\n                const envVars = {\n                    hasApiKey: !!process.env.CLOCKIFY_API_KEY,\n                    hasWorkspaceId: !!process.env.CLOCKIFY_WORKSPACE_ID,\n                    apiKeyLength: process.env.CLOCKIFY_API_KEY?.length || 0,\n                    workspaceIdLength: process.env.CLOCKIFY_WORKSPACE_ID?.length || 0,\n                    apiKeyPreview: process.env.CLOCKIFY_API_KEY ? `${process.env.CLOCKIFY_API_KEY.substring(0, 8)}...` : \"Not set\",\n                    workspaceIdPreview: process.env.CLOCKIFY_WORKSPACE_ID ? `${process.env.CLOCKIFY_WORKSPACE_ID.substring(0, 8)}...` : \"Not set\"\n                };\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    configStatus,\n                    environmentVariables: envVars,\n                    recommendations: getConfigRecommendations(configStatus, envVars)\n                });\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Invalid action. Supported actions: status, projects, time-summaries, user, workspaces, test-connection\"\n                }, {\n                    status: 400\n                });\n        }\n    } catch (error) {\n        console.error(\"Clockify API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message || \"Failed to fetch Clockify data\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { action, data } = body;\n        switch(action){\n            case \"enhance-billing-data\":\n                const { billingData, clockifyReports } = data;\n                const enhancedData = (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.enhanceBillingDataWithClockify)(billingData, clockifyReports);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    enhancedData\n                });\n            case \"set-workspace\":\n                const { workspaceId } = data;\n                if (workspaceId) {\n                    _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.setWorkspaceId(workspaceId);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        message: \"Workspace set successfully\"\n                    });\n                } else {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: \"Workspace ID is required\"\n                    }, {\n                        status: 400\n                    });\n                }\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Invalid action. Supported actions: enhance-billing-data, set-workspace\"\n                }, {\n                    status: 400\n                });\n        }\n    } catch (error) {\n        console.error(\"Clockify POST error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message || \"Failed to process Clockify data\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/clockify/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/clockify.ts":
/*!*************************!*\
  !*** ./lib/clockify.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clockifyService: () => (/* binding */ clockifyService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fetchAllClockifyTimeSummaries: () => (/* binding */ fetchAllClockifyTimeSummaries),\n/* harmony export */   fetchClockifyProjects: () => (/* binding */ fetchClockifyProjects),\n/* harmony export */   fetchClockifyTimeEntries: () => (/* binding */ fetchClockifyTimeEntries),\n/* harmony export */   fetchClockifyTimeReport: () => (/* binding */ fetchClockifyTimeReport)\n/* harmony export */ });\nclass ClockifyService {\n    constructor(){\n        this.apiKey = null;\n        this.workspaceId = null;\n        this.baseUrl = \"https://api.clockify.me/api/v1\";\n        this._isConfigured = false;\n        this.apiKey = process.env.CLOCKIFY_API_KEY || null;\n        this.workspaceId = process.env.CLOCKIFY_WORKSPACE_ID || null;\n        // Check if we have valid credentials\n        if (this.apiKey && this.apiKey !== \"your_clockify_api_key_here\" && this.workspaceId && this.workspaceId !== \"your_clockify_workspace_id_here\") {\n            this._isConfigured = true;\n            console.log(\"Clockify service initialized with valid credentials\");\n        } else {\n            this._isConfigured = false;\n            console.warn(\"Clockify service initialized without valid credentials - will use mock data\");\n            console.warn(\"Please set CLOCKIFY_API_KEY and CLOCKIFY_WORKSPACE_ID in your environment variables\");\n        }\n    }\n    getHeaders() {\n        if (!this.apiKey) {\n            throw new Error(\"Clockify API key not configured\");\n        }\n        return {\n            \"X-Api-Key\": this.apiKey,\n            \"Content-Type\": \"application/json\"\n        };\n    }\n    async makeRequest(endpoint, params) {\n        if (!this._isConfigured) {\n            throw new Error(\"Clockify service not properly configured\");\n        }\n        try {\n            const url = new URL(`${this.baseUrl}${endpoint}`);\n            if (params) {\n                Object.keys(params).forEach((key)=>{\n                    if (params[key] !== undefined && params[key] !== null) {\n                        url.searchParams.append(key, params[key]);\n                    }\n                });\n            }\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            console.log(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            console.log(`📡 Clockify API Response: ${response.status} ${response.statusText}`);\n            if (response.status === 401) {\n                throw new Error(\"Clockify API authentication failed - check your API key\");\n            }\n            if (response.status === 403) {\n                throw new Error(\"Clockify API access forbidden - check your workspace ID and permissions\");\n            }\n            if (response.status === 404) {\n                const errorDetails = `Endpoint not found: ${endpoint}`;\n                console.error(`❌ 404 Error Details: ${errorDetails}`);\n                console.error(`   Full URL: ${url.toString()}`);\n                console.error(`   Workspace ID: ${this.workspaceId}`);\n                console.error(`   API Key configured: ${!!this.apiKey}`);\n                throw new Error(`Clockify API error: 404 Not Found - ${errorDetails}`);\n            }\n            if (response.status === 429) {\n                throw new Error(\"Clockify API rate limit exceeded - try again later\");\n            }\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: ${endpoint}`);\n            return data;\n        } catch (error) {\n            if (error instanceof Error) {\n                console.error(`❌ Clockify API Error in ${endpoint}:`, error.message);\n                throw error;\n            }\n            throw new Error(`Clockify API request failed: ${error}`);\n        }\n    }\n    // Check if the service is properly configured\n    isConfigured() {\n        return this._isConfigured;\n    }\n    // Get configuration status for debugging\n    getConfigurationStatus() {\n        return {\n            configured: this._isConfigured,\n            hasApiKey: !!(this.apiKey && this.apiKey !== \"your_clockify_api_key_here\"),\n            hasWorkspaceId: !!(this.workspaceId && this.workspaceId !== \"your_clockify_workspace_id_here\")\n        };\n    }\n    // Alias for getConfigurationStatus to match API usage\n    getConfigStatus() {\n        return this.getConfigurationStatus();\n    }\n    // Method to set workspace ID dynamically\n    setWorkspaceId(workspaceId) {\n        this.workspaceId = workspaceId;\n        if (this.apiKey && this.apiKey !== \"your_clockify_api_key_here\") {\n            this._isConfigured = true;\n        }\n    }\n    async getUser() {\n        try {\n            return await this.makeRequest(\"/user\");\n        } catch (error) {\n            console.error(\"Failed to get Clockify user:\", error);\n            // Return mock user data when Clockify fails\n            return {\n                id: \"mock-user-id\",\n                name: \"Mock User\",\n                email: \"user@example.com\",\n                status: \"ACTIVE\"\n            };\n        }\n    }\n    async getWorkspaces() {\n        try {\n            return await this.makeRequest(\"/workspaces\");\n        } catch (error) {\n            console.error(\"Failed to get Clockify workspaces:\", error);\n            // Return mock workspace data when Clockify fails\n            return [\n                {\n                    id: \"mock-workspace-id\",\n                    name: \"Mock Workspace\",\n                    hourlyRate: {\n                        amount: 100,\n                        currency: \"USD\"\n                    }\n                }\n            ];\n        }\n    }\n    async getProjects() {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            return await this.makeRequest(`/workspaces/${this.workspaceId}/projects`);\n        } catch (error) {\n            console.error(\"Failed to get Clockify projects:\", error);\n            // Return mock project data when Clockify fails\n            return [\n                {\n                    id: \"mock-project-1\",\n                    name: \"Mock Project 1\",\n                    clientId: \"mock-client-1\",\n                    clientName: \"Mock Client 1\",\n                    status: \"ACTIVE\",\n                    billable: true,\n                    hourlyRate: {\n                        amount: 150,\n                        currency: \"USD\"\n                    }\n                },\n                {\n                    id: \"mock-project-2\",\n                    name: \"Mock Project 2\",\n                    clientId: \"mock-client-2\",\n                    clientName: \"Mock Client 2\",\n                    status: \"ACTIVE\",\n                    billable: true,\n                    hourlyRate: {\n                        amount: 175,\n                        currency: \"USD\"\n                    }\n                }\n            ];\n        }\n    }\n    async getTimeEntries(projectId, startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            return await this.makeRequest(`/workspaces/${this.workspaceId}/projects/${projectId}/time-entries`, {\n                start: startDate,\n                end: endDate\n            });\n        } catch (error) {\n            console.error(\"Failed to get Clockify time entries:\", error);\n            // Return mock time entry data when Clockify fails\n            return [\n                {\n                    id: \"mock-time-entry-1\",\n                    description: \"Mock work session\",\n                    timeInterval: {\n                        start: startDate,\n                        end: endDate,\n                        duration: \"PT2H30M\"\n                    },\n                    billable: true,\n                    userId: \"mock-user-id\",\n                    userName: \"Mock User\"\n                }\n            ];\n        }\n    }\n    async getAllTimeEntries(startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            // Clockify API requires POST for filtered time entries with date parameters\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/time-entries`);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            console.log(`   Method: POST`);\n            console.log(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n            console.log(`   Body: ${JSON.stringify({\n                start: startDate,\n                end: endDate\n            })}`);\n            const response = await fetch(url.toString(), {\n                method: \"POST\",\n                headers: {\n                    ...this.getHeaders(),\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    start: startDate,\n                    end: endDate\n                })\n            });\n            console.log(`📡 Clockify API Response: ${response.status} ${response.statusText}`);\n            if (response.status === 401) {\n                throw new Error(\"Clockify API authentication failed - check your API key\");\n            }\n            if (response.status === 403) {\n                throw new Error(\"Clockify API access forbidden - check your workspace ID and permissions\");\n            }\n            if (response.status === 404) {\n                const errorDetails = `Endpoint not found: /workspaces/${this.workspaceId}/time-entries`;\n                console.error(`❌ 404 Error Details: ${errorDetails}`);\n                console.error(`   Full URL: ${url.toString()}`);\n                console.error(`   Workspace ID: ${this.workspaceId}`);\n                console.error(`   API Key configured: ${!!this.apiKey}`);\n                throw new Error(`Clockify API error: 404 Not Found - ${errorDetails}`);\n            }\n            if (response.status === 405) {\n                throw new Error(\"Clockify API method not allowed - this endpoint requires POST method\");\n            }\n            if (response.status === 429) {\n                throw new Error(\"Clockify API rate limit exceeded - try again later\");\n            }\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /workspaces/${this.workspaceId}/time-entries`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get all Clockify time entries:\", error);\n            // Return mock time entry data when Clockify fails\n            return [\n                {\n                    id: \"mock-time-entry-1\",\n                    description: \"Mock work session\",\n                    timeInterval: {\n                        start: startDate,\n                        end: endDate,\n                        duration: \"PT8H0M\"\n                    },\n                    billable: true,\n                    userId: \"mock-user-id\",\n                    userName: \"Mock User\",\n                    projectId: \"mock-project-1\",\n                    projectName: \"Mock Project 1\"\n                }\n            ];\n        }\n    }\n    async getUsers() {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            return await this.makeRequest(`/workspaces/${this.workspaceId}/users`);\n        } catch (error) {\n            console.error(\"Failed to get Clockify users:\", error);\n            // Return mock user data when Clockify fails\n            return [\n                {\n                    id: \"mock-user-1\",\n                    name: \"Mock User 1\",\n                    email: \"user1@example.com\",\n                    status: \"ACTIVE\",\n                    hourlyRate: {\n                        amount: 100,\n                        currency: \"USD\"\n                    }\n                },\n                {\n                    id: \"mock-user-2\",\n                    name: \"Mock User 2\",\n                    email: \"user2@example.com\",\n                    status: \"ACTIVE\",\n                    hourlyRate: {\n                        amount: 120,\n                        currency: \"USD\"\n                    }\n                }\n            ];\n        }\n    }\n    async getProjectTimeReport(projectId, startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const timeEntries = await this.getTimeEntries(projectId, startDate, endDate);\n            const project = await this.getProjects().then((projects)=>projects.find((p)=>p.id === projectId));\n            if (!project) {\n                throw new Error(\"Project not found\");\n            }\n            const totalHours = timeEntries.reduce((sum, entry)=>{\n                const duration = entry.timeInterval.duration;\n                const hours = this.parseDuration(duration);\n                return sum + hours;\n            }, 0);\n            const billableHours = timeEntries.filter((entry)=>entry.billable).reduce((sum, entry)=>{\n                const duration = entry.timeInterval.duration;\n                const hours = this.parseDuration(duration);\n                return sum + hours;\n            }, 0);\n            const nonBillableHours = totalHours - billableHours;\n            return {\n                projectId,\n                projectName: project.name,\n                totalHours,\n                billableHours,\n                nonBillableHours,\n                totalAmount: totalHours * (project.hourlyRate?.amount || 0),\n                billableAmount: billableHours * (project.hourlyRate?.amount || 0),\n                nonBillableAmount: nonBillableHours * (project.hourlyRate?.amount || 0),\n                entries: timeEntries,\n                period: {\n                    start: startDate,\n                    end: endDate\n                }\n            };\n        } catch (error) {\n            console.error(\"Failed to get project time report:\", error);\n            return null;\n        }\n    }\n    async getAllProjectsTimeSummary(startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const projects = await this.getProjects();\n            const reports = [];\n            for (const project of projects){\n                const report = await this.getProjectTimeReport(project.id, startDate, endDate);\n                if (report) {\n                    reports.push(report);\n                }\n            }\n            return reports;\n        } catch (error) {\n            console.error(\"Failed to get all projects time summary:\", error);\n            return [];\n        }\n    }\n    // Helper method to parse ISO 8601 duration to hours\n    parseDuration(duration) {\n        const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || \"0\");\n        const minutes = parseInt(match[2] || \"0\");\n        const seconds = parseInt(match[3] || \"0\");\n        return hours + minutes / 60 + seconds / 3600;\n    }\n}\n// Create the service instance\nconst clockifyService = new ClockifyService();\n// Export the service instance as both default and named export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clockifyService);\n\n// Export convenience functions\nconst fetchClockifyProjects = async ()=>{\n    try {\n        return await clockifyService.getProjects();\n    } catch (error) {\n        console.error(\"Error fetching Clockify projects:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeEntries = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getTimeEntries(projectId, startDate || \"\", endDate || \"\");\n    } catch (error) {\n        console.error(\"Error fetching Clockify time entries:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeReport = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getProjectTimeReport(projectId, startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time report:\", error);\n        return null;\n    }\n};\nconst fetchAllClockifyTimeSummaries = async (startDate, endDate)=>{\n    try {\n        return await clockifyService.getAllProjectsTimeSummary(startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time summaries:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFxQ0E7UUFDbkQsT0FBTyxFQUFFO0lBQ1g7QUFDRixFQUFFO0FBRUssTUFBTXlFLDJCQUEyQixPQUN0QzdDLFdBQ0FDLFdBQ0FDO0lBRUEsSUFBSTtRQUNGLE9BQU8sTUFBTXlDLGdCQUFnQjVDLGNBQWMsQ0FBQ0MsV0FBV0MsYUFBYSxJQUFJQyxXQUFXO0lBQ3JGLEVBQUUsT0FBTzlCLE9BQU87UUFDZDNCLFFBQVEyQixLQUFLLENBQUMseUNBQXlDQTtRQUN2RCxPQUFPLEVBQUU7SUFDWDtBQUNGLEVBQUU7QUFFSyxNQUFNMEUsMEJBQTBCLE9BQ3JDOUMsV0FDQUMsV0FDQUM7SUFFQSxJQUFJO1FBQ0YsT0FBTyxNQUFNeUMsZ0JBQWdCN0Isb0JBQW9CLENBQUNkLFdBQVdDLFdBQVdDO0lBQzFFLEVBQUUsT0FBTzlCLE9BQU87UUFDZDNCLFFBQVEyQixLQUFLLENBQUMsd0NBQXdDQTtRQUN0RCxPQUFPO0lBQ1Q7QUFDRixFQUFFO0FBRUssTUFBTTJFLGdDQUFnQyxPQUMzQzlDLFdBQ0FDO0lBRUEsSUFBSTtRQUNGLE9BQU8sTUFBTXlDLGdCQUFnQlIseUJBQXlCLENBQUNsQyxXQUFXQztJQUNwRSxFQUFFLE9BQU85QixPQUFPO1FBQ2QzQixRQUFRMkIsS0FBSyxDQUFDLDJDQUEyQ0E7UUFDekQsT0FBTyxFQUFFO0lBQ1g7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vem9oby1iaWxsaW5nLXBsYXRmb3JtLy4vbGliL2Nsb2NraWZ5LnRzPzkwZmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuZXhwb3J0IGludGVyZmFjZSBDbG9ja2lmeVRpbWVFbnRyeSB7XG4gIGlkOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHVzZXJJZDogc3RyaW5nO1xuICBiaWxsYWJsZTogYm9vbGVhbjtcbiAgdGFza0lkPzogc3RyaW5nO1xuICBwcm9qZWN0SWQ6IHN0cmluZztcbiAgdGltZUludGVydmFsOiB7XG4gICAgc3RhcnQ6IHN0cmluZztcbiAgICBlbmQ/OiBzdHJpbmc7XG4gICAgZHVyYXRpb246IHN0cmluZztcbiAgfTtcbiAgaG91cmx5UmF0ZT86IHtcbiAgICBhbW91bnQ6IG51bWJlcjtcbiAgICBjdXJyZW5jeTogc3RyaW5nO1xuICB9O1xuICBjb3N0UmF0ZT86IHtcbiAgICBhbW91bnQ6IG51bWJlcjtcbiAgICBjdXJyZW5jeTogc3RyaW5nO1xuICB9O1xuICBpc0xvY2tlZDogYm9vbGVhbjtcbiAgY3VzdG9tRmllbGRWYWx1ZXM6IGFueVtdO1xuICB0eXBlOiBzdHJpbmc7XG4gIHRhZ3M6IGFueVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsb2NraWZ5UHJvamVjdCB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgd29ya3NwYWNlSWQ6IHN0cmluZztcbiAgY2xpZW50SWQ/OiBzdHJpbmc7XG4gIGNsaWVudE5hbWU/OiBzdHJpbmc7XG4gIGlzUHVibGljOiBib29sZWFuO1xuICBpc1RlbXBsYXRlOiBib29sZWFuO1xuICBjb2xvcjogc3RyaW5nO1xuICBub3RlPzogc3RyaW5nO1xuICBiaWxsYWJsZTogYm9vbGVhbjtcbiAgcHVibGljOiBib29sZWFuO1xuICBhcmNoaXZlZDogYm9vbGVhbjtcbiAgZXN0aW1hdGU6IHtcbiAgICBlc3RpbWF0ZTogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbiAgfTtcbiAgc3RhdHVzOiBzdHJpbmc7XG4gIGR1cmF0aW9uOiBzdHJpbmc7XG4gIGJ1ZGdldEVzdGltYXRlOiBudW1iZXI7XG4gIGJ1ZGdldFR5cGU6IHN0cmluZztcbiAgaG91cmx5UmF0ZToge1xuICAgIGFtb3VudDogbnVtYmVyO1xuICAgIGN1cnJlbmN5OiBzdHJpbmc7XG4gIH07XG4gIGNvc3RSYXRlOiB7XG4gICAgYW1vdW50OiBudW1iZXI7XG4gICAgY3VycmVuY3k6IHN0cmluZztcbiAgfTtcbiAgdGltZUVzdGltYXRlOiBzdHJpbmc7XG4gIGJ1ZGdldDogbnVtYmVyO1xuICBzcGVudDogc3RyaW5nO1xuICBwcm9ncmVzczogbnVtYmVyO1xuICByYXRlOiBudW1iZXI7XG4gIHJhdGVMYXN0VXBkYXRlZDogc3RyaW5nO1xuICBmaXhlZEZlZTogbnVtYmVyO1xuICBtZW1iZXJzaGlwczogYW55W107XG4gIHRhc2tDb3VudDoge1xuICAgIHRvdGFsOiBudW1iZXI7XG4gICAgZXN0aW1hdGU6IG51bWJlcjtcbiAgfTtcbiAgY3VzdG9tRmllbGRzOiBhbnlbXTtcbiAgc3RhcnREYXRlOiBzdHJpbmc7XG4gIGVuZERhdGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvY2tpZnlVc2VyIHtcbiAgaWQ6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBwcm9maWxlUGljdHVyZTogc3RyaW5nO1xuICBzdGF0dXM6IHN0cmluZztcbiAgYWN0aXZlV29ya3NwYWNlOiBzdHJpbmc7XG4gIGRlZmF1bHRXb3Jrc3BhY2U6IHN0cmluZztcbiAgc2V0dGluZ3M6IGFueTtcbiAgbWVtYmVyc2hpcHM6IGFueVtdO1xuICBwcm9maWxlUGljdHVyZVVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsb2NraWZ5V29ya3NwYWNlIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBwcm9maWxlOiBudW1iZXI7XG4gIHByZW1pdW06IGJvb2xlYW47XG4gIGFkbWluOiBib29sZWFuO1xuICBkZWZhdWx0SG91cmx5UmF0ZTogbnVtYmVyO1xuICBkZWZhdWx0Q3VycmVuY3k6IHN0cmluZztcbiAgb25seUFkbWluc01heUNyZWF0ZVByb2plY3RzOiBib29sZWFuO1xuICBvbmx5QWRtaW5zU2VlQmlsbGFibGVSYXRlczogYm9vbGVhbjtcbiAgb25seUFkbWluc1NlZVRlYW1EYXNoYm9hcmQ6IGJvb2xlYW47XG4gIHByb2plY3RzQmlsbGFibGVCeURlZmF1bHQ6IGJvb2xlYW47XG4gIHJvdW5kaW5nOiBudW1iZXI7XG4gIHJvdW5kaW5nTWludXRlczogbnVtYmVyO1xuICBsb2dvOiBzdHJpbmc7XG4gIGljYWxVcmw6IHN0cmluZztcbiAgaWNhbEVuYWJsZWQ6IGJvb2xlYW47XG4gIGNzdlVwbG9hZDoge1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgZGF0ZUZvcm1hdDogc3RyaW5nO1xuICAgIHRpbWVGb3JtYXQ6IHN0cmluZztcbiAgfTtcbiAgc3Vic2NyaXB0aW9uOiB7XG4gICAgc3RhcnREYXRlOiBzdHJpbmc7XG4gICAgZW5kRGF0ZTogc3RyaW5nO1xuICAgIHRyaWFsOiBib29sZWFuO1xuICAgIHN0YXR1czogc3RyaW5nO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsb2NraWZ5VGltZVJlcG9ydCB7XG4gIHByb2plY3RJZDogc3RyaW5nO1xuICBwcm9qZWN0TmFtZTogc3RyaW5nO1xuICB0b3RhbEhvdXJzOiBudW1iZXI7XG4gIGJpbGxhYmxlSG91cnM6IG51bWJlcjtcbiAgbm9uQmlsbGFibGVIb3VyczogbnVtYmVyO1xuICB0b3RhbEFtb3VudDogbnVtYmVyO1xuICBiaWxsYWJsZUFtb3VudDogbnVtYmVyO1xuICBub25CaWxsYWJsZUFtb3VudDogbnVtYmVyO1xuICBlbnRyaWVzOiBDbG9ja2lmeVRpbWVFbnRyeVtdO1xuICBwZXJpb2Q6IHtcbiAgICBzdGFydDogc3RyaW5nO1xuICAgIGVuZDogc3RyaW5nO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgVG9rZW5SZXNwb25zZSB7XG4gIGFjY2Vzc190b2tlbjogc3RyaW5nO1xuICBleHBpcmVzX2luOiBudW1iZXI7XG4gIHRva2VuX3R5cGU6IHN0cmluZztcbn1cblxuY2xhc3MgQ2xvY2tpZnlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBhcGlLZXk6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHdvcmtzcGFjZUlkOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBiYXNlVXJsID0gJ2h0dHBzOi8vYXBpLmNsb2NraWZ5Lm1lL2FwaS92MSc7XG4gIHByaXZhdGUgX2lzQ29uZmlndXJlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYXBpS2V5ID0gcHJvY2Vzcy5lbnYuQ0xPQ0tJRllfQVBJX0tFWSB8fCBudWxsO1xuICAgIHRoaXMud29ya3NwYWNlSWQgPSBwcm9jZXNzLmVudi5DTE9DS0lGWV9XT1JLU1BBQ0VfSUQgfHwgbnVsbDtcbiAgICBcbiAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIHZhbGlkIGNyZWRlbnRpYWxzXG4gICAgaWYgKHRoaXMuYXBpS2V5ICYmIHRoaXMuYXBpS2V5ICE9PSAneW91cl9jbG9ja2lmeV9hcGlfa2V5X2hlcmUnICYmIHRoaXMud29ya3NwYWNlSWQgJiYgdGhpcy53b3Jrc3BhY2VJZCAhPT0gJ3lvdXJfY2xvY2tpZnlfd29ya3NwYWNlX2lkX2hlcmUnKSB7XG4gICAgICB0aGlzLl9pc0NvbmZpZ3VyZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5sb2coJ0Nsb2NraWZ5IHNlcnZpY2UgaW5pdGlhbGl6ZWQgd2l0aCB2YWxpZCBjcmVkZW50aWFscycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9pc0NvbmZpZ3VyZWQgPSBmYWxzZTtcbiAgICAgIGNvbnNvbGUud2FybignQ2xvY2tpZnkgc2VydmljZSBpbml0aWFsaXplZCB3aXRob3V0IHZhbGlkIGNyZWRlbnRpYWxzIC0gd2lsbCB1c2UgbW9jayBkYXRhJyk7XG4gICAgICBjb25zb2xlLndhcm4oJ1BsZWFzZSBzZXQgQ0xPQ0tJRllfQVBJX0tFWSBhbmQgQ0xPQ0tJRllfV09SS1NQQUNFX0lEIGluIHlvdXIgZW52aXJvbm1lbnQgdmFyaWFibGVzJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRIZWFkZXJzKCkge1xuICAgIGlmICghdGhpcy5hcGlLZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2xvY2tpZnkgQVBJIGtleSBub3QgY29uZmlndXJlZCcpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgJ1gtQXBpLUtleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtYWtlUmVxdWVzdChlbmRwb2ludDogc3RyaW5nLCBwYXJhbXM/OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICghdGhpcy5faXNDb25maWd1cmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nsb2NraWZ5IHNlcnZpY2Ugbm90IHByb3Blcmx5IGNvbmZpZ3VyZWQnKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChgJHt0aGlzLmJhc2VVcmx9JHtlbmRwb2ludH1gKTtcbiAgICAgIGlmIChwYXJhbXMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgaWYgKHBhcmFtc1trZXldICE9PSB1bmRlZmluZWQgJiYgcGFyYW1zW2tleV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgcGFyYW1zW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKGDwn5SNIENsb2NraWZ5IEFQSSBSZXF1ZXN0OiAke3VybC50b1N0cmluZygpfWApO1xuICAgICAgY29uc29sZS5sb2coYCAgIEhlYWRlcnM6ICR7SlNPTi5zdHJpbmdpZnkodGhpcy5nZXRIZWFkZXJzKCkpfWApO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybC50b1N0cmluZygpLCB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycygpLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKGDwn5OhIENsb2NraWZ5IEFQSSBSZXNwb25zZTogJHtyZXNwb25zZS5zdGF0dXN9ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcblxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2xvY2tpZnkgQVBJIGF1dGhlbnRpY2F0aW9uIGZhaWxlZCAtIGNoZWNrIHlvdXIgQVBJIGtleScpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDbG9ja2lmeSBBUEkgYWNjZXNzIGZvcmJpZGRlbiAtIGNoZWNrIHlvdXIgd29ya3NwYWNlIElEIGFuZCBwZXJtaXNzaW9ucycpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgY29uc3QgZXJyb3JEZXRhaWxzID0gYEVuZHBvaW50IG5vdCBmb3VuZDogJHtlbmRwb2ludH1gO1xuICAgICAgICBjb25zb2xlLmVycm9yKGDinYwgNDA0IEVycm9yIERldGFpbHM6ICR7ZXJyb3JEZXRhaWxzfWApO1xuICAgICAgICBjb25zb2xlLmVycm9yKGAgICBGdWxsIFVSTDogJHt1cmwudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihgICAgV29ya3NwYWNlIElEOiAke3RoaXMud29ya3NwYWNlSWR9YCk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYCAgIEFQSSBLZXkgY29uZmlndXJlZDogJHshIXRoaXMuYXBpS2V5fWApO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENsb2NraWZ5IEFQSSBlcnJvcjogNDA0IE5vdCBGb3VuZCAtICR7ZXJyb3JEZXRhaWxzfWApO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MjkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDbG9ja2lmeSBBUEkgcmF0ZSBsaW1pdCBleGNlZWRlZCAtIHRyeSBhZ2FpbiBsYXRlcicpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGVycm9yVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKS5jYXRjaCgoKSA9PiAnVW5rbm93biBlcnJvcicpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENsb2NraWZ5IEFQSSBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0gLSAke2Vycm9yVGV4dH1gKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGNvbnNvbGUubG9nKGDinIUgQ2xvY2tpZnkgQVBJIFN1Y2Nlc3M6ICR7ZW5kcG9pbnR9YCk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIENsb2NraWZ5IEFQSSBFcnJvciBpbiAke2VuZHBvaW50fTpgLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENsb2NraWZ5IEFQSSByZXF1ZXN0IGZhaWxlZDogJHtlcnJvcn1gKTtcbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayBpZiB0aGUgc2VydmljZSBpcyBwcm9wZXJseSBjb25maWd1cmVkXG4gIHB1YmxpYyBpc0NvbmZpZ3VyZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzQ29uZmlndXJlZDtcbiAgfVxuXG4gIC8vIEdldCBjb25maWd1cmF0aW9uIHN0YXR1cyBmb3IgZGVidWdnaW5nXG4gIHB1YmxpYyBnZXRDb25maWd1cmF0aW9uU3RhdHVzKCk6IHsgY29uZmlndXJlZDogYm9vbGVhbjsgaGFzQXBpS2V5OiBib29sZWFuOyBoYXNXb3Jrc3BhY2VJZDogYm9vbGVhbiB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgY29uZmlndXJlZDogdGhpcy5faXNDb25maWd1cmVkLFxuICAgICAgaGFzQXBpS2V5OiAhISh0aGlzLmFwaUtleSAmJiB0aGlzLmFwaUtleSAhPT0gJ3lvdXJfY2xvY2tpZnlfYXBpX2tleV9oZXJlJyksXG4gICAgICBoYXNXb3Jrc3BhY2VJZDogISEodGhpcy53b3Jrc3BhY2VJZCAmJiB0aGlzLndvcmtzcGFjZUlkICE9PSAneW91cl9jbG9ja2lmeV93b3Jrc3BhY2VfaWRfaGVyZScpXG4gICAgfTtcbiAgfVxuXG4gIC8vIEFsaWFzIGZvciBnZXRDb25maWd1cmF0aW9uU3RhdHVzIHRvIG1hdGNoIEFQSSB1c2FnZVxuICBwdWJsaWMgZ2V0Q29uZmlnU3RhdHVzKCk6IHsgY29uZmlndXJlZDogYm9vbGVhbjsgaGFzQXBpS2V5OiBib29sZWFuOyBoYXNXb3Jrc3BhY2VJZDogYm9vbGVhbiB9IHtcbiAgICByZXR1cm4gdGhpcy5nZXRDb25maWd1cmF0aW9uU3RhdHVzKCk7XG4gIH1cblxuICAvLyBNZXRob2QgdG8gc2V0IHdvcmtzcGFjZSBJRCBkeW5hbWljYWxseVxuICBwdWJsaWMgc2V0V29ya3NwYWNlSWQod29ya3NwYWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMud29ya3NwYWNlSWQgPSB3b3Jrc3BhY2VJZDtcbiAgICBpZiAodGhpcy5hcGlLZXkgJiYgdGhpcy5hcGlLZXkgIT09ICd5b3VyX2Nsb2NraWZ5X2FwaV9rZXlfaGVyZScpIHtcbiAgICAgIHRoaXMuX2lzQ29uZmlndXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0VXNlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdCgnL3VzZXInKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGdldCBDbG9ja2lmeSB1c2VyOicsIGVycm9yKTtcbiAgICAgIC8vIFJldHVybiBtb2NrIHVzZXIgZGF0YSB3aGVuIENsb2NraWZ5IGZhaWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogJ21vY2stdXNlci1pZCcsXG4gICAgICAgIG5hbWU6ICdNb2NrIFVzZXInLFxuICAgICAgICBlbWFpbDogJ3VzZXJAZXhhbXBsZS5jb20nLFxuICAgICAgICBzdGF0dXM6ICdBQ1RJVkUnXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFdvcmtzcGFjZXMoKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdCgnL3dvcmtzcGFjZXMnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGdldCBDbG9ja2lmeSB3b3Jrc3BhY2VzOicsIGVycm9yKTtcbiAgICAgIC8vIFJldHVybiBtb2NrIHdvcmtzcGFjZSBkYXRhIHdoZW4gQ2xvY2tpZnkgZmFpbHNcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ21vY2std29ya3NwYWNlLWlkJyxcbiAgICAgICAgICBuYW1lOiAnTW9jayBXb3Jrc3BhY2UnLFxuICAgICAgICAgIGhvdXJseVJhdGU6IHsgYW1vdW50OiAxMDAsIGN1cnJlbmN5OiAnVVNEJyB9XG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0UHJvamVjdHMoKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXRoaXMud29ya3NwYWNlSWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3Jrc3BhY2UgSUQgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KGAvd29ya3NwYWNlcy8ke3RoaXMud29ya3NwYWNlSWR9L3Byb2plY3RzYCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgQ2xvY2tpZnkgcHJvamVjdHM6JywgZXJyb3IpO1xuICAgICAgLy8gUmV0dXJuIG1vY2sgcHJvamVjdCBkYXRhIHdoZW4gQ2xvY2tpZnkgZmFpbHNcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ21vY2stcHJvamVjdC0xJyxcbiAgICAgICAgICBuYW1lOiAnTW9jayBQcm9qZWN0IDEnLFxuICAgICAgICAgIGNsaWVudElkOiAnbW9jay1jbGllbnQtMScsXG4gICAgICAgICAgY2xpZW50TmFtZTogJ01vY2sgQ2xpZW50IDEnLFxuICAgICAgICAgIHN0YXR1czogJ0FDVElWRScsXG4gICAgICAgICAgYmlsbGFibGU6IHRydWUsXG4gICAgICAgICAgaG91cmx5UmF0ZTogeyBhbW91bnQ6IDE1MCwgY3VycmVuY3k6ICdVU0QnIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnbW9jay1wcm9qZWN0LTInLFxuICAgICAgICAgIG5hbWU6ICdNb2NrIFByb2plY3QgMicsXG4gICAgICAgICAgY2xpZW50SWQ6ICdtb2NrLWNsaWVudC0yJyxcbiAgICAgICAgICBjbGllbnROYW1lOiAnTW9jayBDbGllbnQgMicsXG4gICAgICAgICAgc3RhdHVzOiAnQUNUSVZFJyxcbiAgICAgICAgICBiaWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgICBob3VybHlSYXRlOiB7IGFtb3VudDogMTc1LCBjdXJyZW5jeTogJ1VTRCcgfVxuICAgICAgICB9XG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFRpbWVFbnRyaWVzKHByb2plY3RJZDogc3RyaW5nLCBzdGFydERhdGU6IHN0cmluZywgZW5kRGF0ZTogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXRoaXMud29ya3NwYWNlSWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3Jrc3BhY2UgSUQgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KGAvd29ya3NwYWNlcy8ke3RoaXMud29ya3NwYWNlSWR9L3Byb2plY3RzLyR7cHJvamVjdElkfS90aW1lLWVudHJpZXNgLCB7XG4gICAgICAgIHN0YXJ0OiBzdGFydERhdGUsXG4gICAgICAgIGVuZDogZW5kRGF0ZVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgQ2xvY2tpZnkgdGltZSBlbnRyaWVzOicsIGVycm9yKTtcbiAgICAgIC8vIFJldHVybiBtb2NrIHRpbWUgZW50cnkgZGF0YSB3aGVuIENsb2NraWZ5IGZhaWxzXG4gICAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdtb2NrLXRpbWUtZW50cnktMScsXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdNb2NrIHdvcmsgc2Vzc2lvbicsXG4gICAgICAgICAgdGltZUludGVydmFsOiB7XG4gICAgICAgICAgICBzdGFydDogc3RhcnREYXRlLFxuICAgICAgICAgICAgZW5kOiBlbmREYXRlLFxuICAgICAgICAgICAgZHVyYXRpb246ICdQVDJIMzBNJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYmlsbGFibGU6IHRydWUsXG4gICAgICAgICAgdXNlcklkOiAnbW9jay11c2VyLWlkJyxcbiAgICAgICAgICB1c2VyTmFtZTogJ01vY2sgVXNlcidcbiAgICAgICAgfVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRBbGxUaW1lRW50cmllcyhzdGFydERhdGU6IHN0cmluZywgZW5kRGF0ZTogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXRoaXMud29ya3NwYWNlSWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3Jrc3BhY2UgSUQgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ2xvY2tpZnkgQVBJIHJlcXVpcmVzIFBPU1QgZm9yIGZpbHRlcmVkIHRpbWUgZW50cmllcyB3aXRoIGRhdGUgcGFyYW1ldGVyc1xuICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChgJHt0aGlzLmJhc2VVcmx9L3dvcmtzcGFjZXMvJHt0aGlzLndvcmtzcGFjZUlkfS90aW1lLWVudHJpZXNgKTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYPCflI0gQ2xvY2tpZnkgQVBJIFJlcXVlc3Q6ICR7dXJsLnRvU3RyaW5nKCl9YCk7XG4gICAgICBjb25zb2xlLmxvZyhgICAgTWV0aG9kOiBQT1NUYCk7XG4gICAgICBjb25zb2xlLmxvZyhgICAgSGVhZGVyczogJHtKU09OLnN0cmluZ2lmeSh0aGlzLmdldEhlYWRlcnMoKSl9YCk7XG4gICAgICBjb25zb2xlLmxvZyhgICAgQm9keTogJHtKU09OLnN0cmluZ2lmeSh7IHN0YXJ0OiBzdGFydERhdGUsIGVuZDogZW5kRGF0ZSB9KX1gKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwudG9TdHJpbmcoKSwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIC4uLnRoaXMuZ2V0SGVhZGVycygpLFxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBzdGFydDogc3RhcnREYXRlLFxuICAgICAgICAgIGVuZDogZW5kRGF0ZVxuICAgICAgICB9KSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zb2xlLmxvZyhg8J+ToSBDbG9ja2lmeSBBUEkgUmVzcG9uc2U6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nsb2NraWZ5IEFQSSBhdXRoZW50aWNhdGlvbiBmYWlsZWQgLSBjaGVjayB5b3VyIEFQSSBrZXknKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2xvY2tpZnkgQVBJIGFjY2VzcyBmb3JiaWRkZW4gLSBjaGVjayB5b3VyIHdvcmtzcGFjZSBJRCBhbmQgcGVybWlzc2lvbnMnKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgIGNvbnN0IGVycm9yRGV0YWlscyA9IGBFbmRwb2ludCBub3QgZm91bmQ6IC93b3Jrc3BhY2VzLyR7dGhpcy53b3Jrc3BhY2VJZH0vdGltZS1lbnRyaWVzYDtcbiAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIDQwNCBFcnJvciBEZXRhaWxzOiAke2Vycm9yRGV0YWlsc31gKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihgICAgRnVsbCBVUkw6ICR7dXJsLnRvU3RyaW5nKCl9YCk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYCAgIFdvcmtzcGFjZSBJRDogJHt0aGlzLndvcmtzcGFjZUlkfWApO1xuICAgICAgICBjb25zb2xlLmVycm9yKGAgICBBUEkgS2V5IGNvbmZpZ3VyZWQ6ICR7ISF0aGlzLmFwaUtleX1gKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDbG9ja2lmeSBBUEkgZXJyb3I6IDQwNCBOb3QgRm91bmQgLSAke2Vycm9yRGV0YWlsc31gKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA1KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2xvY2tpZnkgQVBJIG1ldGhvZCBub3QgYWxsb3dlZCAtIHRoaXMgZW5kcG9pbnQgcmVxdWlyZXMgUE9TVCBtZXRob2QnKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2xvY2tpZnkgQVBJIHJhdGUgbGltaXQgZXhjZWVkZWQgLSB0cnkgYWdhaW4gbGF0ZXInKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCkuY2F0Y2goKCkgPT4gJ1Vua25vd24gZXJyb3InKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDbG9ja2lmeSBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9IC0gJHtlcnJvclRleHR9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBjb25zb2xlLmxvZyhg4pyFIENsb2NraWZ5IEFQSSBTdWNjZXNzOiAvd29ya3NwYWNlcy8ke3RoaXMud29ya3NwYWNlSWR9L3RpbWUtZW50cmllc2ApO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgYWxsIENsb2NraWZ5IHRpbWUgZW50cmllczonLCBlcnJvcik7XG4gICAgICAvLyBSZXR1cm4gbW9jayB0aW1lIGVudHJ5IGRhdGEgd2hlbiBDbG9ja2lmeSBmYWlsc1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnbW9jay10aW1lLWVudHJ5LTEnLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTW9jayB3b3JrIHNlc3Npb24nLFxuICAgICAgICAgIHRpbWVJbnRlcnZhbDoge1xuICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIGVuZDogZW5kRGF0ZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAnUFQ4SDBNJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYmlsbGFibGU6IHRydWUsXG4gICAgICAgICAgdXNlcklkOiAnbW9jay11c2VyLWlkJyxcbiAgICAgICAgICB1c2VyTmFtZTogJ01vY2sgVXNlcicsXG4gICAgICAgICAgcHJvamVjdElkOiAnbW9jay1wcm9qZWN0LTEnLFxuICAgICAgICAgIHByb2plY3ROYW1lOiAnTW9jayBQcm9qZWN0IDEnXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0VXNlcnMoKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXRoaXMud29ya3NwYWNlSWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3Jrc3BhY2UgSUQgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KGAvd29ya3NwYWNlcy8ke3RoaXMud29ya3NwYWNlSWR9L3VzZXJzYCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgQ2xvY2tpZnkgdXNlcnM6JywgZXJyb3IpO1xuICAgICAgLy8gUmV0dXJuIG1vY2sgdXNlciBkYXRhIHdoZW4gQ2xvY2tpZnkgZmFpbHNcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ21vY2stdXNlci0xJyxcbiAgICAgICAgICBuYW1lOiAnTW9jayBVc2VyIDEnLFxuICAgICAgICAgIGVtYWlsOiAndXNlcjFAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHN0YXR1czogJ0FDVElWRScsXG4gICAgICAgICAgaG91cmx5UmF0ZTogeyBhbW91bnQ6IDEwMCwgY3VycmVuY3k6ICdVU0QnIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnbW9jay11c2VyLTInLFxuICAgICAgICAgIG5hbWU6ICdNb2NrIFVzZXIgMicsXG4gICAgICAgICAgZW1haWw6ICd1c2VyMkBleGFtcGxlLmNvbScsXG4gICAgICAgICAgc3RhdHVzOiAnQUNUSVZFJyxcbiAgICAgICAgICBob3VybHlSYXRlOiB7IGFtb3VudDogMTIwLCBjdXJyZW5jeTogJ1VTRCcgfVxuICAgICAgICB9XG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFByb2plY3RUaW1lUmVwb3J0KHByb2plY3RJZDogc3RyaW5nLCBzdGFydERhdGU6IHN0cmluZywgZW5kRGF0ZTogc3RyaW5nKTogUHJvbWlzZTxDbG9ja2lmeVRpbWVSZXBvcnQgfCBudWxsPiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghdGhpcy53b3Jrc3BhY2VJZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dvcmtzcGFjZSBJRCBub3QgY29uZmlndXJlZCcpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCB0aW1lRW50cmllcyA9IGF3YWl0IHRoaXMuZ2V0VGltZUVudHJpZXMocHJvamVjdElkLCBzdGFydERhdGUsIGVuZERhdGUpO1xuICAgICAgY29uc3QgcHJvamVjdCA9IGF3YWl0IHRoaXMuZ2V0UHJvamVjdHMoKS50aGVuKHByb2plY3RzID0+IFxuICAgICAgICBwcm9qZWN0cy5maW5kKHAgPT4gcC5pZCA9PT0gcHJvamVjdElkKVxuICAgICAgKTtcbiAgICAgIFxuICAgICAgaWYgKCFwcm9qZWN0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvamVjdCBub3QgZm91bmQnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdG90YWxIb3VycyA9IHRpbWVFbnRyaWVzLnJlZHVjZSgoc3VtLCBlbnRyeSkgPT4ge1xuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IGVudHJ5LnRpbWVJbnRlcnZhbC5kdXJhdGlvbjtcbiAgICAgICAgY29uc3QgaG91cnMgPSB0aGlzLnBhcnNlRHVyYXRpb24oZHVyYXRpb24pO1xuICAgICAgICByZXR1cm4gc3VtICsgaG91cnM7XG4gICAgICB9LCAwKTtcblxuICAgICAgY29uc3QgYmlsbGFibGVIb3VycyA9IHRpbWVFbnRyaWVzXG4gICAgICAgIC5maWx0ZXIoZW50cnkgPT4gZW50cnkuYmlsbGFibGUpXG4gICAgICAgIC5yZWR1Y2UoKHN1bSwgZW50cnkpID0+IHtcbiAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IGVudHJ5LnRpbWVJbnRlcnZhbC5kdXJhdGlvbjtcbiAgICAgICAgICBjb25zdCBob3VycyA9IHRoaXMucGFyc2VEdXJhdGlvbihkdXJhdGlvbik7XG4gICAgICAgICAgcmV0dXJuIHN1bSArIGhvdXJzO1xuICAgICAgICB9LCAwKTtcblxuICAgICAgY29uc3Qgbm9uQmlsbGFibGVIb3VycyA9IHRvdGFsSG91cnMgLSBiaWxsYWJsZUhvdXJzO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcm9qZWN0SWQsXG4gICAgICAgIHByb2plY3ROYW1lOiBwcm9qZWN0Lm5hbWUsXG4gICAgICAgIHRvdGFsSG91cnMsXG4gICAgICAgIGJpbGxhYmxlSG91cnMsXG4gICAgICAgIG5vbkJpbGxhYmxlSG91cnMsXG4gICAgICAgIHRvdGFsQW1vdW50OiB0b3RhbEhvdXJzICogKHByb2plY3QuaG91cmx5UmF0ZT8uYW1vdW50IHx8IDApLFxuICAgICAgICBiaWxsYWJsZUFtb3VudDogYmlsbGFibGVIb3VycyAqIChwcm9qZWN0LmhvdXJseVJhdGU/LmFtb3VudCB8fCAwKSxcbiAgICAgICAgbm9uQmlsbGFibGVBbW91bnQ6IG5vbkJpbGxhYmxlSG91cnMgKiAocHJvamVjdC5ob3VybHlSYXRlPy5hbW91bnQgfHwgMCksXG4gICAgICAgIGVudHJpZXM6IHRpbWVFbnRyaWVzLFxuICAgICAgICBwZXJpb2Q6IHsgc3RhcnQ6IHN0YXJ0RGF0ZSwgZW5kOiBlbmREYXRlIH1cbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgcHJvamVjdCB0aW1lIHJlcG9ydDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRBbGxQcm9qZWN0c1RpbWVTdW1tYXJ5KHN0YXJ0RGF0ZTogc3RyaW5nLCBlbmREYXRlOiBzdHJpbmcpOiBQcm9taXNlPENsb2NraWZ5VGltZVJlcG9ydFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghdGhpcy53b3Jrc3BhY2VJZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dvcmtzcGFjZSBJRCBub3QgY29uZmlndXJlZCcpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCBwcm9qZWN0cyA9IGF3YWl0IHRoaXMuZ2V0UHJvamVjdHMoKTtcbiAgICAgIGNvbnN0IHJlcG9ydHM6IENsb2NraWZ5VGltZVJlcG9ydFtdID0gW107XG4gICAgICBcbiAgICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0cykge1xuICAgICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCB0aGlzLmdldFByb2plY3RUaW1lUmVwb3J0KHByb2plY3QuaWQsIHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XG4gICAgICAgIGlmIChyZXBvcnQpIHtcbiAgICAgICAgICByZXBvcnRzLnB1c2gocmVwb3J0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gcmVwb3J0cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGdldCBhbGwgcHJvamVjdHMgdGltZSBzdW1tYXJ5OicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICAvLyBIZWxwZXIgbWV0aG9kIHRvIHBhcnNlIElTTyA4NjAxIGR1cmF0aW9uIHRvIGhvdXJzXG4gIHByaXZhdGUgcGFyc2VEdXJhdGlvbihkdXJhdGlvbjogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBjb25zdCBtYXRjaCA9IGR1cmF0aW9uLm1hdGNoKC9QVCg/OihcXGQrKUgpPyg/OihcXGQrKU0pPyg/OihcXGQrKVMpPy8pO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiAwO1xuICAgIFxuICAgIGNvbnN0IGhvdXJzID0gcGFyc2VJbnQobWF0Y2hbMV0gfHwgJzAnKTtcbiAgICBjb25zdCBtaW51dGVzID0gcGFyc2VJbnQobWF0Y2hbMl0gfHwgJzAnKTtcbiAgICBjb25zdCBzZWNvbmRzID0gcGFyc2VJbnQobWF0Y2hbM10gfHwgJzAnKTtcbiAgICBcbiAgICByZXR1cm4gaG91cnMgKyAobWludXRlcyAvIDYwKSArIChzZWNvbmRzIC8gMzYwMCk7XG4gIH1cbn1cblxuLy8gQ3JlYXRlIHRoZSBzZXJ2aWNlIGluc3RhbmNlXG5jb25zdCBjbG9ja2lmeVNlcnZpY2UgPSBuZXcgQ2xvY2tpZnlTZXJ2aWNlKCk7XG5cbi8vIEV4cG9ydCB0aGUgc2VydmljZSBpbnN0YW5jZSBhcyBib3RoIGRlZmF1bHQgYW5kIG5hbWVkIGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgY2xvY2tpZnlTZXJ2aWNlO1xuZXhwb3J0IHsgY2xvY2tpZnlTZXJ2aWNlIH07XG5cbi8vIEV4cG9ydCBjb252ZW5pZW5jZSBmdW5jdGlvbnNcbmV4cG9ydCBjb25zdCBmZXRjaENsb2NraWZ5UHJvamVjdHMgPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IGNsb2NraWZ5U2VydmljZS5nZXRQcm9qZWN0cygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIENsb2NraWZ5IHByb2plY3RzOicsIGVycm9yKTtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBmZXRjaENsb2NraWZ5VGltZUVudHJpZXMgPSBhc3luYyAoXG4gIHByb2plY3RJZDogc3RyaW5nLFxuICBzdGFydERhdGU/OiBzdHJpbmcsXG4gIGVuZERhdGU/OiBzdHJpbmdcbikgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBjbG9ja2lmeVNlcnZpY2UuZ2V0VGltZUVudHJpZXMocHJvamVjdElkLCBzdGFydERhdGUgfHwgJycsIGVuZERhdGUgfHwgJycpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIENsb2NraWZ5IHRpbWUgZW50cmllczonLCBlcnJvcik7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZmV0Y2hDbG9ja2lmeVRpbWVSZXBvcnQgPSBhc3luYyAoXG4gIHByb2plY3RJZDogc3RyaW5nLFxuICBzdGFydERhdGU6IHN0cmluZyxcbiAgZW5kRGF0ZTogc3RyaW5nXG4pID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgY2xvY2tpZnlTZXJ2aWNlLmdldFByb2plY3RUaW1lUmVwb3J0KHByb2plY3RJZCwgc3RhcnREYXRlLCBlbmREYXRlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBDbG9ja2lmeSB0aW1lIHJlcG9ydDonLCBlcnJvcik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBmZXRjaEFsbENsb2NraWZ5VGltZVN1bW1hcmllcyA9IGFzeW5jIChcbiAgc3RhcnREYXRlOiBzdHJpbmcsXG4gIGVuZERhdGU6IHN0cmluZ1xuKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IGNsb2NraWZ5U2VydmljZS5nZXRBbGxQcm9qZWN0c1RpbWVTdW1tYXJ5KHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgQ2xvY2tpZnkgdGltZSBzdW1tYXJpZXM6JywgZXJyb3IpO1xuICAgIHJldHVybiBbXTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJDbG9ja2lmeVNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImFwaUtleSIsIndvcmtzcGFjZUlkIiwiYmFzZVVybCIsIl9pc0NvbmZpZ3VyZWQiLCJwcm9jZXNzIiwiZW52IiwiQ0xPQ0tJRllfQVBJX0tFWSIsIkNMT0NLSUZZX1dPUktTUEFDRV9JRCIsImNvbnNvbGUiLCJsb2ciLCJ3YXJuIiwiZ2V0SGVhZGVycyIsIkVycm9yIiwibWFrZVJlcXVlc3QiLCJlbmRwb2ludCIsInBhcmFtcyIsInVybCIsIlVSTCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwidW5kZWZpbmVkIiwic2VhcmNoUGFyYW1zIiwiYXBwZW5kIiwidG9TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZXJyb3JEZXRhaWxzIiwiZXJyb3IiLCJvayIsImVycm9yVGV4dCIsInRleHQiLCJjYXRjaCIsImRhdGEiLCJqc29uIiwibWVzc2FnZSIsImlzQ29uZmlndXJlZCIsImdldENvbmZpZ3VyYXRpb25TdGF0dXMiLCJjb25maWd1cmVkIiwiaGFzQXBpS2V5IiwiaGFzV29ya3NwYWNlSWQiLCJnZXRDb25maWdTdGF0dXMiLCJzZXRXb3Jrc3BhY2VJZCIsImdldFVzZXIiLCJpZCIsIm5hbWUiLCJlbWFpbCIsImdldFdvcmtzcGFjZXMiLCJob3VybHlSYXRlIiwiYW1vdW50IiwiY3VycmVuY3kiLCJnZXRQcm9qZWN0cyIsImNsaWVudElkIiwiY2xpZW50TmFtZSIsImJpbGxhYmxlIiwiZ2V0VGltZUVudHJpZXMiLCJwcm9qZWN0SWQiLCJzdGFydERhdGUiLCJlbmREYXRlIiwic3RhcnQiLCJlbmQiLCJkZXNjcmlwdGlvbiIsInRpbWVJbnRlcnZhbCIsImR1cmF0aW9uIiwidXNlcklkIiwidXNlck5hbWUiLCJnZXRBbGxUaW1lRW50cmllcyIsImJvZHkiLCJwcm9qZWN0TmFtZSIsImdldFVzZXJzIiwiZ2V0UHJvamVjdFRpbWVSZXBvcnQiLCJ0aW1lRW50cmllcyIsInByb2plY3QiLCJ0aGVuIiwicHJvamVjdHMiLCJmaW5kIiwicCIsInRvdGFsSG91cnMiLCJyZWR1Y2UiLCJzdW0iLCJlbnRyeSIsImhvdXJzIiwicGFyc2VEdXJhdGlvbiIsImJpbGxhYmxlSG91cnMiLCJmaWx0ZXIiLCJub25CaWxsYWJsZUhvdXJzIiwidG90YWxBbW91bnQiLCJiaWxsYWJsZUFtb3VudCIsIm5vbkJpbGxhYmxlQW1vdW50IiwiZW50cmllcyIsInBlcmlvZCIsImdldEFsbFByb2plY3RzVGltZVN1bW1hcnkiLCJyZXBvcnRzIiwicmVwb3J0IiwicHVzaCIsIm1hdGNoIiwicGFyc2VJbnQiLCJtaW51dGVzIiwic2Vjb25kcyIsImNsb2NraWZ5U2VydmljZSIsImZldGNoQ2xvY2tpZnlQcm9qZWN0cyIsImZldGNoQ2xvY2tpZnlUaW1lRW50cmllcyIsImZldGNoQ2xvY2tpZnlUaW1lUmVwb3J0IiwiZmV0Y2hBbGxDbG9ja2lmeVRpbWVTdW1tYXJpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/clockify.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateDashboardStats: () => (/* binding */ calculateDashboardStats),\n/* harmony export */   calculateProfitabilityMetrics: () => (/* binding */ calculateProfitabilityMetrics),\n/* harmony export */   calculateTimeTrackingKPIs: () => (/* binding */ calculateTimeTrackingKPIs),\n/* harmony export */   cn: () => (/* binding */ cn),\n/* harmony export */   createChartData: () => (/* binding */ createChartData),\n/* harmony export */   enhanceBillingDataWithClockify: () => (/* binding */ enhanceBillingDataWithClockify),\n/* harmony export */   formatCurrency: () => (/* binding */ formatCurrency),\n/* harmony export */   formatEfficiency: () => (/* binding */ formatEfficiency),\n/* harmony export */   formatHours: () => (/* binding */ formatHours),\n/* harmony export */   formatMonth: () => (/* binding */ formatMonth),\n/* harmony export */   generateMonthRange: () => (/* binding */ generateMonthRange),\n/* harmony export */   getChartMonthRange: () => (/* binding */ getChartMonthRange),\n/* harmony export */   getCurrentMonthRange: () => (/* binding */ getCurrentMonthRange),\n/* harmony export */   getProjectionsMonthRange: () => (/* binding */ getProjectionsMonthRange),\n/* harmony export */   initializeProjectionsTable: () => (/* binding */ initializeProjectionsTable),\n/* harmony export */   isCurrentMonth: () => (/* binding */ isCurrentMonth),\n/* harmony export */   isFutureMonth: () => (/* binding */ isFutureMonth),\n/* harmony export */   isLocalStorageAvailable: () => (/* binding */ isLocalStorageAvailable),\n/* harmony export */   isPastMonth: () => (/* binding */ isPastMonth),\n/* harmony export */   processBillingData: () => (/* binding */ processBillingData),\n/* harmony export */   safeLocalStorageGet: () => (/* binding */ safeLocalStorageGet),\n/* harmony export */   safeLocalStorageRemove: () => (/* binding */ safeLocalStorageRemove),\n/* harmony export */   safeLocalStorageSet: () => (/* binding */ safeLocalStorageSet)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(rsc)/./node_modules/date-fns/esm/startOfMonth/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(rsc)/./node_modules/date-fns/esm/endOfMonth/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(rsc)/./node_modules/date-fns/esm/format/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(rsc)/./node_modules/date-fns/esm/addMonths/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(rsc)/./node_modules/date-fns/esm/subMonths/index.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(rsc)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind-merge */ \"(rsc)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n\n\n\nfunction cn(...inputs) {\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_1__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\nfunction generateMonthRange(startDate, endDate) {\n    const months = [];\n    let currentDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(startDate);\n    const end = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(endDate);\n    while(currentDate <= end){\n        months.push((0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currentDate, \"yyyy-MM\"));\n        currentDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currentDate, 1);\n    }\n    return months;\n}\nfunction getCurrentMonthRange(monthsBack = 12, monthsForward = 24) {\n    const today = new Date();\n    const startDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(today, monthsBack);\n    const endDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(today, monthsForward);\n    return generateMonthRange(startDate, endDate);\n}\nfunction getProjectionsMonthRange() {\n    const startDate = new Date(2022, 0, 1); // January 1, 2022\n    const today = new Date();\n    const endDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(today, 24); // 24 months beyond current month\n    return generateMonthRange(startDate, endDate);\n}\nfunction getChartMonthRange() {\n    const today = new Date();\n    const startDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(today, 12); // 1 year in the past\n    const endDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(today, 12); // 1 year in the future\n    return generateMonthRange(startDate, endDate);\n}\nfunction processBillingData(projects, invoices, projections) {\n    // Handle undefined or null inputs\n    const safeProjects = projects || [];\n    const safeInvoices = invoices || [];\n    const safeProjections = projections || {};\n    // Early return if no projects\n    if (safeProjects.length === 0) {\n        return [];\n    }\n    // Cache month range to avoid recalculation\n    const monthRange = getProjectionsMonthRange();\n    // Create a map of invoices by project for faster lookup\n    const invoiceMap = new Map();\n    safeInvoices.forEach((invoice)=>{\n        const projectId = invoice.project_id;\n        if (!invoiceMap.has(projectId)) {\n            invoiceMap.set(projectId, []);\n        }\n        invoiceMap.get(projectId).push(invoice);\n    });\n    return safeProjects.map((project)=>{\n        const projectInvoices = invoiceMap.get(project.project_id) || [];\n        // Pre-calculate invoice totals to avoid repeated calculations\n        const invoiceTotals = new Map();\n        projectInvoices.forEach((invoice)=>{\n            const month = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(invoice.date), \"yyyy-MM\");\n            const current = invoiceTotals.get(month) || {\n                billed: 0,\n                unbilled: 0\n            };\n            current.billed += invoice.billed_amount;\n            current.unbilled += invoice.unbilled_amount;\n            invoiceTotals.set(month, current);\n        });\n        const monthlyData = monthRange.map((month)=>{\n            const monthTotals = invoiceTotals.get(month) || {\n                billed: 0,\n                unbilled: 0\n            };\n            const projected = safeProjections[project.project_id]?.months?.[month]?.value || 0;\n            const actual = monthTotals.billed + monthTotals.unbilled;\n            return {\n                month,\n                billed: monthTotals.billed,\n                unbilled: monthTotals.unbilled,\n                projected,\n                actual\n            };\n        });\n        // Calculate totals efficiently\n        const totalBilled = monthlyData.reduce((sum, data)=>sum + data.billed, 0);\n        const totalUnbilled = monthlyData.reduce((sum, data)=>sum + data.unbilled, 0);\n        const totalProjected = monthlyData.reduce((sum, data)=>sum + data.projected, 0);\n        return {\n            projectId: project.project_id,\n            projectName: project.project_name,\n            customerName: project.customer_name,\n            signedFee: undefined,\n            monthlyData,\n            totalBilled,\n            totalUnbilled,\n            totalProjected\n        };\n    });\n}\nfunction calculateDashboardStats(billingData, closedProjects, monthlyProjections, monthlyStatuses) {\n    // Handle undefined or null billingData\n    if (!billingData || !Array.isArray(billingData)) {\n        return {\n            totalProjects: 0,\n            totalBilled: 0,\n            totalUnbilled: 0,\n            totalProjected: 0,\n            activeProjects: 0,\n            // Clockify KPIs\n            totalHours: 0,\n            billableHours: 0,\n            nonBillableHours: 0,\n            averageHourlyRate: 0,\n            totalTimeValue: 0,\n            efficiency: 0,\n            averageHoursPerProject: 0,\n            topPerformingProjects: []\n        };\n    }\n    const totalProjects = billingData.length;\n    const closedProjectsCount = closedProjects ? closedProjects.size : 0;\n    const activeProjects = totalProjects - closedProjectsCount;\n    // Use database projections and statuses if provided, otherwise fall back to localStorage\n    const projections = monthlyProjections || safeLocalStorageGet(\"monthlyProjections\") || {};\n    const statuses = monthlyStatuses || safeLocalStorageGet(\"monthlyStatuses\") || {};\n    // Optimize calculations by pre-calculating current year and month\n    const currentYear = new Date().getFullYear().toString();\n    const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n    // Batch calculate financial metrics to reduce iterations\n    let totalBilledYTD = 0;\n    let backlog = 0;\n    let totalProjected = 0;\n    // Single pass through projections for better performance\n    Object.keys(projections).forEach((projectId)=>{\n        const projectProjections = projections[projectId];\n        const projectStatuses = statuses[projectId];\n        if (projectProjections) {\n            Object.keys(projectProjections).forEach((month)=>{\n                const projectionValue = projectProjections[month] || 0;\n                // Check if month is in current year and status is \"Billed\"\n                if (month.startsWith(currentYear) && projectStatuses?.[month] === \"Billed\") {\n                    totalBilledYTD += projectionValue;\n                }\n                // Check if month is current or future and status is NOT \"Billed\"\n                if (month >= currentMonth && projectStatuses?.[month] !== \"Billed\") {\n                    backlog += projectionValue;\n                }\n                // Include all projections for current and future months\n                if (month >= currentMonth) {\n                    totalProjected += projectionValue;\n                }\n            });\n        }\n    });\n    // Calculate Clockify KPIs - optimized single pass\n    let totalHours = 0;\n    let billableHours = 0;\n    let nonBillableHours = 0;\n    let totalTimeValue = 0;\n    let totalHourlyRate = 0;\n    let projectsWithTimeData = 0;\n    const projectEfficiencies = [];\n    // Single pass through billing data for time tracking\n    billingData.forEach((project)=>{\n        if (project.clockifyData) {\n            const timeData = project.clockifyData;\n            totalHours += timeData.totalHours;\n            billableHours += timeData.billableHours;\n            nonBillableHours += timeData.nonBillableHours;\n            totalTimeValue += timeData.billableAmount;\n            if (timeData.totalHours > 0) {\n                const efficiency = timeData.billableHours / timeData.totalHours;\n                projectEfficiencies.push({\n                    projectId: project.projectId,\n                    efficiency,\n                    hours: timeData.totalHours\n                });\n                projectsWithTimeData++;\n            }\n        }\n    });\n    // Calculate derived metrics\n    const averageHourlyRate = projectsWithTimeData > 0 && billableHours > 0 ? totalTimeValue / billableHours : 0;\n    const efficiency = totalHours > 0 ? billableHours / totalHours : 0;\n    const averageHoursPerProject = projectsWithTimeData > 0 ? totalHours / projectsWithTimeData : 0;\n    // Get top performing projects (by efficiency and hours) - limit to top 5 for performance\n    const topPerformingProjects = projectEfficiencies.sort((a, b)=>b.efficiency * b.hours - a.efficiency * a.hours).slice(0, 5).map((p)=>p.projectId);\n    return {\n        totalProjects,\n        totalBilled: totalBilledYTD,\n        totalUnbilled: backlog,\n        totalProjected,\n        activeProjects,\n        // Clockify KPIs\n        totalHours,\n        billableHours,\n        nonBillableHours,\n        averageHourlyRate,\n        totalTimeValue,\n        efficiency,\n        averageHoursPerProject,\n        topPerformingProjects\n    };\n}\nfunction formatCurrency(amount) {\n    return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\"\n    }).format(amount);\n}\nfunction formatMonth(monthString) {\n    const [year, month] = monthString.split(\"-\");\n    const date = new Date(parseInt(year), parseInt(month) - 1);\n    return (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(date, \"MMM yyyy\");\n}\nfunction isCurrentMonth(monthString) {\n    const currentMonth = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(), \"yyyy-MM\");\n    return monthString === currentMonth;\n}\nfunction isFutureMonth(monthString) {\n    const currentMonth = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(), \"yyyy-MM\");\n    return monthString > currentMonth;\n}\nfunction isPastMonth(monthString) {\n    const currentMonth = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(), \"yyyy-MM\");\n    return monthString < currentMonth;\n}\n// localStorage utility functions\nfunction isLocalStorageAvailable() {\n    try {\n        const test = \"__localStorage_test__\";\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n    } catch  {\n        return false;\n    }\n}\nfunction safeLocalStorageGet(key) {\n    if (!isLocalStorageAvailable()) {\n        console.warn(\"localStorage is not available\");\n        return null;\n    }\n    try {\n        const item = localStorage.getItem(key);\n        return item ? JSON.parse(item) : null;\n    } catch (error) {\n        console.error(`Error reading from localStorage key '${key}':`, error);\n        return null;\n    }\n}\nfunction safeLocalStorageSet(key, value) {\n    if (!isLocalStorageAvailable()) {\n        console.warn(\"localStorage is not available\");\n        return false;\n    }\n    try {\n        localStorage.setItem(key, JSON.stringify(value));\n        return true;\n    } catch (error) {\n        console.error(`Error writing to localStorage key '${key}':`, error);\n        return false;\n    }\n}\nfunction safeLocalStorageRemove(key) {\n    if (!isLocalStorageAvailable()) {\n        return false;\n    }\n    try {\n        localStorage.removeItem(key);\n        return true;\n    } catch (error) {\n        console.error(`Error removing localStorage key '${key}':`, error);\n        return false;\n    }\n}\nfunction createChartData(billingData) {\n    return billingData.map((data)=>({\n            name: data.projectName,\n            billed: data.totalBilled,\n            unbilled: data.totalUnbilled,\n            projected: data.totalProjected\n        }));\n}\nfunction initializeProjectionsTable(projects) {\n    // Handle undefined or null projects\n    const safeProjects = projects || [];\n    const monthRange = getProjectionsMonthRange();\n    const table = {};\n    safeProjects.forEach((project)=>{\n        table[project.project_id] = {\n            months: {},\n            asrFee: 0\n        };\n        monthRange.forEach((month)=>{\n            const isEditable = isFutureMonth(month);\n            table[project.project_id].months[month] = {\n                value: 0,\n                isEditable,\n                isProjected: isEditable\n            };\n        });\n    });\n    return table;\n}\n// New functions for Clockify integration\nfunction calculateTimeTrackingKPIs(clockifyData) {\n    const efficiency = clockifyData.totalHours > 0 ? clockifyData.billableHours / clockifyData.totalHours : 0;\n    const averageHourlyRate = clockifyData.billableHours > 0 ? clockifyData.billableAmount / clockifyData.billableHours : 0;\n    return {\n        projectId: clockifyData.projectId,\n        projectName: clockifyData.projectName,\n        totalHours: clockifyData.totalHours,\n        billableHours: clockifyData.billableHours,\n        nonBillableHours: clockifyData.nonBillableHours,\n        hourlyRate: averageHourlyRate,\n        totalValue: clockifyData.billableAmount,\n        efficiency,\n        period: clockifyData.period\n    };\n}\nfunction enhanceBillingDataWithClockify(billingData, clockifyReports) {\n    return billingData.map((project)=>{\n        const clockifyReport = clockifyReports.find((report)=>report.projectId === project.projectId || report.projectName.toLowerCase().includes(project.projectName.toLowerCase()));\n        if (clockifyReport) {\n            const timeTrackingKPI = calculateTimeTrackingKPIs(clockifyReport);\n            return {\n                ...project,\n                clockifyData: clockifyReport,\n                totalHours: clockifyReport.totalHours,\n                billableHours: clockifyReport.billableHours,\n                nonBillableHours: clockifyReport.nonBillableHours,\n                hourlyRate: timeTrackingKPI.hourlyRate,\n                efficiency: timeTrackingKPI.efficiency\n            };\n        }\n        return project;\n    });\n}\nfunction calculateProfitabilityMetrics(billingData, timeTrackingKPI) {\n    const revenue = billingData.totalBilled + billingData.totalUnbilled;\n    const cost = timeTrackingKPI ? timeTrackingKPI.totalValue : 0;\n    const profit = revenue - cost;\n    const margin = revenue > 0 ? profit / revenue * 100 : 0;\n    return {\n        revenue,\n        cost,\n        profit,\n        margin\n    };\n}\nfunction formatHours(hours) {\n    const wholeHours = Math.floor(hours);\n    const minutes = Math.round((hours - wholeHours) * 60);\n    return `${wholeHours}h ${minutes}m`;\n}\nfunction formatEfficiency(efficiency) {\n    return `${(efficiency * 100).toFixed(1)}%`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/date-fns","vendor-chunks/tailwind-merge","vendor-chunks/@babel","vendor-chunks/clsx"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Froute&page=%2Fapi%2Fclockify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();