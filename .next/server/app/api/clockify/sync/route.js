"use strict";(()=>{var e={};e.id=7371,e.ids=[7371],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},71966:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>g,patchFetch:()=>h,requestAsyncStorage:()=>p,routeModule:()=>u,serverHooks:()=>y,staticGenerationAsyncStorage:()=>m});var r={};a.r(r),a.d(r,{POST:()=>d});var o=a(49303),s=a(88716),n=a(60670),i=a(87070),c=a(88403);let l=new(a(53524)).PrismaClient;async function d(e){try{console.log("\uD83D\uDD04 Starting Clockify data sync...");let{startDate:t,endDate:a}=await e.json(),r=new Date;r.setDate(r.getDate()-30);let o=t||r.toISOString(),s=a||new Date().toISOString();if(console.log(`📅 Syncing data from ${o} to ${s}`),!c.e1.getConfigurationStatus().configured)return i.NextResponse.json({success:!1,error:"Clockify not configured",message:"Please configure CLOCKIFY_API_KEY and CLOCKIFY_WORKSPACE_ID in your environment variables"},{status:400});let[n,d,u]=await Promise.all([c.e1.getAllTimeEntries(o,s),c.e1.getProjects(),c.e1.getUsers(c.e1.getConfigurationStatus().hasWorkspaceId?process.env.CLOCKIFY_WORKSPACE_ID:"")]);console.log(`📊 Fetched ${n.length} time entries, ${d.length} projects, ${u.length} users`);let p={timeEntries:{created:0,updated:0,errors:0},projects:{created:0,updated:0,errors:0},users:{created:0,updated:0,errors:0}};for(let e of u)try{await l.clockify_users.upsert({where:{id:e.id},update:{name:e.name,email:e.email,workspaceId:e.activeWorkspace||process.env.CLOCKIFY_WORKSPACE_ID,status:e.status||"ACTIVE",updatedAt:new Date},create:{id:e.id,name:e.name,email:e.email,workspaceId:e.activeWorkspace||process.env.CLOCKIFY_WORKSPACE_ID,status:e.status||"ACTIVE",createdAt:new Date,updatedAt:new Date}}),p.users.created++}catch(t){console.error(`❌ Error syncing user ${e.id}:`,t),p.users.errors++}for(let e of d)try{await l.clockify_projects.upsert({where:{id:e.id},update:{name:e.name,workspaceId:e.workspaceId,clientId:e.clientId,clientName:e.clientName,billable:e.billable,archived:e.archived,hourlyRate:"object"==typeof e.hourlyRate?e.hourlyRate.amount:e.hourlyRate,budget:e.budget,startDate:e.startDate?new Date(e.startDate):null,endDate:e.endDate?new Date(e.endDate):null,updatedAt:new Date},create:{id:e.id,name:e.name,workspaceId:e.workspaceId,clientId:e.clientId,clientName:e.clientName,billable:e.billable,archived:e.archived,hourlyRate:"object"==typeof e.hourlyRate?e.hourlyRate.amount:e.hourlyRate,budget:e.budget,startDate:e.startDate?new Date(e.startDate):null,endDate:e.endDate?new Date(e.endDate):null,createdAt:new Date,updatedAt:new Date}}),p.projects.created++}catch(t){console.error(`❌ Error syncing project ${e.id}:`,t),p.projects.errors++}for(let e of n)try{let t=new Date(e.timeInterval?.start||e.start||o),a=e.timeInterval?.end||e.end?new Date(e.timeInterval?.end||e.end):null;await l.clockify_time_entries.upsert({where:{id:e.id},update:{description:e.description,userId:e.userId,userName:e.userName,projectId:e.projectId,projectName:e.projectName,billable:e.billable,startTime:t,endTime:a,duration:e.timeInterval?.duration||"PT0H",hourlyRate:"object"==typeof e.hourlyRate?e.hourlyRate.amount:e.hourlyRate,costRate:"object"==typeof e.costRate?e.costRate.amount:e.costRate,tags:e.tags?.map(e=>e.name||e)||[],updatedAt:new Date},create:{id:e.id,description:e.description,userId:e.userId,userName:e.userName,projectId:e.projectId,projectName:e.projectName,billable:e.billable,startTime:t,endTime:a,duration:e.timeInterval?.duration||"PT0H",hourlyRate:"object"==typeof e.hourlyRate?e.hourlyRate.amount:e.hourlyRate,costRate:"object"==typeof e.costRate?e.costRate.amount:e.costRate,tags:e.tags?.map(e=>e.name||e)||[],createdAt:new Date,updatedAt:new Date}}),p.timeEntries.created++}catch(t){console.error(`❌ Error syncing time entry ${e.id}:`,t),p.timeEntries.errors++}return console.log("✅ Clockify sync completed:",p),i.NextResponse.json({success:!0,message:"Clockify data synced successfully",results:p,summary:{totalTimeEntries:n.length,totalProjects:d.length,totalUsers:u.length,dateRange:{start:o,end:s}},timestamp:new Date().toISOString()})}catch(e){return console.error("❌ Clockify sync failed:",e),i.NextResponse.json({success:!1,error:"Failed to sync Clockify data",message:e instanceof Error?e.message:"Unknown error",timestamp:new Date().toISOString()},{status:500})}finally{await l.$disconnect()}}let u=new o.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/clockify/sync/route",pathname:"/api/clockify/sync",filename:"route",bundlePath:"app/api/clockify/sync/route"},resolvedPagePath:"C:\\Users\\Jonathan\\Desktop\\Billing\\app\\api\\clockify\\sync\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:p,staticGenerationAsyncStorage:m,serverHooks:y}=u,g="/api/clockify/sync/route";function h(){return(0,n.patchFetch)({serverHooks:y,staticGenerationAsyncStorage:m})}}};var t=require("../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[9276,5972,8403],()=>a(71966));module.exports=r})();