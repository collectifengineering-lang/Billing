"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/clockify/sync/route";
exports.ids = ["app/api/clockify/sync/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Fsync%2Froute&page=%2Fapi%2Fclockify%2Fsync%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Fsync%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Fsync%2Froute&page=%2Fapi%2Fclockify%2Fsync%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Fsync%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Jonathan_Desktop_Billing_app_api_clockify_sync_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/clockify/sync/route.ts */ \"(rsc)/./app/api/clockify/sync/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/clockify/sync/route\",\n        pathname: \"/api/clockify/sync\",\n        filename: \"route\",\n        bundlePath: \"app/api/clockify/sync/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\Billing\\\\app\\\\api\\\\clockify\\\\sync\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Jonathan_Desktop_Billing_app_api_clockify_sync_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/clockify/sync/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjbG9ja2lmeSUyRnN5bmMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmNsb2NraWZ5JTJGc3luYyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNsb2NraWZ5JTJGc3luYyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUN5QjtBQUN0RztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8/NmNjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxKb25hdGhhblxcXFxEZXNrdG9wXFxcXEJpbGxpbmdcXFxcYXBwXFxcXGFwaVxcXFxjbG9ja2lmeVxcXFxzeW5jXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jbG9ja2lmeS9zeW5jL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY2xvY2tpZnkvc3luY1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY2xvY2tpZnkvc3luYy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXEpvbmF0aGFuXFxcXERlc2t0b3BcXFxcQmlsbGluZ1xcXFxhcHBcXFxcYXBpXFxcXGNsb2NraWZ5XFxcXHN5bmNcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2Nsb2NraWZ5L3N5bmMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Fsync%2Froute&page=%2Fapi%2Fclockify%2Fsync%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Fsync%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/clockify/sync/route.ts":
/*!****************************************!*\
  !*** ./app/api/clockify/sync/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_clockify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/clockify */ \"(rsc)/./lib/clockify.ts\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_2__.PrismaClient();\nasync function POST(request) {\n    try {\n        console.log(\"\\uD83D\\uDD04 Starting Clockify data sync...\");\n        const { startDate, endDate } = await request.json();\n        // Default to last 30 days if no dates provided\n        const defaultStartDate = new Date();\n        defaultStartDate.setDate(defaultStartDate.getDate() - 30);\n        const syncStartDate = startDate || defaultStartDate.toISOString();\n        const syncEndDate = endDate || new Date().toISOString();\n        console.log(`📅 Syncing data from ${syncStartDate} to ${syncEndDate}`);\n        // Check if Clockify is configured\n        const configStatus = _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getConfigurationStatus();\n        if (!configStatus.configured) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Clockify not configured\",\n                message: \"Please configure CLOCKIFY_API_KEY and CLOCKIFY_WORKSPACE_ID in your environment variables\"\n            }, {\n                status: 400\n            });\n        }\n        // Fetch data from Clockify\n        const [timeEntries, projects, users] = await Promise.all([\n            _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getAllTimeEntries(syncStartDate, syncEndDate),\n            _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getProjects(),\n            _lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getUsers(_lib_clockify__WEBPACK_IMPORTED_MODULE_1__.clockifyService.getConfigurationStatus().hasWorkspaceId ? process.env.CLOCKIFY_WORKSPACE_ID : \"\")\n        ]);\n        console.log(`📊 Fetched ${timeEntries.length} time entries, ${projects.length} projects, ${users.length} users`);\n        let syncResults = {\n            timeEntries: {\n                created: 0,\n                updated: 0,\n                errors: 0\n            },\n            projects: {\n                created: 0,\n                updated: 0,\n                errors: 0\n            },\n            users: {\n                created: 0,\n                updated: 0,\n                errors: 0\n            }\n        };\n        // Sync users\n        for (const user of users){\n            try {\n                await prisma.clockifyUser.upsert({\n                    where: {\n                        id: user.id\n                    },\n                    update: {\n                        name: user.name,\n                        email: user.email,\n                        workspaceId: user.activeWorkspace || process.env.CLOCKIFY_WORKSPACE_ID,\n                        status: user.status || \"ACTIVE\",\n                        updatedAt: new Date()\n                    },\n                    create: {\n                        id: user.id,\n                        name: user.name,\n                        email: user.email,\n                        workspaceId: user.activeWorkspace || process.env.CLOCKIFY_WORKSPACE_ID,\n                        status: user.status || \"ACTIVE\"\n                    }\n                });\n                syncResults.users.created++;\n            } catch (error) {\n                console.error(`❌ Error syncing user ${user.id}:`, error);\n                syncResults.users.errors++;\n            }\n        }\n        // Sync projects\n        for (const project of projects){\n            try {\n                await prisma.clockifyProject.upsert({\n                    where: {\n                        id: project.id\n                    },\n                    update: {\n                        name: project.name,\n                        workspaceId: project.workspaceId,\n                        clientId: project.clientId,\n                        clientName: project.clientName,\n                        billable: project.billable,\n                        archived: project.archived,\n                        hourlyRate: typeof project.hourlyRate === \"object\" ? project.hourlyRate.amount : project.hourlyRate,\n                        budget: project.budget,\n                        startDate: project.startDate ? new Date(project.startDate) : null,\n                        endDate: project.endDate ? new Date(project.endDate) : null,\n                        updatedAt: new Date()\n                    },\n                    create: {\n                        id: project.id,\n                        name: project.name,\n                        workspaceId: project.workspaceId,\n                        clientId: project.clientId,\n                        clientName: project.clientName,\n                        billable: project.billable,\n                        archived: project.archived,\n                        hourlyRate: typeof project.hourlyRate === \"object\" ? project.hourlyRate.amount : project.hourlyRate,\n                        budget: project.budget,\n                        startDate: project.startDate ? new Date(project.startDate) : null,\n                        endDate: project.endDate ? new Date(project.endDate) : null\n                    }\n                });\n                syncResults.projects.created++;\n            } catch (error) {\n                console.error(`❌ Error syncing project ${project.id}:`, error);\n                syncResults.projects.errors++;\n            }\n        }\n        // Sync time entries\n        for (const entry of timeEntries){\n            try {\n                const startTime = new Date(entry.timeInterval?.start || entry.start || syncStartDate);\n                const endTime = entry.timeInterval?.end || entry.end ? new Date(entry.timeInterval?.end || entry.end) : null;\n                await prisma.clockifyTimeEntry.upsert({\n                    where: {\n                        id: entry.id\n                    },\n                    update: {\n                        description: entry.description,\n                        userId: entry.userId,\n                        userName: entry.userName,\n                        projectId: entry.projectId,\n                        projectName: entry.projectName,\n                        billable: entry.billable,\n                        startTime,\n                        endTime,\n                        duration: entry.timeInterval?.duration || \"PT0H\",\n                        hourlyRate: typeof entry.hourlyRate === \"object\" ? entry.hourlyRate.amount : entry.hourlyRate,\n                        costRate: typeof entry.costRate === \"object\" ? entry.costRate.amount : entry.costRate,\n                        tags: entry.tags?.map((tag)=>tag.name || tag) || [],\n                        updatedAt: new Date()\n                    },\n                    create: {\n                        id: entry.id,\n                        description: entry.description,\n                        userId: entry.userId,\n                        userName: entry.userName,\n                        projectId: entry.projectId,\n                        projectName: entry.projectName,\n                        billable: entry.billable,\n                        startTime,\n                        endTime,\n                        duration: entry.timeInterval?.duration || \"PT0H\",\n                        hourlyRate: typeof entry.hourlyRate === \"object\" ? entry.hourlyRate.amount : entry.hourlyRate,\n                        costRate: typeof entry.costRate === \"object\" ? entry.costRate.amount : entry.costRate,\n                        tags: entry.tags?.map((tag)=>tag.name || tag) || []\n                    }\n                });\n                syncResults.timeEntries.created++;\n            } catch (error) {\n                console.error(`❌ Error syncing time entry ${entry.id}:`, error);\n                syncResults.timeEntries.errors++;\n            }\n        }\n        console.log(\"✅ Clockify sync completed:\", syncResults);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: \"Clockify data synced successfully\",\n            results: syncResults,\n            summary: {\n                totalTimeEntries: timeEntries.length,\n                totalProjects: projects.length,\n                totalUsers: users.length,\n                dateRange: {\n                    start: syncStartDate,\n                    end: syncEndDate\n                }\n            },\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"❌ Clockify sync failed:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to sync Clockify data\",\n            message: error instanceof Error ? error.message : \"Unknown error\",\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    } finally{\n        await prisma.$disconnect();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/clockify/sync/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/clockify.ts":
/*!*************************!*\
  !*** ./lib/clockify.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clockifyService: () => (/* binding */ clockifyService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fetchAllClockifyTimeSummaries: () => (/* binding */ fetchAllClockifyTimeSummaries),\n/* harmony export */   fetchClockifyProjects: () => (/* binding */ fetchClockifyProjects),\n/* harmony export */   fetchClockifyTimeEntries: () => (/* binding */ fetchClockifyTimeEntries),\n/* harmony export */   fetchClockifyTimeReport: () => (/* binding */ fetchClockifyTimeReport)\n/* harmony export */ });\nclass ClockifyService {\n    constructor(){\n        this.apiKey = null;\n        this.workspaceId = null;\n        this.baseUrl = \"https://api.clockify.me/api/v1\";\n        this.reportsBaseUrl = \"https://reports.api.clockify.me/v1\" // Correct Reports API base URL\n        ;\n        this._isConfigured = false;\n        this.apiKey = process.env.CLOCKIFY_API_KEY || null;\n        this.workspaceId = process.env.CLOCKIFY_WORKSPACE_ID || null;\n        // Check if we have valid credentials\n        if (this.apiKey && this.apiKey !== \"your_clockify_api_key_here\" && this.workspaceId && this.workspaceId !== \"your_clockify_workspace_id_here\") {\n            this._isConfigured = true;\n            console.info(\"Clockify service initialized with valid credentials\");\n        } else {\n            this._isConfigured = false;\n            console.warn(\"Clockify service initialized without valid credentials - will use mock data\");\n            console.warn(\"Please set CLOCKIFY_API_KEY and CLOCKIFY_WORKSPACE_ID in your environment variables\");\n        }\n    }\n    getHeaders() {\n        if (!this.apiKey) {\n            throw new Error(\"Clockify API key not configured\");\n        }\n        return {\n            \"X-Api-Key\": this.apiKey,\n            \"Content-Type\": \"application/json\"\n        };\n    }\n    async makeRequest(endpoint, params) {\n        if (!this._isConfigured) {\n            throw new Error(\"Clockify service not properly configured\");\n        }\n        try {\n            const url = new URL(`${this.baseUrl}${endpoint}`);\n            if (params) {\n                Object.keys(params).forEach((key)=>{\n                    if (params[key] !== undefined && params[key] !== null) {\n                        url.searchParams.append(key, params[key]);\n                    }\n                });\n            }\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            console.log(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            console.log(`📡 Clockify API Response: ${response.status} ${response.statusText}`);\n            if (response.status === 401) {\n                throw new Error(\"Clockify API authentication failed - check your API key\");\n            }\n            if (response.status === 403) {\n                throw new Error(\"Clockify API access forbidden - check your workspace ID and permissions\");\n            }\n            if (response.status === 404) {\n                const errorDetails = `Endpoint not found: ${endpoint}`;\n                console.error(`❌ 404 Error Details: ${errorDetails}`);\n                console.error(`   Full URL: ${url.toString()}`);\n                console.error(`   Workspace ID: ${this.workspaceId}`);\n                console.error(`   API Key configured: ${!!this.apiKey}`);\n                throw new Error(`Clockify API error: 404 Not Found - ${errorDetails}`);\n            }\n            if (response.status === 429) {\n                throw new Error(\"Clockify API rate limit exceeded - try again later\");\n            }\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: ${endpoint}`);\n            return data;\n        } catch (error) {\n            if (error instanceof Error) {\n                console.error(`❌ Clockify API Error in ${endpoint}:`, error.message);\n                throw error;\n            }\n            throw new Error(`Clockify API request failed: ${error}`);\n        }\n    }\n    // Check if the service is properly configured\n    isConfigured() {\n        return this._isConfigured;\n    }\n    // Get configuration status for debugging\n    getConfigurationStatus() {\n        return {\n            configured: this._isConfigured,\n            hasApiKey: !!(this.apiKey && this.apiKey !== \"your_clockify_api_key_here\"),\n            hasWorkspaceId: !!(this.workspaceId && this.workspaceId !== \"your_clockify_workspace_id_here\")\n        };\n    }\n    // Alias for getConfigurationStatus to match API usage\n    getConfigStatus() {\n        return this.getConfigurationStatus();\n    }\n    // Method to set workspace ID dynamically\n    setWorkspaceId(workspaceId) {\n        this.workspaceId = workspaceId;\n        if (this.apiKey && this.apiKey !== \"your_clockify_api_key_here\") {\n            this._isConfigured = true;\n        }\n    }\n    async getUser() {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock user\");\n                return this.getMockUser();\n            }\n            const url = new URL(`${this.baseUrl}/user`);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /user`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify user:\", error);\n            console.log(\"Returning mock user due to Clockify API failure\");\n            return this.getMockUser();\n        }\n    }\n    async getWorkspaces() {\n        try {\n            return await this.makeRequest(\"/workspaces\");\n        } catch (error) {\n            console.error(\"Failed to get Clockify workspaces:\", error);\n            // Return mock workspace data when Clockify fails\n            return [\n                {\n                    id: \"mock-workspace-id\",\n                    name: \"Mock Workspace\",\n                    hourlyRate: {\n                        amount: 100,\n                        currency: \"USD\"\n                    }\n                }\n            ];\n        }\n    }\n    async getProjects() {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock projects\");\n                return this.getMockProjects();\n            }\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/projects`);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /workspaces/${this.workspaceId}/projects`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify projects:\", error);\n            console.log(\"Returning mock projects due to Clockify API failure\");\n            return this.getMockProjects();\n        }\n    }\n    async getTimeEntries(projectId, startDate, endDate) {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock data\");\n                return this.getMockTimeEntries(projectId, startDate, endDate);\n            }\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/projects/${projectId}/time-entries`);\n            url.searchParams.append(\"start\", startDate);\n            url.searchParams.append(\"end\", endDate);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /workspaces/${this.workspaceId}/projects/${projectId}/time-entries`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify time entries:\", error);\n            console.log(\"Returning mock time entry data due to Clockify API failure\");\n            return this.getMockTimeEntries(projectId, startDate, endDate);\n        }\n    }\n    async getAllTimeEntries(startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            // First try the Reports API for bulk time entry data\n            try {\n                console.info(\"\\uD83D\\uDD04 Attempting to fetch time entries via Clockify Reports API (requires Pro plan)...\");\n                return await this.getTimeEntriesViaReports(startDate, endDate);\n            } catch (reportsError) {\n                console.warn(\"⚠️ Clockify Reports API failed, falling back to user time entries endpoint:\", {\n                    error: reportsError instanceof Error ? reportsError.message : \"Unknown error\",\n                    reason: \"Reports API may require Pro plan or may be temporarily unavailable\",\n                    fallback: \"Using user time entries endpoint instead\"\n                });\n                return await this.getTimeEntriesViaUserEndpoint(startDate, endDate);\n            }\n        } catch (error) {\n            console.error(\"❌ Failed to get all Clockify time entries:\", error);\n            // Return mock time entry data when Clockify fails\n            console.warn(\"\\uD83C\\uDFAD Returning mock time entry data due to Clockify API failure. Check your plan level and API configuration.\");\n            return [\n                {\n                    id: \"mock-time-entry-1\",\n                    description: \"Mock work session (Clockify API unavailable)\",\n                    timeInterval: {\n                        start: startDate,\n                        end: endDate,\n                        duration: \"PT8H0M\"\n                    },\n                    billable: true,\n                    userId: \"mock-user-id\",\n                    userName: \"Mock User\",\n                    projectId: \"mock-project-1\",\n                    projectName: \"Mock Project 1\"\n                }\n            ];\n        }\n    }\n    // Method to get time entries via Reports API (preferred method)\n    async getTimeEntriesViaReports(startDate, endDate) {\n        const url = new URL(`${this.reportsBaseUrl}/workspaces/${this.workspaceId}/reports/detailed`);\n        console.info(`🔍 Clockify Reports API Request: ${url.toString()}`);\n        console.info(`   Method: POST (Reports API)`);\n        console.info(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n        console.info(`   Body: ${JSON.stringify({\n            dateRangeStart: startDate,\n            dateRangeEnd: endDate,\n            detailedFilter: {\n                pageSize: 1000,\n                sortColumn: \"DATE\"\n            }\n        })}`);\n        const response = await fetch(url.toString(), {\n            method: \"POST\",\n            headers: {\n                ...this.getHeaders(),\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                dateRangeStart: startDate,\n                dateRangeEnd: endDate,\n                detailedFilter: {\n                    pageSize: 1000,\n                    sortColumn: \"DATE\"\n                }\n            })\n        });\n        console.info(`📡 Clockify Reports API Response: ${response.status} ${response.statusText}`);\n        if (response.status === 401) {\n            throw new Error(\"Clockify API authentication failed - check your API key\");\n        }\n        if (response.status === 403) {\n            throw new Error(\"Clockify API access forbidden - check your workspace ID and permissions. Note: Detailed reports require Pro plan or higher.\");\n        }\n        if (response.status === 404) {\n            const errorDetails = `Reports endpoint not found: /workspaces/${this.workspaceId}/reports/detailed`;\n            console.error(`❌ 404 Error Details: ${errorDetails}`);\n            console.error(`   Full URL: ${url.toString()}`);\n            console.error(`   Workspace ID: ${this.workspaceId}`);\n            console.error(`   API Key configured: ${!!this.apiKey}`);\n            console.error(`   Note: This endpoint requires Clockify Pro plan or higher for detailed reports`);\n            throw new Error(`Clockify API error: 404 Not Found - ${errorDetails}. This endpoint requires Pro plan or higher.`);\n        }\n        if (response.status === 405) {\n            throw new Error(\"Clockify API method not allowed - this endpoint requires POST method\");\n        }\n        if (response.status === 429) {\n            throw new Error(\"Clockify API rate limit exceeded - try again later\");\n        }\n        if (!response.ok) {\n            const errorText = await response.text().catch(()=>\"Unknown error\");\n            console.error(`Clockify Reports API error response body: ${errorText}`);\n            throw new Error(`Clockify API error: ${response.status} ${response.statusText} - ${errorText}`);\n        }\n        const data = await response.json();\n        console.info(`✅ Clockify Reports API Success: /workspaces/${this.workspaceId}/reports/detailed`);\n        // Transform the reports data to match our expected time entry format\n        if (data.timeentries && Array.isArray(data.timeentries)) {\n            console.info(`📊 Processing ${data.timeentries.length} time entries from Reports API`);\n            return data.timeentries.map((entry, index)=>{\n                try {\n                    // Handle duration conversion - Reports API returns duration in seconds as number\n                    let duration = \"PT0H0M\";\n                    if (entry.duration !== undefined && entry.duration !== null) {\n                        if (typeof entry.duration === \"number\") {\n                            // Convert seconds to ISO 8601 duration format\n                            const hours = Math.floor(entry.duration / 3600);\n                            const minutes = Math.floor(entry.duration % 3600 / 60);\n                            duration = `PT${hours}H${minutes}M`;\n                        } else if (typeof entry.duration === \"string\") {\n                            // If it's already a string, use it directly\n                            duration = entry.duration;\n                        }\n                    }\n                    // Handle undefined IDs - generate a fallback ID if needed\n                    const entryId = entry.id || `reports-entry-${index}-${Date.now()}`;\n                    // Log sample entry for debugging (first few entries)\n                    if (index < 3) {\n                        console.info(`📝 Sample entry ${index}:`, {\n                            id: entryId,\n                            duration: entry.duration,\n                            convertedDuration: duration,\n                            projectId: entry.projectId,\n                            userId: entry.userId\n                        });\n                    }\n                    return {\n                        id: entryId,\n                        description: entry.description || \"No description\",\n                        timeInterval: {\n                            start: entry.timeInterval?.start || entry.start,\n                            end: entry.timeInterval?.end || entry.end,\n                            duration: duration\n                        },\n                        billable: entry.billable || false,\n                        userId: entry.userId || \"unknown-user\",\n                        userName: entry.userName || \"Unknown User\",\n                        projectId: entry.projectId || \"unknown-project\",\n                        projectName: entry.projectName || \"Unknown Project\",\n                        hourlyRate: entry.hourlyRate || 0\n                    };\n                } catch (entryError) {\n                    console.error(`❌ Error processing time entry ${index}:`, entryError);\n                    console.error(`   Raw entry data:`, entry);\n                    // Return a safe fallback entry\n                    return {\n                        id: `error-entry-${index}-${Date.now()}`,\n                        description: \"Error processing entry\",\n                        timeInterval: {\n                            start: startDate,\n                            end: endDate,\n                            duration: \"PT0H0M\"\n                        },\n                        billable: false,\n                        userId: \"error-user\",\n                        userName: \"Error User\",\n                        projectId: \"error-project\",\n                        projectName: \"Error Project\",\n                        hourlyRate: 0\n                    };\n                }\n            }).filter((entry)=>entry !== null); // Remove any null entries\n        }\n        console.warn(\"⚠️ No time entries found in Reports API response\");\n        return [];\n    }\n    // Fallback method to get time entries via user endpoint (GET method)\n    async getTimeEntriesViaUserEndpoint(startDate, endDate) {\n        try {\n            // Get the current user first\n            const user = await this.getUser();\n            if (!user?.id) {\n                throw new Error(\"Could not get current user for time entries\");\n            }\n            // Use GET method with query parameters - this is the correct way to fetch time entries\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/user/${user.id}/time-entries`);\n            url.searchParams.set(\"start\", startDate);\n            url.searchParams.set(\"end\", endDate);\n            console.info(`🔍 Clockify User Time Entries API Request (Fallback): ${url.toString()}`);\n            console.info(`   Method: GET (User Time Entries - Fallback from Reports API)`);\n            console.info(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n            console.info(`   Note: Using fallback method because Reports API failed or requires Pro plan`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            console.info(`📡 Clockify User Time Entries API Response: ${response.status} ${response.statusText}`);\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                console.error(`Clockify User Time Entries API error response body: ${errorText}`);\n                throw new Error(`Clockify User Time Entries API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const data = await response.json();\n            console.info(`✅ Clockify User Time Entries API Success (Fallback): /workspaces/${this.workspaceId}/user/${user.id}/time-entries`);\n            console.info(`   Retrieved ${data?.length || 0} time entries via fallback method`);\n            // Transform the data to match our expected format\n            if (Array.isArray(data)) {\n                return data.map((entry, index)=>{\n                    try {\n                        // Handle duration conversion - User API might also return duration as number\n                        let duration = \"PT0H0M\";\n                        if (entry.duration !== undefined && entry.duration !== null) {\n                            if (typeof entry.duration === \"number\") {\n                                // Convert seconds to ISO 8601 duration format\n                                const hours = Math.floor(entry.duration / 3600);\n                                const minutes = Math.floor(entry.duration % 3600 / 60);\n                                duration = `PT${hours}H${minutes}M`;\n                            } else if (typeof entry.duration === \"string\") {\n                                // If it's already a string, use it directly\n                                duration = entry.duration;\n                            }\n                        }\n                        // Handle undefined IDs - generate a fallback ID if needed\n                        const entryId = entry.id || `user-entry-${index}-${Date.now()}`;\n                        // Log sample entry for debugging (first few entries)\n                        if (index < 3) {\n                            console.info(`📝 Fallback entry ${index}:`, {\n                                id: entryId,\n                                duration: entry.duration,\n                                convertedDuration: duration,\n                                projectId: entry.projectId,\n                                userId: entry.userId\n                            });\n                        }\n                        return {\n                            id: entryId,\n                            description: entry.description || \"No description\",\n                            timeInterval: {\n                                start: entry.timeInterval?.start || entry.start,\n                                end: entry.timeInterval?.end || entry.end,\n                                duration: duration\n                            },\n                            billable: entry.billable || false,\n                            userId: entry.userId || \"unknown-user\",\n                            userName: entry.userName || \"Unknown User\",\n                            projectId: entry.projectId || \"unknown-project\",\n                            projectName: entry.projectName || \"Unknown Project\",\n                            hourlyRate: entry.hourlyRate || 0\n                        };\n                    } catch (entryError) {\n                        console.error(`❌ Error processing fallback time entry ${index}:`, entryError);\n                        console.error(`   Raw entry data:`, entry);\n                        // Return a safe fallback entry\n                        return {\n                            id: `error-fallback-${index}-${Date.now()}`,\n                            description: \"Error processing fallback entry\",\n                            timeInterval: {\n                                start: startDate,\n                                end: endDate,\n                                duration: \"PT0H0M\"\n                            },\n                            billable: false,\n                            userId: \"error-user\",\n                            userName: \"Error User\",\n                            projectId: \"error-project\",\n                            projectName: \"Error Project\",\n                            hourlyRate: 0\n                        };\n                    }\n                }).filter((entry)=>entry !== null); // Remove any null entries\n            }\n            return [];\n        } catch (error) {\n            console.error(\"Failed to get time entries via user endpoint (fallback):\", error);\n            throw error;\n        }\n    }\n    async getProjectTimeReport(projectId, startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const timeEntries = await this.getTimeEntries(projectId, startDate, endDate);\n            const project = await this.getProjects().then((projects)=>projects.find((p)=>p.id === projectId));\n            if (!project) {\n                throw new Error(\"Project not found\");\n            }\n            const totalHours = timeEntries.reduce((sum, entry)=>{\n                const duration = entry.timeInterval.duration;\n                const hours = this.parseDuration(duration);\n                return sum + hours;\n            }, 0);\n            const billableHours = timeEntries.filter((entry)=>entry.billable).reduce((sum, entry)=>{\n                const duration = entry.timeInterval.duration;\n                const hours = this.parseDuration(duration);\n                return sum + hours;\n            }, 0);\n            const nonBillableHours = totalHours - billableHours;\n            return {\n                projectId,\n                projectName: project.name,\n                totalHours,\n                billableHours,\n                nonBillableHours,\n                totalAmount: totalHours * (typeof project.hourlyRate === \"object\" ? project.hourlyRate.amount : project.hourlyRate || 0),\n                billableAmount: billableHours * (typeof project.hourlyRate === \"object\" ? project.hourlyRate.amount : project.hourlyRate || 0),\n                nonBillableAmount: nonBillableHours * (typeof project.hourlyRate === \"object\" ? project.hourlyRate.amount : project.hourlyRate || 0),\n                entries: timeEntries,\n                period: {\n                    start: startDate,\n                    end: endDate\n                }\n            };\n        } catch (error) {\n            console.error(\"Failed to get project time report:\", error);\n            return null;\n        }\n    }\n    async getAllProjectsTimeSummary(startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const projects = await this.getProjects();\n            const reports = [];\n            for (const project of projects){\n                const report = await this.getProjectTimeReport(project.id, startDate, endDate);\n                if (report) {\n                    reports.push(report);\n                }\n            }\n            return reports;\n        } catch (error) {\n            console.error(\"Failed to get all projects time summary:\", error);\n            return [];\n        }\n    }\n    // Helper method to parse ISO 8601 duration to hours\n    parseDuration(duration) {\n        const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || \"0\");\n        const minutes = parseInt(match[2] || \"0\");\n        const seconds = parseInt(match[3] || \"0\");\n        return hours + minutes / 60 + seconds / 3600;\n    }\n    // Enhanced method to generate mock time entries\n    getMockTimeEntries(projectId, startDate, endDate) {\n        return [\n            {\n                id: `mock-${projectId}-1`,\n                description: \"Mock project work\",\n                timeInterval: {\n                    start: startDate,\n                    end: endDate,\n                    duration: \"PT8H0M\"\n                },\n                billable: true,\n                userId: \"mock-user-id\",\n                userName: \"Mock User\",\n                projectId: projectId,\n                projectName: \"Mock Project\"\n            }\n        ];\n    }\n    // Enhanced method to generate mock projects\n    getMockProjects() {\n        return [\n            {\n                id: \"mock-project-1\",\n                name: \"Mock Project 1\",\n                workspaceId: \"mock-workspace\",\n                clientId: \"mock-client-1\",\n                clientName: \"Mock Client 1\",\n                isPublic: true,\n                isTemplate: false,\n                color: \"#000000\",\n                billable: true,\n                public: true,\n                archived: false,\n                status: \"ACTIVE\",\n                budget: 50000,\n                hourlyRate: {\n                    amount: 150,\n                    currency: \"USD\"\n                }\n            }\n        ];\n    }\n    // Enhanced method to generate mock user\n    getMockUser() {\n        return {\n            id: \"mock-user-id\",\n            email: \"mock@example.com\",\n            name: \"Mock User\",\n            profilePicture: \"\",\n            status: \"ACTIVE\",\n            activeWorkspace: \"mock-workspace\",\n            defaultWorkspace: \"mock-workspace\"\n        };\n    }\n    // Data Import Methods - NEW: Import time entries to database\n    async importTimeEntries(startDate, endDate) {\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting Clockify time entries import...\");\n            console.log(`📅 Date range: ${startDate} to ${endDate}`);\n            // Get all time entries for the date range\n            const timeEntries = await this.getTimeEntries(\"\", startDate, endDate);\n            console.log(`📊 Found ${timeEntries.length} time entries to process`);\n            if (timeEntries.length === 0) {\n                console.log(\"⚠️ No time entries found for the specified date range\");\n                return {\n                    success: true,\n                    recordsImported: 0,\n                    errors: [],\n                    summary: {\n                        totalEntries: 0,\n                        billableHours: 0,\n                        nonBillableHours: 0,\n                        totalCost: 0\n                    }\n                };\n            }\n            // Get projects and users for mapping\n            const [projects, users] = await Promise.all([\n                this.getProjects(),\n                this.getWorkspaces().then((workspaces)=>workspaces.length > 0 ? this.getUsers(workspaces[0].id) : [])\n            ]);\n            console.log(`📋 Retrieved ${projects.length} projects and ${users.length} users for mapping`);\n            let recordsImported = 0;\n            const errors = [];\n            let totalBillableHours = 0;\n            let totalNonBillableHours = 0;\n            let totalCost = 0;\n            // Process each time entry\n            for (const entry of timeEntries){\n                try {\n                    // Find user and project details\n                    const user = users.find((u)=>u.id === entry.userId);\n                    const project = projects.find((p)=>p.id === entry.projectId);\n                    if (!user || !project) {\n                        const errorMsg = `Missing user (${entry.userId}) or project (${entry.projectId}) for entry ${entry.id}`;\n                        console.warn(`⚠️ ${errorMsg}`);\n                        errors.push(errorMsg);\n                        continue;\n                    }\n                    // Parse duration to hours\n                    const hours = this.parseDuration(entry.timeInterval.duration);\n                    const billableHours = entry.billable ? hours : 0;\n                    const nonBillableHours = entry.billable ? 0 : hours;\n                    // Calculate costs (using project hourly rate if available)\n                    const hourlyRate = typeof project.hourlyRate === \"object\" ? project.hourlyRate.amount : project.hourlyRate || 0;\n                    const totalCostForEntry = hours * hourlyRate;\n                    // Update totals\n                    totalBillableHours += billableHours;\n                    totalNonBillableHours += nonBillableHours;\n                    totalCost += totalCostForEntry;\n                    // Log successful processing\n                    console.log(`✅ Processed entry: ${user.name} - ${project.name} - ${hours.toFixed(2)}h (${entry.billable ? \"Billable\" : \"Non-billable\"})`);\n                    recordsImported++;\n                } catch (entryError) {\n                    const errorMsg = `Error processing entry ${entry.id}: ${entryError}`;\n                    console.error(`❌ ${errorMsg}`);\n                    errors.push(errorMsg);\n                }\n            }\n            const summary = {\n                totalEntries: timeEntries.length,\n                billableHours: totalBillableHours,\n                nonBillableHours: totalNonBillableHours,\n                totalCost: totalCost\n            };\n            console.log(`📊 Import completed: ${recordsImported}/${timeEntries.length} entries processed successfully`);\n            console.log(`💰 Summary: ${totalBillableHours.toFixed(2)} billable hours, ${totalNonBillableHours.toFixed(2)} non-billable hours, $${totalCost.toFixed(2)} total cost`);\n            if (errors.length > 0) {\n                console.warn(`⚠️ ${errors.length} errors encountered during import`);\n            }\n            return {\n                success: recordsImported > 0,\n                recordsImported,\n                errors,\n                summary\n            };\n        } catch (error) {\n            console.error(\"❌ Clockify time entries import failed:\", error);\n            return {\n                success: false,\n                recordsImported: 0,\n                errors: [\n                    error instanceof Error ? error.message : \"Unknown error\"\n                ],\n                summary: {\n                    totalEntries: 0,\n                    billableHours: 0,\n                    nonBillableHours: 0,\n                    totalCost: 0\n                }\n            };\n        }\n    }\n    // Enhanced method to get users for a workspace\n    async getUsers(workspaceId) {\n        try {\n            if (!this.apiKey) {\n                throw new Error(\"API key not configured\");\n            }\n            const url = `${this.baseUrl}/workspaces/${workspaceId}/users`;\n            console.info(`🔍 Clockify Users API Request: ${url}`);\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const users = await response.json();\n            console.info(`✅ Retrieved ${users.length} users from workspace ${workspaceId}`);\n            return users;\n        } catch (error) {\n            console.error(\"Failed to get users:\", error);\n            // Return mock users as fallback\n            return [\n                this.getMockUser()\n            ];\n        }\n    }\n}\n// Create the service instance\nconst clockifyService = new ClockifyService();\n// Export the service instance as both default and named export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clockifyService);\n\n// Export convenience functions\nconst fetchClockifyProjects = async ()=>{\n    try {\n        return await clockifyService.getProjects();\n    } catch (error) {\n        console.error(\"Error fetching Clockify projects:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeEntries = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getTimeEntries(projectId, startDate || \"\", endDate || \"\");\n    } catch (error) {\n        console.error(\"Error fetching Clockify time entries:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeReport = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getProjectTimeReport(projectId, startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time report:\", error);\n        return null;\n    }\n};\nconst fetchAllClockifyTimeSummaries = async (startDate, endDate)=>{\n    try {\n        return await clockifyService.getAllProjectsTimeSummary(startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time summaries:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/clockify.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fclockify%2Fsync%2Froute&page=%2Fapi%2Fclockify%2Fsync%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fclockify%2Fsync%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();