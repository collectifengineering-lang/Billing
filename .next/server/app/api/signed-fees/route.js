"use strict";(()=>{var e={};e.id=716,e.ids=[716],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78623:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>m,patchFetch:()=>x,requestAsyncStorage:()=>g,routeModule:()=>p,serverHooks:()=>h,staticGenerationAsyncStorage:()=>f});var r={};s.r(r),s.d(r,{GET:()=>u,POST:()=>l,dynamic:()=>c});var n=s(49303),o=s(88716),a=s(60670),i=s(87070),d=s(52663);let c="force-dynamic";async function u(){try{console.log("Fetching signed fees from database...");let e=await d.Z.signedFee.findMany();console.log("Fetched",e.length,"signed fees from database");let t=e.reduce((e,t)=>(e[t.projectId]=t.value,e),{});return i.NextResponse.json(t)}catch(e){if(console.error("Error fetching signed fees:",e),"P2021"===e.code||e.message?.includes("does not exist"))return console.log("Tables do not exist, returning empty signed fees"),i.NextResponse.json({});return i.NextResponse.json({error:"Failed to fetch signed fees"},{status:500})}}async function l(e){let{projectId:t,value:s}=await e.json();try{return console.log("Updating signed fee for project:",t),await d.Z.signedFee.upsert({where:{projectId:t},update:{value:s},create:{projectId:t,value:s}}),console.log("Signed fee updated successfully"),i.NextResponse.json({success:!0})}catch(e){if(console.error("Error updating signed fee:",e),"P2021"===e.code||e.message?.includes("does not exist")){console.log("Table does not exist, attempting to create schema...");try{return await d.Z.signedFee.create({data:{projectId:"__test__",value:0}}),await d.Z.signedFee.deleteMany({where:{projectId:"__test__"}}),await d.Z.signedFee.upsert({where:{projectId:t},update:{value:s},create:{projectId:t,value:s}}),i.NextResponse.json({success:!0})}catch(e){return console.error("Failed to create table:",e),i.NextResponse.json({error:"Database schema not ready. Please run database setup first."},{status:500})}}return i.NextResponse.json({error:"Failed to update signed fee"},{status:500})}}let p=new n.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/signed-fees/route",pathname:"/api/signed-fees",filename:"route",bundlePath:"app/api/signed-fees/route"},resolvedPagePath:"C:\\Users\\Jonathan\\Desktop\\Billing\\app\\api\\signed-fees\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:g,staticGenerationAsyncStorage:f,serverHooks:h}=p,m="/api/signed-fees/route";function x(){return(0,a.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:f})}},52663:(e,t,s)=>{s.d(t,{Z:()=>n});let r=require("@prisma/client"),n=globalThis.prisma??new r.PrismaClient({log:["error"]})}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[276,972],()=>s(78623));module.exports=r})();