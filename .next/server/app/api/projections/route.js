"use strict";(()=>{var e={};e.id=909,e.ids=[909],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},50801:(e,t,o)=>{o.r(t),o.d(t,{originalPathname:()=>h,patchFetch:()=>A,requestAsyncStorage:()=>j,routeModule:()=>u,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var r={};o.r(r),o.d(r,{GET:()=>d,POST:()=>l,dynamic:()=>p});var s=o(49303),n=o(88716),a=o(60670),c=o(87070),i=o(9487);let p="force-dynamic";async function d(){try{console.log("DATABASE_URL (redacted):",process.env.DATABASE_URL?.replace(/\/\/.*@/,"//[redacted]@")||"Not set"),console.log("Fetching projections from database...");let e=await i.Z.projection.findMany();console.log("Fetched",e.length,"projections from database");let t=e.reduce((e,t)=>(e[t.projectId]||(e[t.projectId]={}),e[t.projectId][t.month]=t.value,e),{});return c.NextResponse.json(t)}catch(e){if(console.error("Error fetching projections:",e),console.error("DATABASE_URL (redacted):",process.env.DATABASE_URL?.replace(/\/\/.*@/,"//[redacted]@")||"Not set"),e instanceof Error&&(e.message?.includes("does not exist")||e.message?.includes("no such table")||"code"in e&&"P2021"===e.code))return console.log("Tables do not exist, returning empty projections"),c.NextResponse.json({});return console.log("Unknown error, returning empty projections"),c.NextResponse.json({})}}async function l(e){let{projectId:t,month:o,value:r}=await e.json();try{return console.log("DATABASE_URL (redacted):",process.env.DATABASE_URL?.replace(/\/\/.*@/,"//[redacted]@")||"Not set"),console.log("Updating projection for project:",t,"month:",o),await i.Z.projection.upsert({where:{projectId_month:{projectId:t,month:o}},update:{value:r},create:{projectId:t,month:o,value:r}}),console.log("Projection updated successfully"),c.NextResponse.json({success:!0})}catch(e){if(console.error("Error updating projection:",e),console.error("DATABASE_URL (redacted):",process.env.DATABASE_URL?.replace(/\/\/.*@/,"//[redacted]@")||"Not set"),e instanceof Error&&(e.message?.includes("does not exist")||"code"in e&&"P2021"===e.code)){console.log("Table does not exist, attempting to create schema...");try{return await i.Z.projection.create({data:{projectId:"__test__",month:"__test__",value:0}}),await i.Z.projection.deleteMany({where:{projectId:"__test__",month:"__test__"}}),await i.Z.projection.upsert({where:{projectId_month:{projectId:t,month:o}},update:{value:r},create:{projectId:t,month:o,value:r}}),c.NextResponse.json({success:!0})}catch(e){return console.error("Failed to create table:",e),c.NextResponse.json({error:"Database schema not ready. Please run database setup first.",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}return c.NextResponse.json({error:"Failed to update projection",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let u=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/projections/route",pathname:"/api/projections",filename:"route",bundlePath:"app/api/projections/route"},resolvedPagePath:"C:\\Users\\Jonathan\\Desktop\\Billing\\app\\api\\projections\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:j,staticGenerationAsyncStorage:m,serverHooks:g}=u,h="/api/projections/route";function A(){return(0,a.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}},9487:(e,t,o)=>{o.d(t,{Z:()=>s});var r=o(53524);let s=globalThis.prisma??new r.PrismaClient({log:["error"]})}};var t=require("../../../webpack-runtime.js");t.C(e);var o=e=>t(t.s=e),r=t.X(0,[9276,5972],()=>o(50801));module.exports=r})();