"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/homepage-dashboard/route";
exports.ids = ["app/api/homepage-dashboard/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhomepage-dashboard%2Froute&page=%2Fapi%2Fhomepage-dashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhomepage-dashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhomepage-dashboard%2Froute&page=%2Fapi%2Fhomepage-dashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhomepage-dashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Jonathan_Desktop_Billing_app_api_homepage_dashboard_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/homepage-dashboard/route.ts */ \"(rsc)/./app/api/homepage-dashboard/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/homepage-dashboard/route\",\n        pathname: \"/api/homepage-dashboard\",\n        filename: \"route\",\n        bundlePath: \"app/api/homepage-dashboard/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\Billing\\\\app\\\\api\\\\homepage-dashboard\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Jonathan_Desktop_Billing_app_api_homepage_dashboard_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/homepage-dashboard/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZob21lcGFnZS1kYXNoYm9hcmQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmhvbWVwYWdlLWRhc2hib2FyZCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmhvbWVwYWdlLWRhc2hib2FyZCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNKb25hdGhhbiU1Q0Rlc2t0b3AlNUNCaWxsaW5nJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM2QjtBQUMxRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8/MzBlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxKb25hdGhhblxcXFxEZXNrdG9wXFxcXEJpbGxpbmdcXFxcYXBwXFxcXGFwaVxcXFxob21lcGFnZS1kYXNoYm9hcmRcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2hvbWVwYWdlLWRhc2hib2FyZC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2hvbWVwYWdlLWRhc2hib2FyZFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvaG9tZXBhZ2UtZGFzaGJvYXJkL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcSm9uYXRoYW5cXFxcRGVza3RvcFxcXFxCaWxsaW5nXFxcXGFwcFxcXFxhcGlcXFxcaG9tZXBhZ2UtZGFzaGJvYXJkXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9ob21lcGFnZS1kYXNoYm9hcmQvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhomepage-dashboard%2Froute&page=%2Fapi%2Fhomepage-dashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhomepage-dashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/homepage-dashboard/route.ts":
/*!*********************************************!*\
  !*** ./app/api/homepage-dashboard/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_zoho__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/zoho */ \"(rsc)/./lib/zoho.ts\");\n/* harmony import */ var _lib_clockify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/clockify */ \"(rsc)/./lib/clockify.ts\");\n\n\n\n// Force dynamic rendering to prevent static generation errors\nconst dynamic = \"force-dynamic\";\nasync function GET(request) {\n    try {\n        console.log(\"\\uD83D\\uDE80 Homepage Dashboard API called - starting data collection...\");\n        const now = new Date();\n        const currentYear = now.getFullYear();\n        const currentYearStart = new Date(currentYear, 0, 1);\n        const lastYearStart = new Date(currentYear - 1, 0, 1);\n        // Use extended date range for Clockify to include 2024 data for better metrics\n        const extendedStartDate = new Date(2024, 0, 1); // Start from January 1, 2024\n        console.log(\"\\uD83D\\uDCC5 Date ranges calculated:\", {\n            currentYear,\n            currentYearStart: currentYearStart.toISOString(),\n            lastYearStart: lastYearStart.toISOString(),\n            extendedStartDate: extendedStartDate.toISOString()\n        });\n        // Initialize data containers\n        let projects = [];\n        let invoices = [];\n        let clockifyData = null;\n        let financialMetrics = null;\n        let zohoAuthFailed = false;\n        let zohoApiCallCount = 0;\n        // Fetch Zoho data\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting Zoho data fetch...\");\n            // Track API calls\n            zohoApiCallCount++;\n            projects = await _lib_zoho__WEBPACK_IMPORTED_MODULE_1__.zohoService.getProjects();\n            zohoApiCallCount++;\n            invoices = await _lib_zoho__WEBPACK_IMPORTED_MODULE_1__.zohoService.getInvoices();\n            console.log(\"✅ Zoho data fetched:\", {\n                projectsCount: projects.length,\n                invoicesCount: invoices.length\n            });\n            // Log raw invoice data counts and details\n            if (invoices.length > 0) {\n                console.log(\"\\uD83D\\uDCCA Raw invoice data analysis:\");\n                console.log(`  - Total invoices: ${invoices.length}`);\n                // Count by status\n                const statusCounts = invoices.reduce((acc, inv)=>{\n                    acc[inv.status] = (acc[inv.status] || 0) + 1;\n                    return acc;\n                }, {});\n                console.log(\"  - Status breakdown:\", statusCounts);\n                // Count by project\n                const projectCounts = invoices.reduce((acc, inv)=>{\n                    acc[inv.project_id] = (acc[inv.project_id] || 0) + 1;\n                    return acc;\n                }, {});\n                console.log(`  - Projects with invoices: ${Object.keys(projectCounts).length}`);\n                // Amount analysis\n                const totalAmount = invoices.reduce((sum, inv)=>sum + (inv.amount || 0), 0);\n                const avgAmount = totalAmount / invoices.length;\n                console.log(`  - Total amount: $${totalAmount.toFixed(2)}`);\n                console.log(`  - Average amount: $${avgAmount.toFixed(2)}`);\n                // Sample invoice data\n                const sampleInvoice = invoices[0];\n                console.log(\"  - Sample invoice:\", {\n                    id: sampleInvoice.invoice_id,\n                    number: sampleInvoice.invoice_number,\n                    project: sampleInvoice.project_id,\n                    amount: sampleInvoice.amount,\n                    status: sampleInvoice.status,\n                    date: sampleInvoice.date\n                });\n            } else {\n                console.log(\"⚠️ No invoices found in Zoho data\");\n            }\n            // Get financial metrics for current year\n            try {\n                console.log(\"\\uD83D\\uDCB0 Fetching financial metrics...\");\n                zohoApiCallCount++;\n                financialMetrics = await _lib_zoho__WEBPACK_IMPORTED_MODULE_1__.zohoService.getFinancialMetrics(currentYearStart.toISOString().split(\"T\")[0], now.toISOString().split(\"T\")[0]);\n                console.log(\"✅ Financial metrics loaded:\", financialMetrics);\n                // Log the full financialMetrics object after fetch to confirm values\n                console.log(\"\\uD83D\\uDCCA Full financialMetrics object:\", JSON.stringify(financialMetrics, null, 2));\n                // If cashFlow is 0, log warning to verify data in Zoho\n                if (financialMetrics?.cashFlow === 0) {\n                    console.warn(\"⚠️ Cash Flow is 0 - verify data in Zoho for date range\");\n                }\n            } catch (error) {\n                console.warn(\"⚠️ Failed to fetch financial metrics, using defaults:\", error);\n                financialMetrics = {\n                    revenue: 0,\n                    expenses: 0,\n                    netProfit: 0,\n                    grossProfit: 0,\n                    operatingIncome: 0,\n                    cashFlow: 0\n                };\n            }\n        } catch (error) {\n            console.error(\"❌ Failed to fetch Zoho data:\", error);\n            // Check if it's an authentication/rate limit error\n            if (error instanceof Error) {\n                const errorMessage = error.message.toLowerCase();\n                if (errorMessage.includes(\"rate limit\") || errorMessage.includes(\"authentication\") || errorMessage.includes(\"token\")) {\n                    zohoAuthFailed = true;\n                    console.warn(\"⚠️ Zoho authentication failed due to rate limits or token issues. Showing partial data.\");\n                }\n            }\n            projects = [];\n            invoices = [];\n            financialMetrics = {\n                revenue: 0,\n                expenses: 0,\n                netProfit: 0,\n                grossProfit: 0,\n                operatingIncome: 0,\n                cashFlow: 0\n            };\n        }\n        // Log Zoho API call count for monitoring\n        console.log(`📊 Zoho API calls made in this request: ${zohoApiCallCount}`);\n        // Fetch Clockify data\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting Clockify data fetch...\");\n            const clockifyConfig = _lib_clockify__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getConfigurationStatus();\n            if (clockifyConfig.configured) {\n                console.log(\"⏰ Clockify configured, fetching real data...\");\n                const [clockifyUser, clockifyProjects, timeEntries] = await Promise.all([\n                    _lib_clockify__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getUser(),\n                    _lib_clockify__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getProjects(),\n                    _lib_clockify__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getAllTimeEntries(extendedStartDate.toISOString(), now.toISOString())\n                ]);\n                console.log(\"\\uD83D\\uDCCA Clockify raw data received:\", {\n                    user: clockifyUser?.name || \"Unknown\",\n                    projectsCount: clockifyProjects?.length || 0,\n                    timeEntriesCount: timeEntries?.length || 0\n                });\n                // Calculate time tracking metrics\n                const totalHours = timeEntries.reduce((sum, entry)=>{\n                    const duration = entry.timeInterval?.duration || \"PT0H\";\n                    const hours = parseDuration(duration);\n                    return sum + hours;\n                }, 0);\n                const billableHours = timeEntries.filter((entry)=>entry.billable).reduce((sum, entry)=>{\n                    const duration = entry.timeInterval?.duration || \"PT0H\";\n                    const hours = parseDuration(duration);\n                    return sum + hours;\n                }, 0);\n                const efficiency = totalHours > 0 ? billableHours / totalHours : 0.85;\n                // Calculate average hourly rate\n                const billableEntries = timeEntries.filter((entry)=>entry.billable);\n                let averageHourlyRate = 125; // Default\n                if (billableEntries.length > 0) {\n                    const totalRate = billableEntries.reduce((sum, entry)=>{\n                        const rate = entry.hourlyRate?.amount || 150;\n                        return sum + rate;\n                    }, 0);\n                    averageHourlyRate = totalRate / billableEntries.length;\n                }\n                clockifyData = {\n                    totalHours,\n                    billableHours,\n                    nonBillableHours: totalHours - billableHours,\n                    efficiency,\n                    averageHourlyRate,\n                    totalTimeValue: billableHours * averageHourlyRate,\n                    averageHoursPerProject: projects.length > 0 ? totalHours / projects.length : 0\n                };\n                console.log(\"✅ Clockify data calculated:\", clockifyData);\n            } else {\n                console.log(\"\\uD83C\\uDFAD Clockify not configured, using mock data\");\n                clockifyData = {\n                    totalHours: 28400,\n                    billableHours: 25200,\n                    nonBillableHours: 3200,\n                    efficiency: 0.89,\n                    averageHourlyRate: 125,\n                    totalTimeValue: 3150000,\n                    averageHoursPerProject: 70\n                };\n            }\n        } catch (error) {\n            console.warn(\"⚠️ Failed to fetch Clockify data, using defaults:\", error);\n            console.error(\"Clockify error details:\", {\n                message: error instanceof Error ? error.message : \"Unknown error\",\n                stack: error instanceof Error ? error.stack : undefined\n            });\n            clockifyData = {\n                totalHours: 28400,\n                billableHours: 25200,\n                nonBillableHours: 3200,\n                efficiency: 0.89,\n                averageHourlyRate: 125,\n                totalTimeValue: 3150000,\n                averageHoursPerProject: 70\n            };\n        }\n        // Calculate project metrics\n        const activeProjects = projects.filter((p)=>p.status === \"active\") || [];\n        const totalProjects = projects.length || 0;\n        // Calculate billing metrics\n        const paidInvoices = invoices.filter((inv)=>inv.status === \"paid\") || [];\n        const outstandingInvoices = invoices.filter((inv)=>inv.status === \"sent\" || inv.status === \"viewed\") || [];\n        const totalBilled = paidInvoices.reduce((sum, inv)=>sum + (inv.total || 0), 0);\n        const totalUnbilled = outstandingInvoices.reduce((sum, inv)=>sum + (inv.total || 0), 0);\n        // Use financial metrics from Zoho if available\n        const ytdRevenue = financialMetrics?.revenue || totalBilled;\n        const ytdExpenses = financialMetrics?.expenses || 0;\n        // Get top performing projects - ensure we always return an array\n        let topPerformingProjects = [];\n        try {\n            if (Array.isArray(projects) && projects.length > 0) {\n                topPerformingProjects = projects.filter((p)=>p.status === \"active\").sort((a, b)=>{\n                    const aRevenue = invoices.filter((inv)=>inv.project_id === a.project_id).reduce((sum, inv)=>sum + (inv.total || 0), 0);\n                    const bRevenue = invoices.filter((inv)=>inv.project_id === b.project_id).reduce((sum, inv)=>sum + (inv.total || 0), 0);\n                    return bRevenue - aRevenue;\n                }).slice(0, 5).map((p)=>p.project_code || p.project_name || \"Unknown Project\").filter(Boolean); // Remove any undefined/null values\n            }\n        } catch (error) {\n            console.warn(\"⚠️ Error calculating top performing projects, using defaults:\", error);\n            topPerformingProjects = [\n                \"Project A\",\n                \"Project B\",\n                \"Project C\"\n            ]; // Fallback\n        }\n        // Ensure we have valid arrays for all data\n        const safeDashboardData = {\n            totalProjects: totalProjects || 0,\n            totalBilled: totalBilled || 0,\n            totalUnbilled: totalUnbilled || 0,\n            activeProjects: activeProjects.length || 0,\n            totalHours: clockifyData?.totalHours || 0,\n            billableHours: clockifyData?.billableHours || 0,\n            efficiency: clockifyData?.efficiency || 0.85,\n            averageHourlyRate: clockifyData?.averageHourlyRate || 125,\n            totalTimeValue: clockifyData?.totalTimeValue || 0,\n            averageHoursPerProject: clockifyData?.averageHoursPerProject || 0,\n            topPerformingProjects: Array.isArray(topPerformingProjects) ? topPerformingProjects : [],\n            ytdRevenue: ytdRevenue || 0,\n            ytdExpenses: ytdExpenses || 0,\n            ytdProfit: (ytdRevenue || 0) - (ytdExpenses || 0),\n            warnings: zohoAuthFailed ? [\n                \"Zoho authentication failed due to rate limits. Showing partial data.\"\n            ] : [],\n            zohoApiCallCount\n        };\n        console.log(\"✅ Homepage dashboard data generated:\", safeDashboardData);\n        console.log(\"\\uD83D\\uDE80 Returning dashboard data to client...\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(safeDashboardData);\n    } catch (error) {\n        console.error(\"❌ Homepage Dashboard API error:\", error);\n        console.error(\"Error details:\", {\n            message: error instanceof Error ? error.message : \"Unknown error\",\n            stack: error instanceof Error ? error.stack : undefined,\n            timestamp: new Date().toISOString()\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to generate homepage dashboard data\",\n            details: error instanceof Error ? error.message : \"Unknown error\",\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n// Helper function to parse duration strings (e.g., \"PT2H30M\")\nfunction parseDuration(duration) {\n    if (!duration) return 0;\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/;\n    const match = duration.match(regex);\n    if (!match) return 0;\n    const hours = parseInt(match[1] || \"0\");\n    const minutes = parseInt(match[2] || \"0\");\n    const seconds = parseInt(match[3] || \"0\");\n    return hours + minutes / 60 + seconds / 3600;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/homepage-dashboard/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/clockify.ts":
/*!*************************!*\
  !*** ./lib/clockify.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clockifyService: () => (/* binding */ clockifyService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fetchAllClockifyTimeSummaries: () => (/* binding */ fetchAllClockifyTimeSummaries),\n/* harmony export */   fetchClockifyProjects: () => (/* binding */ fetchClockifyProjects),\n/* harmony export */   fetchClockifyTimeEntries: () => (/* binding */ fetchClockifyTimeEntries),\n/* harmony export */   fetchClockifyTimeReport: () => (/* binding */ fetchClockifyTimeReport)\n/* harmony export */ });\nclass ClockifyService {\n    constructor(){\n        this.apiKey = null;\n        this.workspaceId = null;\n        this.baseUrl = \"https://api.clockify.me/api/v1\";\n        this.reportsBaseUrl = \"https://reports.api.clockify.me/v1\" // Correct Reports API base URL\n        ;\n        this._isConfigured = false;\n        this.apiKey = process.env.CLOCKIFY_API_KEY || null;\n        this.workspaceId = process.env.CLOCKIFY_WORKSPACE_ID || null;\n        // Check if we have valid credentials\n        if (this.apiKey && this.apiKey !== \"your_clockify_api_key_here\" && this.workspaceId && this.workspaceId !== \"your_clockify_workspace_id_here\") {\n            this._isConfigured = true;\n            console.info(\"Clockify service initialized with valid credentials\");\n        } else {\n            this._isConfigured = false;\n            console.warn(\"Clockify service initialized without valid credentials - will use mock data\");\n            console.warn(\"Please set CLOCKIFY_API_KEY and CLOCKIFY_WORKSPACE_ID in your environment variables\");\n        }\n    }\n    getHeaders() {\n        if (!this.apiKey) {\n            throw new Error(\"Clockify API key not configured\");\n        }\n        return {\n            \"X-Api-Key\": this.apiKey,\n            \"Content-Type\": \"application/json\"\n        };\n    }\n    async makeRequest(endpoint, params) {\n        if (!this._isConfigured) {\n            throw new Error(\"Clockify service not properly configured\");\n        }\n        try {\n            const url = new URL(`${this.baseUrl}${endpoint}`);\n            if (params) {\n                Object.keys(params).forEach((key)=>{\n                    if (params[key] !== undefined && params[key] !== null) {\n                        url.searchParams.append(key, params[key]);\n                    }\n                });\n            }\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            console.log(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            console.log(`📡 Clockify API Response: ${response.status} ${response.statusText}`);\n            if (response.status === 401) {\n                throw new Error(\"Clockify API authentication failed - check your API key\");\n            }\n            if (response.status === 403) {\n                throw new Error(\"Clockify API access forbidden - check your workspace ID and permissions\");\n            }\n            if (response.status === 404) {\n                const errorDetails = `Endpoint not found: ${endpoint}`;\n                console.error(`❌ 404 Error Details: ${errorDetails}`);\n                console.error(`   Full URL: ${url.toString()}`);\n                console.error(`   Workspace ID: ${this.workspaceId}`);\n                console.error(`   API Key configured: ${!!this.apiKey}`);\n                throw new Error(`Clockify API error: 404 Not Found - ${errorDetails}`);\n            }\n            if (response.status === 429) {\n                throw new Error(\"Clockify API rate limit exceeded - try again later\");\n            }\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: ${endpoint}`);\n            return data;\n        } catch (error) {\n            if (error instanceof Error) {\n                console.error(`❌ Clockify API Error in ${endpoint}:`, error.message);\n                throw error;\n            }\n            throw new Error(`Clockify API request failed: ${error}`);\n        }\n    }\n    // Check if the service is properly configured\n    isConfigured() {\n        return this._isConfigured;\n    }\n    // Get configuration status for debugging\n    getConfigurationStatus() {\n        return {\n            configured: this._isConfigured,\n            hasApiKey: !!(this.apiKey && this.apiKey !== \"your_clockify_api_key_here\"),\n            hasWorkspaceId: !!(this.workspaceId && this.workspaceId !== \"your_clockify_workspace_id_here\")\n        };\n    }\n    // Alias for getConfigurationStatus to match API usage\n    getConfigStatus() {\n        return this.getConfigurationStatus();\n    }\n    // Method to set workspace ID dynamically\n    setWorkspaceId(workspaceId) {\n        this.workspaceId = workspaceId;\n        if (this.apiKey && this.apiKey !== \"your_clockify_api_key_here\") {\n            this._isConfigured = true;\n        }\n    }\n    async getUser() {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock user\");\n                return this.getMockUser();\n            }\n            const url = new URL(`${this.baseUrl}/user`);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /user`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify user:\", error);\n            console.log(\"Returning mock user due to Clockify API failure\");\n            return this.getMockUser();\n        }\n    }\n    async getWorkspaces() {\n        try {\n            return await this.makeRequest(\"/workspaces\");\n        } catch (error) {\n            console.error(\"Failed to get Clockify workspaces:\", error);\n            // Return mock workspace data when Clockify fails\n            return [\n                {\n                    id: \"mock-workspace-id\",\n                    name: \"Mock Workspace\",\n                    hourlyRate: {\n                        amount: 100,\n                        currency: \"USD\"\n                    }\n                }\n            ];\n        }\n    }\n    async getProjects() {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock projects\");\n                return this.getMockProjects();\n            }\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/projects`);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /workspaces/${this.workspaceId}/projects`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify projects:\", error);\n            console.log(\"Returning mock projects due to Clockify API failure\");\n            return this.getMockProjects();\n        }\n    }\n    async getTimeEntries(projectId, startDate, endDate) {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock data\");\n                return this.getMockTimeEntries(projectId, startDate, endDate);\n            }\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/projects/${projectId}/time-entries`);\n            url.searchParams.append(\"start\", startDate);\n            url.searchParams.append(\"end\", endDate);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /workspaces/${this.workspaceId}/projects/${projectId}/time-entries`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify time entries:\", error);\n            console.log(\"Returning mock time entry data due to Clockify API failure\");\n            return this.getMockTimeEntries(projectId, startDate, endDate);\n        }\n    }\n    async getAllTimeEntries(startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            // First try the Reports API for bulk time entry data\n            try {\n                console.info(\"\\uD83D\\uDD04 Attempting to fetch time entries via Clockify Reports API (requires Pro plan)...\");\n                return await this.getTimeEntriesViaReports(startDate, endDate);\n            } catch (reportsError) {\n                console.warn(\"⚠️ Clockify Reports API failed, falling back to user time entries endpoint:\", {\n                    error: reportsError instanceof Error ? reportsError.message : \"Unknown error\",\n                    reason: \"Reports API may require Pro plan or may be temporarily unavailable\",\n                    fallback: \"Using user time entries endpoint instead\"\n                });\n                return await this.getTimeEntriesViaUserEndpoint(startDate, endDate);\n            }\n        } catch (error) {\n            console.error(\"❌ Failed to get all Clockify time entries:\", error);\n            // Return mock time entry data when Clockify fails\n            console.warn(\"\\uD83C\\uDFAD Returning mock time entry data due to Clockify API failure. Check your plan level and API configuration.\");\n            return [\n                {\n                    id: \"mock-time-entry-1\",\n                    description: \"Mock work session (Clockify API unavailable)\",\n                    timeInterval: {\n                        start: startDate,\n                        end: endDate,\n                        duration: \"PT8H0M\"\n                    },\n                    billable: true,\n                    userId: \"mock-user-id\",\n                    userName: \"Mock User\",\n                    projectId: \"mock-project-1\",\n                    projectName: \"Mock Project 1\"\n                }\n            ];\n        }\n    }\n    // Method to get time entries via Reports API (preferred method)\n    async getTimeEntriesViaReports(startDate, endDate) {\n        const url = new URL(`${this.reportsBaseUrl}/workspaces/${this.workspaceId}/reports/detailed`);\n        console.info(`🔍 Clockify Reports API Request: ${url.toString()}`);\n        console.info(`   Method: POST (Reports API)`);\n        console.info(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n        console.info(`   Body: ${JSON.stringify({\n            dateRangeStart: startDate,\n            dateRangeEnd: endDate,\n            detailedFilter: {\n                pageSize: 1000,\n                sortColumn: \"DATE\"\n            }\n        })}`);\n        const response = await fetch(url.toString(), {\n            method: \"POST\",\n            headers: {\n                ...this.getHeaders(),\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                dateRangeStart: startDate,\n                dateRangeEnd: endDate,\n                detailedFilter: {\n                    pageSize: 1000,\n                    sortColumn: \"DATE\"\n                }\n            })\n        });\n        console.info(`📡 Clockify Reports API Response: ${response.status} ${response.statusText}`);\n        if (response.status === 401) {\n            throw new Error(\"Clockify API authentication failed - check your API key\");\n        }\n        if (response.status === 403) {\n            throw new Error(\"Clockify API access forbidden - check your workspace ID and permissions. Note: Detailed reports require Pro plan or higher.\");\n        }\n        if (response.status === 404) {\n            const errorDetails = `Reports endpoint not found: /workspaces/${this.workspaceId}/reports/detailed`;\n            console.error(`❌ 404 Error Details: ${errorDetails}`);\n            console.error(`   Full URL: ${url.toString()}`);\n            console.error(`   Workspace ID: ${this.workspaceId}`);\n            console.error(`   API Key configured: ${!!this.apiKey}`);\n            console.error(`   Note: This endpoint requires Clockify Pro plan or higher for detailed reports`);\n            throw new Error(`Clockify API error: 404 Not Found - ${errorDetails}. This endpoint requires Pro plan or higher.`);\n        }\n        if (response.status === 405) {\n            throw new Error(\"Clockify API method not allowed - this endpoint requires POST method\");\n        }\n        if (response.status === 429) {\n            throw new Error(\"Clockify API rate limit exceeded - try again later\");\n        }\n        if (!response.ok) {\n            const errorText = await response.text().catch(()=>\"Unknown error\");\n            console.error(`Clockify Reports API error response body: ${errorText}`);\n            throw new Error(`Clockify API error: ${response.status} ${response.statusText} - ${errorText}`);\n        }\n        const data = await response.json();\n        console.info(`✅ Clockify Reports API Success: /workspaces/${this.workspaceId}/reports/detailed`);\n        // Transform the reports data to match our expected time entry format\n        if (data.timeentries && Array.isArray(data.timeentries)) {\n            console.info(`📊 Processing ${data.timeentries.length} time entries from Reports API`);\n            return data.timeentries.map((entry, index)=>{\n                try {\n                    // Handle duration conversion - Reports API returns duration in seconds as number\n                    let duration = \"PT0H0M\";\n                    if (entry.duration !== undefined && entry.duration !== null) {\n                        if (typeof entry.duration === \"number\") {\n                            // Convert seconds to ISO 8601 duration format\n                            const hours = Math.floor(entry.duration / 3600);\n                            const minutes = Math.floor(entry.duration % 3600 / 60);\n                            duration = `PT${hours}H${minutes}M`;\n                        } else if (typeof entry.duration === \"string\") {\n                            // If it's already a string, use it directly\n                            duration = entry.duration;\n                        }\n                    }\n                    // Handle undefined IDs - generate a fallback ID if needed\n                    const entryId = entry.id || `reports-entry-${index}-${Date.now()}`;\n                    // Log sample entry for debugging (first few entries)\n                    if (index < 3) {\n                        console.info(`📝 Sample entry ${index}:`, {\n                            id: entryId,\n                            duration: entry.duration,\n                            convertedDuration: duration,\n                            projectId: entry.projectId,\n                            userId: entry.userId\n                        });\n                    }\n                    return {\n                        id: entryId,\n                        description: entry.description || \"No description\",\n                        timeInterval: {\n                            start: entry.timeInterval?.start || entry.start,\n                            end: entry.timeInterval?.end || entry.end,\n                            duration: duration\n                        },\n                        billable: entry.billable || false,\n                        userId: entry.userId || \"unknown-user\",\n                        userName: entry.userName || \"Unknown User\",\n                        projectId: entry.projectId || \"unknown-project\",\n                        projectName: entry.projectName || \"Unknown Project\",\n                        hourlyRate: entry.hourlyRate || 0\n                    };\n                } catch (entryError) {\n                    console.error(`❌ Error processing time entry ${index}:`, entryError);\n                    console.error(`   Raw entry data:`, entry);\n                    // Return a safe fallback entry\n                    return {\n                        id: `error-entry-${index}-${Date.now()}`,\n                        description: \"Error processing entry\",\n                        timeInterval: {\n                            start: startDate,\n                            end: endDate,\n                            duration: \"PT0H0M\"\n                        },\n                        billable: false,\n                        userId: \"error-user\",\n                        userName: \"Error User\",\n                        projectId: \"error-project\",\n                        projectName: \"Error Project\",\n                        hourlyRate: 0\n                    };\n                }\n            }).filter((entry)=>entry !== null); // Remove any null entries\n        }\n        console.warn(\"⚠️ No time entries found in Reports API response\");\n        return [];\n    }\n    // Fallback method to get time entries via user endpoint (GET method)\n    async getTimeEntriesViaUserEndpoint(startDate, endDate) {\n        try {\n            // Get the current user first\n            const user = await this.getUser();\n            if (!user?.id) {\n                throw new Error(\"Could not get current user for time entries\");\n            }\n            // Use GET method with query parameters - this is the correct way to fetch time entries\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/user/${user.id}/time-entries`);\n            url.searchParams.set(\"start\", startDate);\n            url.searchParams.set(\"end\", endDate);\n            console.info(`🔍 Clockify User Time Entries API Request (Fallback): ${url.toString()}`);\n            console.info(`   Method: GET (User Time Entries - Fallback from Reports API)`);\n            console.info(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n            console.info(`   Note: Using fallback method because Reports API failed or requires Pro plan`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            console.info(`📡 Clockify User Time Entries API Response: ${response.status} ${response.statusText}`);\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                console.error(`Clockify User Time Entries API error response body: ${errorText}`);\n                throw new Error(`Clockify User Time Entries API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const data = await response.json();\n            console.info(`✅ Clockify User Time Entries API Success (Fallback): /workspaces/${this.workspaceId}/user/${user.id}/time-entries`);\n            console.info(`   Retrieved ${data?.length || 0} time entries via fallback method`);\n            // Transform the data to match our expected format\n            if (Array.isArray(data)) {\n                return data.map((entry, index)=>{\n                    try {\n                        // Handle duration conversion - User API might also return duration as number\n                        let duration = \"PT0H0M\";\n                        if (entry.duration !== undefined && entry.duration !== null) {\n                            if (typeof entry.duration === \"number\") {\n                                // Convert seconds to ISO 8601 duration format\n                                const hours = Math.floor(entry.duration / 3600);\n                                const minutes = Math.floor(entry.duration % 3600 / 60);\n                                duration = `PT${hours}H${minutes}M`;\n                            } else if (typeof entry.duration === \"string\") {\n                                // If it's already a string, use it directly\n                                duration = entry.duration;\n                            }\n                        }\n                        // Handle undefined IDs - generate a fallback ID if needed\n                        const entryId = entry.id || `user-entry-${index}-${Date.now()}`;\n                        // Log sample entry for debugging (first few entries)\n                        if (index < 3) {\n                            console.info(`📝 Fallback entry ${index}:`, {\n                                id: entryId,\n                                duration: entry.duration,\n                                convertedDuration: duration,\n                                projectId: entry.projectId,\n                                userId: entry.userId\n                            });\n                        }\n                        return {\n                            id: entryId,\n                            description: entry.description || \"No description\",\n                            timeInterval: {\n                                start: entry.timeInterval?.start || entry.start,\n                                end: entry.timeInterval?.end || entry.end,\n                                duration: duration\n                            },\n                            billable: entry.billable || false,\n                            userId: entry.userId || \"unknown-user\",\n                            userName: entry.userName || \"Unknown User\",\n                            projectId: entry.projectId || \"unknown-project\",\n                            projectName: entry.projectName || \"Unknown Project\",\n                            hourlyRate: entry.hourlyRate || 0\n                        };\n                    } catch (entryError) {\n                        console.error(`❌ Error processing fallback time entry ${index}:`, entryError);\n                        console.error(`   Raw entry data:`, entry);\n                        // Return a safe fallback entry\n                        return {\n                            id: `error-fallback-${index}-${Date.now()}`,\n                            description: \"Error processing fallback entry\",\n                            timeInterval: {\n                                start: startDate,\n                                end: endDate,\n                                duration: \"PT0H0M\"\n                            },\n                            billable: false,\n                            userId: \"error-user\",\n                            userName: \"Error User\",\n                            projectId: \"error-project\",\n                            projectName: \"Error Project\",\n                            hourlyRate: 0\n                        };\n                    }\n                }).filter((entry)=>entry !== null); // Remove any null entries\n            }\n            return [];\n        } catch (error) {\n            console.error(\"Failed to get time entries via user endpoint (fallback):\", error);\n            throw error;\n        }\n    }\n    async getUsers() {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            return await this.makeRequest(`/workspaces/${this.workspaceId}/users`);\n        } catch (error) {\n            console.error(\"Failed to get Clockify users:\", error);\n            // Return mock user data when Clockify fails\n            return [\n                {\n                    id: \"mock-user-1\",\n                    name: \"Mock User 1\",\n                    email: \"user1@example.com\",\n                    status: \"ACTIVE\",\n                    hourlyRate: {\n                        amount: 100,\n                        currency: \"USD\"\n                    }\n                },\n                {\n                    id: \"mock-user-2\",\n                    name: \"Mock User 2\",\n                    email: \"user2@example.com\",\n                    status: \"ACTIVE\",\n                    hourlyRate: {\n                        amount: 120,\n                        currency: \"USD\"\n                    }\n                }\n            ];\n        }\n    }\n    async getProjectTimeReport(projectId, startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const timeEntries = await this.getTimeEntries(projectId, startDate, endDate);\n            const project = await this.getProjects().then((projects)=>projects.find((p)=>p.id === projectId));\n            if (!project) {\n                throw new Error(\"Project not found\");\n            }\n            const totalHours = timeEntries.reduce((sum, entry)=>{\n                const duration = entry.timeInterval.duration;\n                const hours = this.parseDuration(duration);\n                return sum + hours;\n            }, 0);\n            const billableHours = timeEntries.filter((entry)=>entry.billable).reduce((sum, entry)=>{\n                const duration = entry.timeInterval.duration;\n                const hours = this.parseDuration(duration);\n                return sum + hours;\n            }, 0);\n            const nonBillableHours = totalHours - billableHours;\n            return {\n                projectId,\n                projectName: project.name,\n                totalHours,\n                billableHours,\n                nonBillableHours,\n                totalAmount: totalHours * (project.hourlyRate?.amount || 0),\n                billableAmount: billableHours * (project.hourlyRate?.amount || 0),\n                nonBillableAmount: nonBillableHours * (project.hourlyRate?.amount || 0),\n                entries: timeEntries,\n                period: {\n                    start: startDate,\n                    end: endDate\n                }\n            };\n        } catch (error) {\n            console.error(\"Failed to get project time report:\", error);\n            return null;\n        }\n    }\n    async getAllProjectsTimeSummary(startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const projects = await this.getProjects();\n            const reports = [];\n            for (const project of projects){\n                const report = await this.getProjectTimeReport(project.id, startDate, endDate);\n                if (report) {\n                    reports.push(report);\n                }\n            }\n            return reports;\n        } catch (error) {\n            console.error(\"Failed to get all projects time summary:\", error);\n            return [];\n        }\n    }\n    // Helper method to parse ISO 8601 duration to hours\n    parseDuration(duration) {\n        const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || \"0\");\n        const minutes = parseInt(match[2] || \"0\");\n        const seconds = parseInt(match[3] || \"0\");\n        return hours + minutes / 60 + seconds / 3600;\n    }\n    // Enhanced method to generate mock time entries\n    getMockTimeEntries(projectId, startDate, endDate) {\n        return [\n            {\n                id: `mock-${projectId}-1`,\n                description: \"Mock project work\",\n                timeInterval: {\n                    start: startDate,\n                    end: endDate,\n                    duration: \"PT8H0M\"\n                },\n                billable: true,\n                userId: \"mock-user-id\",\n                userName: \"Mock User\",\n                projectId: projectId,\n                projectName: \"Mock Project\"\n            }\n        ];\n    }\n    // Enhanced method to generate mock projects\n    getMockProjects() {\n        return [\n            {\n                id: \"mock-project-1\",\n                name: \"Mock Project 1\",\n                workspaceId: \"mock-workspace\",\n                clientId: \"mock-client-1\",\n                clientName: \"Mock Client 1\",\n                isPublic: true,\n                isTemplate: false,\n                color: \"#000000\",\n                billable: true,\n                public: true,\n                archived: false,\n                status: \"ACTIVE\",\n                budget: 50000,\n                hourlyRate: {\n                    amount: 150,\n                    currency: \"USD\"\n                }\n            }\n        ];\n    }\n    // Enhanced method to generate mock user\n    getMockUser() {\n        return {\n            id: \"mock-user-id\",\n            email: \"mock@example.com\",\n            name: \"Mock User\",\n            profilePicture: \"\",\n            status: \"ACTIVE\",\n            activeWorkspace: \"mock-workspace\",\n            defaultWorkspace: \"mock-workspace\"\n        };\n    }\n}\n// Create the service instance\nconst clockifyService = new ClockifyService();\n// Export the service instance as both default and named export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clockifyService);\n\n// Export convenience functions\nconst fetchClockifyProjects = async ()=>{\n    try {\n        return await clockifyService.getProjects();\n    } catch (error) {\n        console.error(\"Error fetching Clockify projects:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeEntries = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getTimeEntries(projectId, startDate || \"\", endDate || \"\");\n    } catch (error) {\n        console.error(\"Error fetching Clockify time entries:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeReport = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getProjectTimeReport(projectId, startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time report:\", error);\n        return null;\n    }\n};\nconst fetchAllClockifyTimeSummaries = async (startDate, endDate)=>{\n    try {\n        return await clockifyService.getAllProjectsTimeSummary(startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time summaries:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/clockify.ts\n");

/***/ }),

/***/ "(rsc)/./lib/zoho.ts":
/*!*********************!*\
  !*** ./lib/zoho.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchInvoices: () => (/* binding */ fetchInvoices),\n/* harmony export */   fetchProjects: () => (/* binding */ fetchProjects),\n/* harmony export */   zohoService: () => (/* binding */ zohoService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n\nclass ZohoService {\n    constructor(){\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.refreshPromise = null;\n        this.TOKEN_REFRESH_BUFFER = 10 * 60 * 1000 // 10 minutes buffer (increased for better caching)\n        ;\n        this.autoRefreshTimer = null;\n        this.AUTO_REFRESH_INTERVAL = 45 * 60 * 1000 // 45 minutes\n        ;\n        this.lastRefreshTime = 0 // Track when auto-refresh was last triggered\n        ;\n        this.ACCOUNTS_BASE = process.env.ZOHO_ACCOUNTS_BASE || \"https://accounts.zoho.com\";\n        this.API_BASE = process.env.ZOHO_API_BASE || \"https://www.zohoapis.com\";\n        this.organizationValidated = false;\n        // Rate limiting properties\n        this.requestCount = 0;\n        this.lastRequestTime = 0;\n        this.MAX_REQUESTS_PER_MINUTE = 80 // Conservative limit (Zoho allows 100, we use 80)\n        ;\n        this.MIN_REQUEST_INTERVAL = 2000 // 2 seconds between requests (reduced for better performance)\n        ;\n        this.retryCount = 0;\n        this.MAX_RETRIES = 5 // Increased from 3 to 5\n        ;\n        this.BASE_DELAY = 5000 // Increased from 2000 to 5000ms base delay for exponential backoff\n        ;\n        this.cachedAccessToken = null // Fallback cached token\n        ;\n        // Start automatic token refresh\n        this._startAutoRefresh();\n        console.log(`Zoho API base: ${this.API_BASE} | Accounts base: ${this.ACCOUNTS_BASE}`);\n    }\n    _startAutoRefresh() {\n        // Clear any existing timer\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n        }\n        // Set up automatic refresh every 45 minutes\n        this.autoRefreshTimer = setInterval(async ()=>{\n            try {\n                console.log(\"Auto-refreshing Zoho token (45-minute interval)...\");\n                this.lastRefreshTime = Date.now(); // Track when refresh was triggered\n                await this.forceRefreshToken();\n                console.log(\"Auto-refresh completed successfully\");\n            } catch (error) {\n                console.error(\"Auto-refresh failed:\", error);\n            }\n        }, this.AUTO_REFRESH_INTERVAL);\n        // Set initial refresh time\n        this.lastRefreshTime = Date.now();\n        console.log(\"Automatic Zoho token refresh started (every 45 minutes)\");\n    }\n    _stopAutoRefresh() {\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n            this.autoRefreshTimer = null;\n            console.log(\"Automatic Zoho token refresh stopped\");\n        }\n    }\n    async getAccessToken() {\n        try {\n            const now = Date.now();\n            const timeUntilExpiry = this.tokenExpiry - now;\n            // Check if we have a valid token with sufficient buffer time\n            if (this.accessToken && timeUntilExpiry > this.TOKEN_REFRESH_BUFFER && process.env.ZOHO_FORCE_REFRESH !== \"true\") {\n                const minutesLeft = Math.round(timeUntilExpiry / 60000);\n                console.log(`🔐 Using cached token (expires in ${minutesLeft} minutes)`);\n                return this.accessToken;\n            }\n            // Log token status for debugging\n            if (this.accessToken && timeUntilExpiry > 0) {\n                const minutesLeft = Math.round(timeUntilExpiry / 60000);\n                console.log(`⚠️ Token expires soon (${minutesLeft} minutes), refreshing proactively`);\n            } else if (this.accessToken) {\n                console.log(\"\\uD83D\\uDD04 Token expired, refreshing...\");\n            } else {\n                console.log(\"\\uD83C\\uDD95 No token available, obtaining new one...\");\n            }\n            console.log(\"Token expired or missing, refreshing...\");\n            // Clear any existing token\n            this.accessToken = null;\n            this.tokenExpiry = 0;\n            if (false) {}\n            // Ensure only one refresh happens at a time across concurrent requests\n            if (!this.refreshPromise) {\n                this.refreshPromise = this._performTokenRefreshWithBackoff();\n            }\n            const token = await this.refreshPromise;\n            // Clear the in-flight promise after completion\n            this.refreshPromise = null;\n            return token;\n        } catch (error) {\n            console.error(\"Error refreshing Zoho access token:\", error);\n            // Log specific error details for debugging\n            if (axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAxiosError(error)) {\n                console.error(\"Axios error details:\", {\n                    status: error.response?.status,\n                    statusText: error.response?.statusText,\n                    data: error.response?.data,\n                    message: error.message,\n                    headers: error.response?.headers // Log headers for rate limit info\n                });\n                // Log rate limit headers if available\n                if (error.response?.headers) {\n                    const rateLimitHeaders = {\n                        \"X-Rate-Limit\": error.response.headers[\"x-rate-limit\"],\n                        \"X-Rate-Limit-Remaining\": error.response.headers[\"x-rate-limit-remaining\"],\n                        \"X-Rate-Limit-Reset\": error.response.headers[\"x-rate-limit-reset\"],\n                        \"Retry-After\": error.response.headers[\"retry-after\"]\n                    };\n                    console.error(\"Rate limit headers:\", rateLimitHeaders);\n                }\n            }\n            // Try to fall back to cached token if available\n            if (this.cachedAccessToken) {\n                console.warn(\"Falling back to cached access token due to refresh failure\");\n                return this.cachedAccessToken;\n            }\n            throw new Error(`Failed to authenticate with Zoho: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    // Perform the token refresh with form-encoded body and improved exponential backoff\n    async _performTokenRefreshWithBackoff() {\n        const maxAttempts = 5; // Increased from 3 to 5\n        for(let attempt = 1; attempt <= maxAttempts; attempt++){\n            try {\n                const formData = new URLSearchParams();\n                formData.append(\"refresh_token\", \"1000.4bf26c4881dfba83aae32546453d662d.a9353e91362a18c457b5cbec86b10ed2\" || 0);\n                formData.append(\"client_id\", \"1000.8RL8WMTDXS0WIP2EJF2XUS6NDSLQEP\" || 0);\n                formData.append(\"client_secret\", \"8a7ee3c04f0a0d860dd215c4449deab9bf15d1d00b\" || 0);\n                formData.append(\"grant_type\", \"refresh_token\");\n                const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.ACCOUNTS_BASE}/oauth/v2/token`, formData, {\n                    headers: {\n                        \"Content-Type\": \"application/x-www-form-urlencoded\"\n                    },\n                    timeout: 15000\n                });\n                if (!response.data.access_token) {\n                    throw new Error(\"No access token received from Zoho\");\n                }\n                // Cache the successful token and expiry information\n                this.accessToken = response.data.access_token;\n                this.tokenExpiry = Date.now() + response.data.expires_in * 1000;\n                this.lastRefreshTime = Date.now();\n                // Cache the successful token as fallback\n                this.cachedAccessToken = response.data.access_token;\n                console.log(`Token refreshed successfully. Expires in ${Math.round(response.data.expires_in / 60)} minutes`);\n                console.log(\"Zoho token refresh response:\", response.data);\n                // Log token caching details\n                console.log(`🔐 Token cached: access_token=${this.accessToken.substring(0, 10)}..., expires_in=${response.data.expires_in}s, expiry=${new Date(this.tokenExpiry).toISOString()}`);\n                // Validate scopes on refreshed token\n                try {\n                    const scopeInfo = await this.checkTokenScopes(this.accessToken);\n                    console.log(\"Zoho granted scopes:\", scopeInfo?.scope || \"unknown\");\n                    if (typeof scopeInfo?.scope === \"string\" && !scopeInfo.scope.includes(\"ZohoBooks.reports.READ\")) {\n                        console.warn(\"⚠️ Missing ZohoBooks.reports.READ scope. Regenerate token.\");\n                    }\n                } catch (scopeErr) {\n                    console.error(\"Zoho token scope verification failed:\", scopeErr?.message);\n                }\n                return this.accessToken;\n            } catch (err) {\n                // If rate-limited by Zoho during token refresh, implement exponential backoff\n                const isAxios = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAxiosError(err);\n                const status = isAxios ? err.response?.status : undefined;\n                const description = isAxios ? err.response?.data?.error_description : undefined;\n                if (status === 400 && typeof description === \"string\" && description.toLowerCase().includes(\"too many requests\")) {\n                    // Exponential backoff: delay = base * 2^attempt\n                    const delayMs = this.BASE_DELAY * Math.pow(2, attempt - 1) + Math.floor(Math.random() * 1000);\n                    console.warn(`Zoho token refresh rate-limited (attempt ${attempt}/${maxAttempts}). Waiting ${delayMs}ms before retry.`);\n                    await new Promise((resolve)=>setTimeout(resolve, delayMs));\n                    continue;\n                }\n                // For other errors, do not retry endlessly\n                if (attempt === maxAttempts) {\n                    console.error(`Zoho token refresh failed after ${maxAttempts} attempts:`, err);\n                    throw new Error(\"Zoho token refresh rate-limited. Check daily API limits or token validity.\");\n                }\n                throw err;\n            }\n        }\n        throw new Error(\"Zoho token refresh failed after maximum retries\");\n    }\n    async refreshAccessToken() {\n        try {\n            console.log(\"Refreshing Zoho access token...\");\n            // Create form data for the request\n            const formData = new URLSearchParams();\n            formData.append(\"refresh_token\", \"1000.4bf26c4881dfba83aae32546453d662d.a9353e91362a18c457b5cbec86b10ed2\" || 0);\n            formData.append(\"client_id\", \"1000.8RL8WMTDXS0WIP2EJF2XUS6NDSLQEP\" || 0);\n            formData.append(\"client_secret\", \"8a7ee3c04f0a0d860dd215c4449deab9bf15d1d00b\" || 0);\n            formData.append(\"grant_type\", \"refresh_token\");\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.ACCOUNTS_BASE}/oauth/v2/token`, formData, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            });\n            // Cache the successful token and expiry information\n            this.accessToken = response.data.access_token;\n            this.tokenExpiry = Date.now() + response.data.expires_in * 1000;\n            // Cache the successful token as fallback\n            this.cachedAccessToken = response.data.access_token;\n            console.log(`Token refreshed successfully. Expires in ${Math.round(response.data.expires_in / 60)} minutes`);\n            console.log(`🔐 Token cached: access_token=${this.accessToken.substring(0, 10)}..., expires_in=${response.data.expires_in}s, expiry=${new Date(this.tokenExpiry).toISOString()}`);\n            return this.accessToken;\n        } catch (error) {\n            console.error(\"Error refreshing Zoho access token:\", error);\n            throw new Error(\"Failed to authenticate with Zoho\");\n        }\n    }\n    async makeRequest(endpoint) {\n        try {\n            // Apply rate limiting\n            await this.applyRateLimit();\n            const token = await this.getAccessToken();\n            // Log API call count for monitoring\n            this.requestCount++;\n            console.log(`📊 Zoho API call #${this.requestCount} to: ${endpoint}`);\n            // Validate token before making request\n            if (!token || token === \"undefined\") {\n                throw new Error(\"Invalid or missing access token\");\n            }\n            // Validate organization before hitting reports endpoints\n            if (!this.organizationValidated && endpoint.startsWith(\"reports/\")) {\n                await this.validateOrganization(token);\n            }\n            console.info(`Making Zoho API request to: ${endpoint}`);\n            console.info(`Token (first 10 chars): ${token?.substring(0, 10) ?? \"N/A\"}...`);\n            // Create AbortController for timeout\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 15000); // 15 second timeout\n            try {\n                const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.API_BASE}/books/v3/${endpoint}`, {\n                    headers: {\n                        \"Authorization\": `Bearer ${token}`,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    params: {\n                        organization_id: \"652094923\"\n                    },\n                    timeout: 15000,\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                // Reset retry count on success\n                this.retryCount = 0;\n                this.requestCount++;\n                this.lastRequestTime = Date.now();\n                console.info(`Zoho API request successful: ${endpoint}`);\n                return response.data;\n            } catch (axiosError) {\n                clearTimeout(timeoutId);\n                // Handle timeout specifically\n                if (axiosError.code === \"ECONNABORTED\" || axiosError.message?.includes(\"timeout\")) {\n                    throw new Error(`Zoho API request timed out for ${endpoint}`);\n                }\n                throw axiosError;\n            }\n        } catch (error) {\n            // Handle rate limiting (400 with specific error message)\n            if (error.response?.status === 400 && error.response?.data?.error_description?.includes(\"too many requests\")) {\n                console.warn(\"Zoho rate limit hit, implementing exponential backoff...\");\n                await this.handleRateLimit();\n                // Retry the request after backoff\n                if (this.retryCount < this.MAX_RETRIES) {\n                    this.retryCount++;\n                    console.info(`Retrying request after rate limit backoff (attempt ${this.retryCount})`);\n                    return this.makeRequest(endpoint);\n                } else {\n                    throw new Error(\"Zoho API rate limit exceeded after maximum retries. Please try again later.\");\n                }\n            }\n            // Handle 429 Too Many Requests (explicit rate limit)\n            if (error.response?.status === 429) {\n                console.warn(\"Zoho 429 rate limit hit, implementing exponential backoff...\");\n                await this.handleRateLimit();\n                // Retry the request after backoff\n                if (this.retryCount < this.MAX_RETRIES) {\n                    this.retryCount++;\n                    console.info(`Retrying request after 429 backoff (attempt ${this.retryCount})`);\n                    return this.makeRequest(endpoint);\n                } else {\n                    throw new Error(\"Zoho API rate limit exceeded after maximum retries. Please try again later.\");\n                }\n            }\n            // If we get a 401, try refreshing the token once\n            if (error.response?.status === 401) {\n                if (error.response?.data?.code === 57) {\n                    console.error(\"Zoho API authorization error (code 57). Likely missing required scopes such as ZohoBooks.reports.READ.\");\n                }\n                console.info(\"Token expired, refreshing...\");\n                // Clear the current token and force a refresh\n                this.accessToken = null;\n                this.tokenExpiry = 0;\n                try {\n                    const newToken = await this.forceRefreshToken();\n                    // Validate the new token\n                    if (!newToken || newToken === \"undefined\") {\n                        throw new Error(\"Failed to obtain valid token after refresh\");\n                    }\n                    console.info(`Retrying request with new token: ${endpoint}`);\n                    // Retry the request with the new token\n                    const retryResponse = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.API_BASE}/books/v3/${endpoint}`, {\n                        headers: {\n                            \"Authorization\": `Bearer ${newToken}`,\n                            \"Content-Type\": \"application/json\"\n                        },\n                        params: {\n                            organization_id: \"652094923\"\n                        },\n                        timeout: 15000\n                    });\n                    console.info(\"Request retry successful after token refresh\");\n                    return retryResponse.data;\n                } catch (refreshError) {\n                    console.error(\"Failed to refresh token or retry request:\", refreshError);\n                    // Log detailed refresh error information\n                    if (axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAxiosError(refreshError)) {\n                        console.error(\"Token refresh Axios error details:\", {\n                            status: refreshError.response?.status,\n                            statusText: refreshError.response?.statusText,\n                            data: refreshError.response?.data,\n                            message: refreshError.message,\n                            endpoint: endpoint\n                        });\n                    }\n                    // Check if it's a rate limiting issue during token refresh\n                    if (refreshError.response?.status === 400 && refreshError.response?.data?.error_description?.includes(\"too many requests\")) {\n                        throw new Error(`Zoho token refresh rate limited: ${endpoint}. Please wait before retrying.`);\n                    }\n                    // Check if it's an authentication issue during token refresh\n                    if (refreshError.response?.status === 400 && refreshError.response?.data?.error_description?.includes(\"invalid\")) {\n                        throw new Error(`Zoho token refresh failed - invalid credentials: ${endpoint}. Check your OAuth configuration.`);\n                    }\n                    throw new Error(`Zoho API authentication failed after token refresh: ${endpoint}. Error: ${refreshError.message}`);\n                }\n            }\n            // Log the error details for debugging\n            console.error(`Zoho API request failed for ${endpoint}:`, {\n                status: error.response?.status,\n                statusText: error.response?.statusText,\n                data: error.response?.data,\n                message: error.message\n            });\n            if (error.response?.data?.code === 57) {\n                console.error(\"Zoho API authorization error (code 57). Verify organization_id and OAuth scopes (ZohoBooks.reports.READ).\");\n            }\n            throw error;\n        }\n    }\n    // Check granted scopes for current access token\n    async checkTokenScopes(token) {\n        try {\n            const url = `${this.ACCOUNTS_BASE}/oauth/v2/tokeninfo?token=${encodeURIComponent(token)}`;\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url, {\n                timeout: 10000\n            });\n            return res.data;\n        } catch (err) {\n            // Surface concise context but do not fail the main flow\n            const msg = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAxiosError(err) ? err.response?.data || err.message : String(err);\n            throw new Error(typeof msg === \"string\" ? msg : JSON.stringify(msg));\n        }\n    }\n    // Validate the configured organization ID by calling organizations endpoint\n    async validateOrganization(token) {\n        try {\n            const orgId = \"652094923\";\n            if (!orgId) {\n                console.warn(\"ZOHO_ORGANIZATION_ID not set. Reports calls may fail.\");\n                return;\n            }\n            const url = `${this.API_BASE}/books/v3/organizations`;\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url, {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                timeout: 15000\n            });\n            const orgs = res.data?.organizations || [];\n            const found = orgs.some((o)=>String(o.organization_id) === String(orgId));\n            if (!found) {\n                console.error(`Provided organization_id=${orgId} not found in Zoho account. Fetched organizations: ${JSON.stringify(orgs)}`);\n            } else {\n                this.organizationValidated = true;\n                console.log(`Validated Zoho organization_id=${orgId}`);\n            }\n        } catch (err) {\n            const status = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAxiosError(err) ? err.response?.status : undefined;\n            const data = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAxiosError(err) ? err.response?.data : undefined;\n            console.error(\"Failed to validate Zoho organization:\", {\n                status,\n                data,\n                message: err.message\n            });\n        // Do not throw; allow request to proceed but logs will help diagnose\n        }\n    }\n    async applyRateLimit() {\n        const now = Date.now();\n        // Check if we need to wait between requests\n        if (this.lastRequestTime > 0) {\n            const timeSinceLastRequest = now - this.lastRequestTime;\n            if (timeSinceLastRequest < this.MIN_REQUEST_INTERVAL) {\n                const waitTime = this.MIN_REQUEST_INTERVAL - timeSinceLastRequest;\n                console.info(`Rate limiting: waiting ${waitTime}ms before next request`);\n                await new Promise((resolve)=>setTimeout(resolve, waitTime));\n            }\n        }\n        // Check if we've exceeded the per-minute limit\n        if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n            const timeSinceFirstRequest = now - this.lastRequestTime;\n            if (timeSinceFirstRequest < 60000) {\n                const waitTime = 60000 - timeSinceFirstRequest;\n                console.warn(`Rate limiting: exceeded ${this.MAX_REQUESTS_PER_MINUTE} requests per minute, waiting ${waitTime}ms`);\n                await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                this.requestCount = 0;\n            } else {\n                // Reset counter if more than 1 minute has passed\n                this.requestCount = 0;\n            }\n        }\n    }\n    async handleRateLimit() {\n        const delay = this.BASE_DELAY * Math.pow(2, this.retryCount);\n        const jitter = Math.random() * 1000; // Add up to 1 second of jitter\n        const totalDelay = delay + jitter;\n        console.warn(`Rate limit backoff: waiting ${totalDelay}ms before retry (attempt ${this.retryCount + 1})`);\n        await new Promise((resolve)=>setTimeout(resolve, totalDelay));\n        // Reset request counters to allow fresh start\n        this.requestCount = 0;\n        this.lastRequestTime = 0;\n    }\n    async getProjects() {\n        try {\n            let allProjects = [];\n            let page = 1;\n            const perPage = 200;\n            while(true){\n                const data = await this.makeRequest(`projects?page=${page}&per_page=${perPage}`);\n                const projects = data.projects?.map((project)=>{\n                    // Log the first project to see available fields\n                    if (page === 1 && allProjects.length === 0) {\n                        console.log(\"Sample Zoho project data:\", JSON.stringify(project, null, 2));\n                    }\n                    return {\n                        project_id: project.project_id,\n                        project_name: project.project_name || project.name || \"\",\n                        description: project.description || \"\",\n                        status: project.status || \"active\",\n                        start_date: project.start_date || \"\",\n                        end_date: project.end_date || \"\",\n                        budget_amount: project.budget_amount || 0,\n                        rate_per_hour: project.rate_per_hour || 0,\n                        customer_id: project.customer_id || \"\",\n                        customer_name: project.customer_name || \"\",\n                        signed_fee: undefined\n                    };\n                }) || [];\n                allProjects = allProjects.concat(projects);\n                // Check if we've reached the end\n                if (projects.length < perPage) {\n                    break;\n                }\n                page++;\n            }\n            console.log(`Fetched ${allProjects.length} projects from Zoho`);\n            return allProjects;\n        } catch (error) {\n            console.error(\"Error fetching projects:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithRevenueBudget() {\n        try {\n            console.log(\"Fetching projects with revenue budget data...\");\n            const projects = await this.getProjects();\n            // Log projects that have revenue_budget data\n            const projectsWithRevenueBudget = projects.filter((project)=>{\n                const hasRevenueBudget = project.signed_fee && project.signed_fee > 0;\n                if (hasRevenueBudget) {\n                    console.log(`Project ${project.project_name} has revenue budget: $${project.signed_fee}`);\n                }\n                return hasRevenueBudget;\n            });\n            console.log(`Found ${projectsWithRevenueBudget.length} projects with revenue budget data`);\n            return projects;\n        } catch (error) {\n            console.error(\"Error fetching projects with revenue budget:\", error);\n            return [];\n        }\n    }\n    async debugProjectFields() {\n        try {\n            console.log(\"Debugging Zoho project fields...\");\n            const data = await this.makeRequest(\"projects?page=1&per_page=5\");\n            if (data.projects && data.projects.length > 0) {\n                console.log(\"Available fields in Zoho project response:\");\n                const sampleProject = data.projects[0];\n                Object.keys(sampleProject).forEach((key)=>{\n                    console.log(`  ${key}: ${sampleProject[key]} (${typeof sampleProject[key]})`);\n                });\n                // Check specifically for revenue_budget\n                if (sampleProject.revenue_budget !== undefined) {\n                    console.log(`✅ Found revenue_budget field: ${sampleProject.revenue_budget}`);\n                } else {\n                    console.log(\"❌ revenue_budget field not found in Zoho response\");\n                    console.log(\"Available budget-related fields:\");\n                    Object.keys(sampleProject).forEach((key)=>{\n                        if (key.toLowerCase().includes(\"budget\") || key.toLowerCase().includes(\"revenue\")) {\n                            console.log(`  ${key}: ${sampleProject[key]}`);\n                        }\n                    });\n                }\n            } else {\n                console.log(\"No projects found in Zoho response\");\n            }\n        } catch (error) {\n            console.error(\"Error debugging project fields:\", error);\n        }\n    }\n    async getProjectsWithEstimates() {\n        try {\n            const projects = await this.getProjects();\n            // For the first few projects, try to get estimates to see if that contains the signed fee\n            const projectsWithEstimates = await Promise.all(projects.slice(0, 5).map(async (project)=>{\n                try {\n                    const estimates = await this.getProjectEstimates(project.project_id);\n                    const totalEstimateAmount = estimates.reduce((sum, estimate)=>sum + (estimate.total || 0), 0);\n                    console.log(`Project ${project.project_name} estimates:`, estimates.length, \"total amount:\", totalEstimateAmount);\n                    return {\n                        ...project,\n                        signed_fee: project.signed_fee || totalEstimateAmount || 0\n                    };\n                } catch (error) {\n                    console.error(`Error fetching estimates for project ${project.project_id}:`, error);\n                    return project;\n                }\n            }));\n            // Return all projects, with the first 5 having updated signed fees from estimates\n            return [\n                ...projectsWithEstimates,\n                ...projects.slice(5)\n            ];\n        } catch (error) {\n            console.error(\"Error fetching projects with estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithInvoiceTotals() {\n        try {\n            const [projects, invoices] = await Promise.all([\n                this.getProjects(),\n                this.getInvoices()\n            ]);\n            // Calculate signed fee as total of all invoices for each project\n            const projectsWithInvoiceTotals = projects.map((project)=>{\n                const projectInvoices = invoices.filter((invoice)=>invoice.project_id === project.project_id);\n                const totalInvoiceAmount = projectInvoices.reduce((sum, invoice)=>sum + invoice.amount, 0);\n                console.log(`Project ${project.project_name} invoices:`, projectInvoices.length, \"total amount:\", totalInvoiceAmount);\n                return {\n                    ...project,\n                    signed_fee: project.signed_fee || totalInvoiceAmount || 0\n                };\n            });\n            return projectsWithInvoiceTotals;\n        } catch (error) {\n            console.error(\"Error fetching projects with invoice totals:\", error);\n            return [];\n        }\n    }\n    async getInvoices() {\n        try {\n            console.log(\"\\uD83D\\uDCC4 Fetching invoices from Zoho...\");\n            const data = await this.makeRequest(\"invoices\");\n            const invoices = data.invoices?.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                })) || [];\n            // Log invoice counts and details\n            console.log(`📊 Zoho invoices fetched: ${invoices.length} total invoices`);\n            if (invoices.length > 0) {\n                const statusCounts = invoices.reduce((acc, inv)=>{\n                    acc[inv.status] = (acc[inv.status] || 0) + 1;\n                    return acc;\n                }, {});\n                console.log(\"\\uD83D\\uDCCB Invoice status breakdown:\", statusCounts);\n                // Log sample invoice data for debugging\n                const sampleInvoice = invoices[0];\n                console.log(\"\\uD83D\\uDCC4 Sample invoice data:\", {\n                    id: sampleInvoice.invoice_id,\n                    number: sampleInvoice.invoice_number,\n                    project: sampleInvoice.project_id,\n                    amount: sampleInvoice.amount,\n                    status: sampleInvoice.status\n                });\n            }\n            return invoices;\n        } catch (error) {\n            console.error(\"Error fetching invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectInvoices(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/invoices`);\n            return data.invoices?.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                })) || [];\n        } catch (error) {\n            console.error(\"Error fetching project invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectDetails(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}`);\n            console.log(`Project ${projectId} details:`, JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching project details:\", error);\n            return null;\n        }\n    }\n    async getProjectEstimates(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/estimates`);\n            console.log(`Project ${projectId} estimates:`, JSON.stringify(data, null, 2));\n            return data.estimates || [];\n        } catch (error) {\n            console.error(\"Error fetching project estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectContracts(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/contracts`);\n            console.log(`Project ${projectId} contracts:`, JSON.stringify(data, null, 2));\n            return data.contracts || [];\n        } catch (error) {\n            console.error(\"Error fetching project contracts:\", error);\n            return [];\n        }\n    }\n    // New method to get Profit & Loss statement\n    async getProfitAndLoss(startDate, endDate) {\n        try {\n            console.info(`📊 Fetching Zoho Profit & Loss for ${startDate} to ${endDate}`);\n            const data = await this.makeRequest(`reports/profitandloss?from_date=${startDate}&to_date=${endDate}`);\n            const sizeBytes = JSON.stringify(data || {}).length;\n            const keys = Object.keys(data || {}).length;\n            console.info(`✅ Profit & Loss data fetched successfully (keys: ${keys}, bytes: ${sizeBytes})`);\n            if (!data || keys === 0) {\n                console.warn(\"No data for reports/profitandloss. Verify organization ID, date range (2025-01-01 to 2025-08-13), or data in Zoho dashboard.\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"❌ Error fetching Profit & Loss:\", error);\n            console.warn(\"\\uD83C\\uDFAD Profit & Loss data unavailable, will use defaults\");\n            return null;\n        }\n    }\n    // New method to get Cash Flow statement\n    async getCashFlow(startDate, endDate) {\n        try {\n            console.info(`💰 Fetching Zoho Cash Flow for ${startDate} to ${endDate}`);\n            const data = await this.makeRequest(`reports/cashflow?from_date=${startDate}&to_date=${endDate}`);\n            const sizeBytes = JSON.stringify(data || {}).length;\n            const keys = Object.keys(data || {}).length;\n            console.info(`✅ Cash Flow data fetched successfully (keys: ${keys}, bytes: ${sizeBytes})`);\n            if (!data || keys === 0) {\n                console.warn(\"No data for reports/cashflow. Verify organization ID, date range (2025-01-01 to 2025-08-13), or data in Zoho dashboard.\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"❌ Error fetching Cash Flow:\", error);\n            console.warn(\"\\uD83C\\uDFAD Cash Flow data unavailable, will use defaults\");\n            return null;\n        }\n    }\n    // New method to get Balance Sheet\n    async getBalanceSheet(date) {\n        try {\n            console.info(`📈 Fetching Zoho Balance Sheet for ${date}`);\n            const data = await this.makeRequest(`reports/balancesheet?date=${date}`);\n            const sizeBytes = JSON.stringify(data || {}).length;\n            const keys = Object.keys(data || {}).length;\n            console.info(`✅ Balance Sheet data fetched successfully (keys: ${keys}, bytes: ${sizeBytes})`);\n            if (!data || keys === 0) {\n                console.warn(\"No data for reports/balancesheet. Verify organization ID, date range (2025-01-01 to 2025-08-13), or data in Zoho dashboard.\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"❌ Error fetching Balance Sheet:\", error);\n            console.warn(\"\\uD83C\\uDFAD Balance Sheet data unavailable, will use defaults\");\n            return null;\n        }\n    }\n    // New method to get Chart of Accounts\n    async getChartOfAccounts() {\n        try {\n            const data = await this.makeRequest(\"chartofaccounts\");\n            console.log(\"Chart of Accounts data:\", JSON.stringify(data, null, 2));\n            return data.chartofaccounts || [];\n        } catch (error) {\n            console.error(\"Error fetching Chart of Accounts:\", error);\n            return [];\n        }\n    }\n    // New method to get Journal Entries for a date range\n    async getJournalEntries(startDate, endDate) {\n        try {\n            const data = await this.makeRequest(`journalentries?from_date=${startDate}&to_date=${endDate}`);\n            console.log(\"Journal Entries data:\", JSON.stringify(data, null, 2));\n            return data.journalentries || [];\n        } catch (error) {\n            console.error(\"Error fetching Journal Entries:\", error);\n            return [];\n        }\n    }\n    // New method to get comprehensive financial metrics\n    async getFinancialMetrics(startDate, endDate) {\n        try {\n            console.info(`💰 Fetching Zoho financial metrics for ${startDate} to ${endDate}`);\n            const [plData, cfData, bsData] = await Promise.allSettled([\n                this.getProfitAndLoss(startDate, endDate),\n                this.getCashFlow(startDate, endDate),\n                this.getBalanceSheet(endDate)\n            ]);\n            // Log raw response status and body length for each report\n            console.info(\"\\uD83D\\uDCCA Financial reports raw response details:\", {\n                profitLoss: {\n                    status: plData.status,\n                    bodyLength: plData.status === \"fulfilled\" ? JSON.stringify(plData.value || {}).length : \"N/A\",\n                    hasData: plData.status === \"fulfilled\" && plData.value && Object.keys(plData.value || {}).length > 0\n                },\n                cashFlow: {\n                    status: cfData.status,\n                    bodyLength: cfData.status === \"fulfilled\" ? JSON.stringify(cfData.value || {}).length : \"N/A\",\n                    hasData: cfData.status === \"fulfilled\" && cfData.value && Object.keys(cfData.value || {}).length > 0\n                },\n                balanceSheet: {\n                    status: bsData.status,\n                    bodyLength: bsData.status === \"fulfilled\" ? JSON.stringify(bsData.value || {}).length : \"N/A\",\n                    hasData: bsData.status === \"fulfilled\" && bsData.value && Object.keys(bsData.value || {}).length > 0\n                }\n            });\n            // Check for 404 errors and log specific warnings\n            if (plData.status === \"rejected\") {\n                const error = plData.reason;\n                if (error?.response?.status === 404) {\n                    console.warn(\"⚠️ Profit & Loss returned 404 - Invalid endpoint - check Zoho API docs\");\n                } else {\n                    console.warn(\"⚠️ Profit & Loss data failed:\", plData.reason);\n                }\n            }\n            if (cfData.status === \"rejected\") {\n                const error = cfData.reason;\n                if (error?.response?.status === 404) {\n                    console.warn(\"⚠️ Cash Flow returned 404 - Invalid endpoint - check Zoho API docs\");\n                } else {\n                    console.warn(\"⚠️ Cash Flow data failed:\", cfData.reason);\n                }\n            }\n            if (bsData.status === \"rejected\") {\n                const error = bsData.reason;\n                if (error?.response?.status === 404) {\n                    console.warn(\"⚠️ Balance Sheet returned 404 - Invalid endpoint - check Zoho API docs\");\n                } else {\n                    console.warn(\"⚠️ Balance Sheet data failed:\", bsData.reason);\n                }\n            }\n            // Extract financial metrics from the responses with fallbacks\n            const revenue = plData.status === \"fulfilled\" ? plData.value?.revenue?.total || 0 : 0;\n            const expenses = plData.status === \"fulfilled\" ? plData.value?.expenses?.total || 0 : 0;\n            const grossProfit = revenue - expenses;\n            // Calculate net profit (may need adjustment based on actual Zoho response structure)\n            const operatingExpenses = plData.status === \"fulfilled\" ? plData.value?.operating_expenses?.total || 0 : 0;\n            const netProfit = grossProfit - operatingExpenses;\n            const operatingIncome = grossProfit - operatingExpenses;\n            // Extract cash flow data\n            const cashFlow = cfData.status === \"fulfilled\" ? cfData.value?.net_cash_flow || 0 : 0;\n            const accountsReceivable = bsData.status === \"fulfilled\" ? bsData.value?.current_assets?.accounts_receivable || 0 : 0;\n            const accountsPayable = bsData.status === \"fulfilled\" ? bsData.value?.current_liabilities?.accounts_payable || 0 : 0;\n            const cashBalance = bsData.status === \"fulfilled\" ? bsData.value?.current_assets?.cash_and_bank || 0 : 0;\n            // Log which data sources succeeded/failed\n            console.info(\"\\uD83D\\uDCCA Financial metrics data sources:\", {\n                profitLoss: plData.status === \"fulfilled\" ? \"✅\" : \"❌\",\n                cashFlow: cfData.status === \"fulfilled\" ? \"✅\" : \"❌\",\n                balanceSheet: bsData.status === \"fulfilled\" ? \"✅\" : \"❌\"\n            });\n            return {\n                revenue,\n                expenses,\n                grossProfit,\n                netProfit,\n                operatingIncome,\n                cashFlow,\n                accountsReceivable,\n                accountsPayable,\n                cashBalance\n            };\n        } catch (error) {\n            console.error(\"❌ Error fetching financial metrics:\", error);\n            console.warn(\"\\uD83C\\uDFAD Returning default financial metrics due to API failure\");\n            // Return default values if API calls fail\n            return {\n                revenue: 0,\n                expenses: 0,\n                grossProfit: 0,\n                netProfit: 0,\n                operatingIncome: 0,\n                cashFlow: 0,\n                accountsReceivable: 0,\n                accountsPayable: 0,\n                cashBalance: 0\n            };\n        }\n    }\n    // Method to manually refresh token (for testing)\n    async forceRefreshToken() {\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.lastRefreshTime = Date.now(); // Track manual refresh time\n        return await this.getAccessToken();\n    }\n    // Get token status for debugging\n    getTokenStatus() {\n        const now = Date.now();\n        return {\n            hasToken: !!this.accessToken,\n            expiresIn: this.tokenExpiry - now,\n            isExpired: now >= this.tokenExpiry\n        };\n    }\n    // Method to get auto-refresh status\n    getAutoRefreshStatus() {\n        const now = Date.now();\n        const timeSinceLastRefresh = now - this.lastRefreshTime;\n        const nextRefreshIn = Math.max(0, this.AUTO_REFRESH_INTERVAL - timeSinceLastRefresh);\n        return {\n            isActive: !!this.autoRefreshTimer,\n            nextRefreshIn\n        };\n    }\n    // Public method to start auto-refresh\n    enableAutoRefresh() {\n        this._startAutoRefresh();\n    }\n    // Public method to stop auto-refresh\n    disableAutoRefresh() {\n        this._stopAutoRefresh();\n    }\n    // Public method to get comprehensive status\n    getStatus() {\n        return {\n            ...this.getTokenStatus(),\n            autoRefresh: this.getAutoRefreshStatus()\n        };\n    }\n}\nconst zohoService = new ZohoService();\n// Export the functions that are being imported in page.tsx\nconst fetchProjects = async ()=>{\n    try {\n        console.log(\"Client: Fetching projects from API\");\n        const response = await fetch(\"/api/projects\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"projects\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching projects:\", error);\n        throw error;\n    }\n};\nconst fetchInvoices = async ()=>{\n    try {\n        console.log(\"Client: Fetching invoices from API\");\n        const response = await fetch(\"/api/invoices\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"invoices\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching invoices:\", error);\n        throw error;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPRyxLQUFLLEVBQUU7WUFDMUQsT0FBT0gsT0FBT25NLElBQUk7UUFDcEIsT0FBTztZQUNMNUIsUUFBUU8sS0FBSyxDQUFDLCtCQUErQndOLE9BQU94TixLQUFLO1lBQ3pELE1BQU0sSUFBSWEsTUFBTTJNLE9BQU94TixLQUFLO1FBQzlCO0lBQ0YsRUFBRSxPQUFPQSxPQUFPO1FBQ2RQLFFBQVFPLEtBQUssQ0FBQyxvQ0FBb0NBO1FBQ2xELE1BQU1BO0lBQ1I7QUFDRixFQUFFO0FBRUssTUFBTTROLGdCQUFnQjtJQUMzQixJQUFJO1FBQ0ZuTyxRQUFRQyxHQUFHLENBQUM7UUFDWixNQUFNeUIsV0FBVyxNQUFNb00sTUFBTTtRQUM3QixNQUFNQyxTQUFTLE1BQU1yTSxTQUFTc00sSUFBSTtRQUVsQyxJQUFJRCxPQUFPRSxPQUFPLEVBQUU7WUFDbEJqTyxRQUFRQyxHQUFHLENBQUMsZ0NBQWdDOE4sT0FBT0csS0FBSyxFQUFFO1lBQzFELE9BQU9ILE9BQU9uTSxJQUFJO1FBQ3BCLE9BQU87WUFDTDVCLFFBQVFPLEtBQUssQ0FBQywrQkFBK0J3TixPQUFPeE4sS0FBSztZQUN6RCxNQUFNLElBQUlhLE1BQU0yTSxPQUFPeE4sS0FBSztRQUM5QjtJQUNGLEVBQUUsT0FBT0EsT0FBTztRQUNkUCxRQUFRTyxLQUFLLENBQUMsb0NBQW9DQTtRQUNsRCxNQUFNQTtJQUNSO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL3pvaG8tYmlsbGluZy1wbGF0Zm9ybS8uL2xpYi96b2hvLnRzP2U3MGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgWm9ob1Byb2plY3Qge1xyXG4gIHByb2plY3RfaWQ6IHN0cmluZztcclxuICBwcm9qZWN0X25hbWU6IHN0cmluZzsgLy8gQ2hhbmdlZCBmcm9tIG5hbWUgdG8gcHJvamVjdF9uYW1lXHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgc3RhdHVzOiBzdHJpbmc7XHJcbiAgc3RhcnRfZGF0ZTogc3RyaW5nO1xyXG4gIGVuZF9kYXRlPzogc3RyaW5nO1xyXG4gIGJ1ZGdldF9hbW91bnQ/OiBudW1iZXI7XHJcbiAgcmF0ZV9wZXJfaG91cj86IG51bWJlcjtcclxuICBjdXN0b21lcl9pZDogc3RyaW5nO1xyXG4gIGN1c3RvbWVyX25hbWU6IHN0cmluZztcclxuICBzaWduZWRfZmVlPzogbnVtYmVyOyAvLyBBZGRlZCBmb3IgU2lnbmVkIEZlZSBmcm9tIFpvaG9cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBab2hvSW52b2ljZSB7XHJcbiAgaW52b2ljZV9pZDogc3RyaW5nO1xyXG4gIHByb2plY3RfaWQ6IHN0cmluZztcclxuICBpbnZvaWNlX251bWJlcjogc3RyaW5nO1xyXG4gIGRhdGU6IHN0cmluZztcclxuICBhbW91bnQ6IG51bWJlcjtcclxuICBzdGF0dXM6IHN0cmluZztcclxuICBiaWxsZWRfYW1vdW50OiBudW1iZXI7XHJcbiAgdW5iaWxsZWRfYW1vdW50OiBudW1iZXI7XHJcbn1cclxuXHJcbmludGVyZmFjZSBUb2tlblJlc3BvbnNlIHtcclxuICBhY2Nlc3NfdG9rZW46IHN0cmluZztcclxuICBleHBpcmVzX2luOiBudW1iZXI7XHJcbiAgYXBpX2RvbWFpbjogc3RyaW5nO1xyXG4gIHRva2VuX3R5cGU6IHN0cmluZztcclxuICByZWZyZXNoX3Rva2VuPzogc3RyaW5nO1xyXG59XHJcblxyXG5jbGFzcyBab2hvU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBhY2Nlc3NUb2tlbjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSB0b2tlbkV4cGlyeTogbnVtYmVyID0gMDtcclxuICBwcml2YXRlIHJlZnJlc2hQcm9taXNlOiBQcm9taXNlPHN0cmluZz4gfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIHJlYWRvbmx5IFRPS0VOX1JFRlJFU0hfQlVGRkVSID0gMTAgKiA2MCAqIDEwMDA7IC8vIDEwIG1pbnV0ZXMgYnVmZmVyIChpbmNyZWFzZWQgZm9yIGJldHRlciBjYWNoaW5nKVxyXG4gIHByaXZhdGUgYXV0b1JlZnJlc2hUaW1lcjogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIHJlYWRvbmx5IEFVVE9fUkVGUkVTSF9JTlRFUlZBTCA9IDQ1ICogNjAgKiAxMDAwOyAvLyA0NSBtaW51dGVzXHJcbiAgcHJpdmF0ZSBsYXN0UmVmcmVzaFRpbWU6IG51bWJlciA9IDA7IC8vIFRyYWNrIHdoZW4gYXV0by1yZWZyZXNoIHdhcyBsYXN0IHRyaWdnZXJlZFxyXG4gIHByaXZhdGUgcmVhZG9ubHkgQUNDT1VOVFNfQkFTRSA9IHByb2Nlc3MuZW52LlpPSE9fQUNDT1VOVFNfQkFTRSB8fCAnaHR0cHM6Ly9hY2NvdW50cy56b2hvLmNvbSc7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBBUElfQkFTRSA9IHByb2Nlc3MuZW52LlpPSE9fQVBJX0JBU0UgfHwgJ2h0dHBzOi8vd3d3LnpvaG9hcGlzLmNvbSc7XHJcbiAgcHJpdmF0ZSBvcmdhbml6YXRpb25WYWxpZGF0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICBcclxuICAvLyBSYXRlIGxpbWl0aW5nIHByb3BlcnRpZXNcclxuICBwcml2YXRlIHJlcXVlc3RDb3VudDogbnVtYmVyID0gMDtcclxuICBwcml2YXRlIGxhc3RSZXF1ZXN0VGltZTogbnVtYmVyID0gMDtcclxuICBwcml2YXRlIHJlYWRvbmx5IE1BWF9SRVFVRVNUU19QRVJfTUlOVVRFID0gODA7IC8vIENvbnNlcnZhdGl2ZSBsaW1pdCAoWm9obyBhbGxvd3MgMTAwLCB3ZSB1c2UgODApXHJcbiAgcHJpdmF0ZSByZWFkb25seSBNSU5fUkVRVUVTVF9JTlRFUlZBTCA9IDIwMDA7IC8vIDIgc2Vjb25kcyBiZXR3ZWVuIHJlcXVlc3RzIChyZWR1Y2VkIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UpXHJcbiAgcHJpdmF0ZSByZXRyeUNvdW50OiBudW1iZXIgPSAwO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgTUFYX1JFVFJJRVMgPSA1OyAvLyBJbmNyZWFzZWQgZnJvbSAzIHRvIDVcclxuICBwcml2YXRlIHJlYWRvbmx5IEJBU0VfREVMQVkgPSA1MDAwOyAvLyBJbmNyZWFzZWQgZnJvbSAyMDAwIHRvIDUwMDBtcyBiYXNlIGRlbGF5IGZvciBleHBvbmVudGlhbCBiYWNrb2ZmXHJcbiAgcHJpdmF0ZSBjYWNoZWRBY2Nlc3NUb2tlbjogc3RyaW5nIHwgbnVsbCA9IG51bGw7IC8vIEZhbGxiYWNrIGNhY2hlZCB0b2tlblxyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIC8vIFN0YXJ0IGF1dG9tYXRpYyB0b2tlbiByZWZyZXNoXHJcbiAgICB0aGlzLl9zdGFydEF1dG9SZWZyZXNoKCk7XHJcbiAgICBjb25zb2xlLmxvZyhgWm9obyBBUEkgYmFzZTogJHt0aGlzLkFQSV9CQVNFfSB8IEFjY291bnRzIGJhc2U6ICR7dGhpcy5BQ0NPVU5UU19CQVNFfWApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfc3RhcnRBdXRvUmVmcmVzaCgpOiB2b2lkIHtcclxuICAgIC8vIENsZWFyIGFueSBleGlzdGluZyB0aW1lclxyXG4gICAgaWYgKHRoaXMuYXV0b1JlZnJlc2hUaW1lcikge1xyXG4gICAgICBjbGVhckludGVydmFsKHRoaXMuYXV0b1JlZnJlc2hUaW1lcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IHVwIGF1dG9tYXRpYyByZWZyZXNoIGV2ZXJ5IDQ1IG1pbnV0ZXNcclxuICAgIHRoaXMuYXV0b1JlZnJlc2hUaW1lciA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnQXV0by1yZWZyZXNoaW5nIFpvaG8gdG9rZW4gKDQ1LW1pbnV0ZSBpbnRlcnZhbCkuLi4nKTtcclxuICAgICAgICB0aGlzLmxhc3RSZWZyZXNoVGltZSA9IERhdGUubm93KCk7IC8vIFRyYWNrIHdoZW4gcmVmcmVzaCB3YXMgdHJpZ2dlcmVkXHJcbiAgICAgICAgYXdhaXQgdGhpcy5mb3JjZVJlZnJlc2hUb2tlbigpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdBdXRvLXJlZnJlc2ggY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F1dG8tcmVmcmVzaCBmYWlsZWQ6JywgZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9LCB0aGlzLkFVVE9fUkVGUkVTSF9JTlRFUlZBTCk7XHJcblxyXG4gICAgLy8gU2V0IGluaXRpYWwgcmVmcmVzaCB0aW1lXHJcbiAgICB0aGlzLmxhc3RSZWZyZXNoVGltZSA9IERhdGUubm93KCk7XHJcbiAgICBjb25zb2xlLmxvZygnQXV0b21hdGljIFpvaG8gdG9rZW4gcmVmcmVzaCBzdGFydGVkIChldmVyeSA0NSBtaW51dGVzKScpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfc3RvcEF1dG9SZWZyZXNoKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuYXV0b1JlZnJlc2hUaW1lcikge1xyXG4gICAgICBjbGVhckludGVydmFsKHRoaXMuYXV0b1JlZnJlc2hUaW1lcik7XHJcbiAgICAgIHRoaXMuYXV0b1JlZnJlc2hUaW1lciA9IG51bGw7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdBdXRvbWF0aWMgWm9obyB0b2tlbiByZWZyZXNoIHN0b3BwZWQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgZ2V0QWNjZXNzVG9rZW4oKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgIGNvbnN0IHRpbWVVbnRpbEV4cGlyeSA9IHRoaXMudG9rZW5FeHBpcnkgLSBub3c7XHJcbiAgICAgIFxyXG4gICAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGEgdmFsaWQgdG9rZW4gd2l0aCBzdWZmaWNpZW50IGJ1ZmZlciB0aW1lXHJcbiAgICAgIGlmICh0aGlzLmFjY2Vzc1Rva2VuICYmIHRpbWVVbnRpbEV4cGlyeSA+IHRoaXMuVE9LRU5fUkVGUkVTSF9CVUZGRVIgJiYgcHJvY2Vzcy5lbnYuWk9IT19GT1JDRV9SRUZSRVNIICE9PSAndHJ1ZScpIHtcclxuICAgICAgICBjb25zdCBtaW51dGVzTGVmdCA9IE1hdGgucm91bmQodGltZVVudGlsRXhwaXJ5IC8gNjAwMDApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5SQIFVzaW5nIGNhY2hlZCB0b2tlbiAoZXhwaXJlcyBpbiAke21pbnV0ZXNMZWZ0fSBtaW51dGVzKWApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc1Rva2VuO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBMb2cgdG9rZW4gc3RhdHVzIGZvciBkZWJ1Z2dpbmdcclxuICAgICAgaWYgKHRoaXMuYWNjZXNzVG9rZW4gJiYgdGltZVVudGlsRXhwaXJ5ID4gMCkge1xyXG4gICAgICAgIGNvbnN0IG1pbnV0ZXNMZWZ0ID0gTWF0aC5yb3VuZCh0aW1lVW50aWxFeHBpcnkgLyA2MDAwMCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYOKaoO+4jyBUb2tlbiBleHBpcmVzIHNvb24gKCR7bWludXRlc0xlZnR9IG1pbnV0ZXMpLCByZWZyZXNoaW5nIHByb2FjdGl2ZWx5YCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hY2Nlc3NUb2tlbikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SEIFRva2VuIGV4cGlyZWQsIHJlZnJlc2hpbmcuLi4nKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmxvZygn8J+GlSBObyB0b2tlbiBhdmFpbGFibGUsIG9idGFpbmluZyBuZXcgb25lLi4uJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCdUb2tlbiBleHBpcmVkIG9yIG1pc3NpbmcsIHJlZnJlc2hpbmcuLi4nKTtcclxuICAgICAgXHJcbiAgICAgIC8vIENsZWFyIGFueSBleGlzdGluZyB0b2tlblxyXG4gICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gbnVsbDtcclxuICAgICAgdGhpcy50b2tlbkV4cGlyeSA9IDA7XHJcblxyXG4gICAgICBpZiAoIXByb2Nlc3MuZW52LlpPSE9fQ0xJRU5UX0lEIHx8ICFwcm9jZXNzLmVudi5aT0hPX0NMSUVOVF9TRUNSRVQgfHwgIXByb2Nlc3MuZW52LlpPSE9fUkVGUkVTSF9UT0tFTikge1xyXG4gICAgICAgIGNvbnN0IG1pc3NpbmdWYXJzID0gW107XHJcbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5aT0hPX0NMSUVOVF9JRCkgbWlzc2luZ1ZhcnMucHVzaCgnWk9IT19DTElFTlRfSUQnKTtcclxuICAgICAgICBpZiAoIXByb2Nlc3MuZW52LlpPSE9fQ0xJRU5UX1NFQ1JFVCkgbWlzc2luZ1ZhcnMucHVzaCgnWk9IT19DTElFTlRfU0VDUkVUJyk7XHJcbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5aT0hPX1JFRlJFU0hfVE9LRU4pIG1pc3NpbmdWYXJzLnB1c2goJ1pPSE9fUkVGUkVTSF9UT0tFTicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyByZXF1aXJlZCBab2hvIGVudmlyb25tZW50IHZhcmlhYmxlczogJHttaXNzaW5nVmFycy5qb2luKCcsICcpfWApO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIEVuc3VyZSBvbmx5IG9uZSByZWZyZXNoIGhhcHBlbnMgYXQgYSB0aW1lIGFjcm9zcyBjb25jdXJyZW50IHJlcXVlc3RzXHJcbiAgICAgIGlmICghdGhpcy5yZWZyZXNoUHJvbWlzZSkge1xyXG4gICAgICAgIHRoaXMucmVmcmVzaFByb21pc2UgPSB0aGlzLl9wZXJmb3JtVG9rZW5SZWZyZXNoV2l0aEJhY2tvZmYoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB0aGlzLnJlZnJlc2hQcm9taXNlO1xyXG4gICAgICAvLyBDbGVhciB0aGUgaW4tZmxpZ2h0IHByb21pc2UgYWZ0ZXIgY29tcGxldGlvblxyXG4gICAgICB0aGlzLnJlZnJlc2hQcm9taXNlID0gbnVsbDtcclxuICAgICAgcmV0dXJuIHRva2VuO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVmcmVzaGluZyBab2hvIGFjY2VzcyB0b2tlbjonLCBlcnJvcik7XHJcbiAgICAgIFxyXG4gICAgICAvLyBMb2cgc3BlY2lmaWMgZXJyb3IgZGV0YWlscyBmb3IgZGVidWdnaW5nXHJcbiAgICAgIGlmIChheGlvcy5pc0F4aW9zRXJyb3IoZXJyb3IpKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignQXhpb3MgZXJyb3IgZGV0YWlsczonLCB7XHJcbiAgICAgICAgICBzdGF0dXM6IGVycm9yLnJlc3BvbnNlPy5zdGF0dXMsXHJcbiAgICAgICAgICBzdGF0dXNUZXh0OiBlcnJvci5yZXNwb25zZT8uc3RhdHVzVGV4dCxcclxuICAgICAgICAgIGRhdGE6IGVycm9yLnJlc3BvbnNlPy5kYXRhLFxyXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcclxuICAgICAgICAgIGhlYWRlcnM6IGVycm9yLnJlc3BvbnNlPy5oZWFkZXJzIC8vIExvZyBoZWFkZXJzIGZvciByYXRlIGxpbWl0IGluZm9cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBMb2cgcmF0ZSBsaW1pdCBoZWFkZXJzIGlmIGF2YWlsYWJsZVxyXG4gICAgICAgIGlmIChlcnJvci5yZXNwb25zZT8uaGVhZGVycykge1xyXG4gICAgICAgICAgY29uc3QgcmF0ZUxpbWl0SGVhZGVycyA9IHtcclxuICAgICAgICAgICAgJ1gtUmF0ZS1MaW1pdCc6IGVycm9yLnJlc3BvbnNlLmhlYWRlcnNbJ3gtcmF0ZS1saW1pdCddLFxyXG4gICAgICAgICAgICAnWC1SYXRlLUxpbWl0LVJlbWFpbmluZyc6IGVycm9yLnJlc3BvbnNlLmhlYWRlcnNbJ3gtcmF0ZS1saW1pdC1yZW1haW5pbmcnXSxcclxuICAgICAgICAgICAgJ1gtUmF0ZS1MaW1pdC1SZXNldCc6IGVycm9yLnJlc3BvbnNlLmhlYWRlcnNbJ3gtcmF0ZS1saW1pdC1yZXNldCddLFxyXG4gICAgICAgICAgICAnUmV0cnktQWZ0ZXInOiBlcnJvci5yZXNwb25zZS5oZWFkZXJzWydyZXRyeS1hZnRlciddXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignUmF0ZSBsaW1pdCBoZWFkZXJzOicsIHJhdGVMaW1pdEhlYWRlcnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gVHJ5IHRvIGZhbGwgYmFjayB0byBjYWNoZWQgdG9rZW4gaWYgYXZhaWxhYmxlXHJcbiAgICAgIGlmICh0aGlzLmNhY2hlZEFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdGYWxsaW5nIGJhY2sgdG8gY2FjaGVkIGFjY2VzcyB0b2tlbiBkdWUgdG8gcmVmcmVzaCBmYWlsdXJlJyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkQWNjZXNzVG9rZW47XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIFpvaG86ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBQZXJmb3JtIHRoZSB0b2tlbiByZWZyZXNoIHdpdGggZm9ybS1lbmNvZGVkIGJvZHkgYW5kIGltcHJvdmVkIGV4cG9uZW50aWFsIGJhY2tvZmZcclxuICBwcml2YXRlIGFzeW5jIF9wZXJmb3JtVG9rZW5SZWZyZXNoV2l0aEJhY2tvZmYoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IG1heEF0dGVtcHRzID0gNTsgLy8gSW5jcmVhc2VkIGZyb20gMyB0byA1XHJcbiAgICBmb3IgKGxldCBhdHRlbXB0ID0gMTsgYXR0ZW1wdCA8PSBtYXhBdHRlbXB0czsgYXR0ZW1wdCsrKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XHJcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdyZWZyZXNoX3Rva2VuJywgcHJvY2Vzcy5lbnYuWk9IT19SRUZSRVNIX1RPS0VOIHx8ICcnKTtcclxuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2NsaWVudF9pZCcsIHByb2Nlc3MuZW52LlpPSE9fQ0xJRU5UX0lEIHx8ICcnKTtcclxuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2NsaWVudF9zZWNyZXQnLCBwcm9jZXNzLmVudi5aT0hPX0NMSUVOVF9TRUNSRVQgfHwgJycpO1xyXG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZ3JhbnRfdHlwZScsICdyZWZyZXNoX3Rva2VuJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdDxUb2tlblJlc3BvbnNlPihgJHt0aGlzLkFDQ09VTlRTX0JBU0V9L29hdXRoL3YyL3Rva2VuYCwgZm9ybURhdGEsIHtcclxuICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnIH0sXHJcbiAgICAgICAgICB0aW1lb3V0OiAxNTAwMCxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKCFyZXNwb25zZS5kYXRhLmFjY2Vzc190b2tlbikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBhY2Nlc3MgdG9rZW4gcmVjZWl2ZWQgZnJvbSBab2hvJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDYWNoZSB0aGUgc3VjY2Vzc2Z1bCB0b2tlbiBhbmQgZXhwaXJ5IGluZm9ybWF0aW9uXHJcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IHJlc3BvbnNlLmRhdGEuYWNjZXNzX3Rva2VuO1xyXG4gICAgICAgIHRoaXMudG9rZW5FeHBpcnkgPSBEYXRlLm5vdygpICsgKHJlc3BvbnNlLmRhdGEuZXhwaXJlc19pbiAqIDEwMDApO1xyXG4gICAgICAgIHRoaXMubGFzdFJlZnJlc2hUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDYWNoZSB0aGUgc3VjY2Vzc2Z1bCB0b2tlbiBhcyBmYWxsYmFja1xyXG4gICAgICAgIHRoaXMuY2FjaGVkQWNjZXNzVG9rZW4gPSByZXNwb25zZS5kYXRhLmFjY2Vzc190b2tlbjtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coYFRva2VuIHJlZnJlc2hlZCBzdWNjZXNzZnVsbHkuIEV4cGlyZXMgaW4gJHtNYXRoLnJvdW5kKHJlc3BvbnNlLmRhdGEuZXhwaXJlc19pbiAvIDYwKX0gbWludXRlc2ApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdab2hvIHRva2VuIHJlZnJlc2ggcmVzcG9uc2U6JywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9nIHRva2VuIGNhY2hpbmcgZGV0YWlsc1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5SQIFRva2VuIGNhY2hlZDogYWNjZXNzX3Rva2VuPSR7dGhpcy5hY2Nlc3NUb2tlbi5zdWJzdHJpbmcoMCwgMTApfS4uLiwgZXhwaXJlc19pbj0ke3Jlc3BvbnNlLmRhdGEuZXhwaXJlc19pbn1zLCBleHBpcnk9JHtuZXcgRGF0ZSh0aGlzLnRva2VuRXhwaXJ5KS50b0lTT1N0cmluZygpfWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFZhbGlkYXRlIHNjb3BlcyBvbiByZWZyZXNoZWQgdG9rZW5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3Qgc2NvcGVJbmZvID0gYXdhaXQgdGhpcy5jaGVja1Rva2VuU2NvcGVzKHRoaXMuYWNjZXNzVG9rZW4pO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1pvaG8gZ3JhbnRlZCBzY29wZXM6Jywgc2NvcGVJbmZvPy5zY29wZSB8fCAndW5rbm93bicpO1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBzY29wZUluZm8/LnNjb3BlID09PSAnc3RyaW5nJyAmJiAhc2NvcGVJbmZvLnNjb3BlLmluY2x1ZGVzKCdab2hvQm9va3MucmVwb3J0cy5SRUFEJykpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gTWlzc2luZyBab2hvQm9va3MucmVwb3J0cy5SRUFEIHNjb3BlLiBSZWdlbmVyYXRlIHRva2VuLicpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKHNjb3BlRXJyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdab2hvIHRva2VuIHNjb3BlIHZlcmlmaWNhdGlvbiBmYWlsZWQ6JywgKHNjb3BlRXJyIGFzIEVycm9yKT8ubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc1Rva2VuO1xyXG4gICAgICB9IGNhdGNoIChlcnI6IGFueSkge1xyXG4gICAgICAgIC8vIElmIHJhdGUtbGltaXRlZCBieSBab2hvIGR1cmluZyB0b2tlbiByZWZyZXNoLCBpbXBsZW1lbnQgZXhwb25lbnRpYWwgYmFja29mZlxyXG4gICAgICAgIGNvbnN0IGlzQXhpb3MgPSBheGlvcy5pc0F4aW9zRXJyb3IoZXJyKTtcclxuICAgICAgICBjb25zdCBzdGF0dXMgPSBpc0F4aW9zID8gZXJyLnJlc3BvbnNlPy5zdGF0dXMgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBpc0F4aW9zID8gKGVyci5yZXNwb25zZT8uZGF0YSBhcyBhbnkpPy5lcnJvcl9kZXNjcmlwdGlvbiA6IHVuZGVmaW5lZDtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoc3RhdHVzID09PSA0MDAgJiYgdHlwZW9mIGRlc2NyaXB0aW9uID09PSAnc3RyaW5nJyAmJiBkZXNjcmlwdGlvbi50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCd0b28gbWFueSByZXF1ZXN0cycpKSB7XHJcbiAgICAgICAgICAvLyBFeHBvbmVudGlhbCBiYWNrb2ZmOiBkZWxheSA9IGJhc2UgKiAyXmF0dGVtcHRcclxuICAgICAgICAgIGNvbnN0IGRlbGF5TXMgPSB0aGlzLkJBU0VfREVMQVkgKiBNYXRoLnBvdygyLCBhdHRlbXB0IC0gMSkgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwKTtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihgWm9obyB0b2tlbiByZWZyZXNoIHJhdGUtbGltaXRlZCAoYXR0ZW1wdCAke2F0dGVtcHR9LyR7bWF4QXR0ZW1wdHN9KS4gV2FpdGluZyAke2RlbGF5TXN9bXMgYmVmb3JlIHJldHJ5LmApO1xyXG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5TXMpKTtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBGb3Igb3RoZXIgZXJyb3JzLCBkbyBub3QgcmV0cnkgZW5kbGVzc2x5XHJcbiAgICAgICAgaWYgKGF0dGVtcHQgPT09IG1heEF0dGVtcHRzKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBab2hvIHRva2VuIHJlZnJlc2ggZmFpbGVkIGFmdGVyICR7bWF4QXR0ZW1wdHN9IGF0dGVtcHRzOmAsIGVycik7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1pvaG8gdG9rZW4gcmVmcmVzaCByYXRlLWxpbWl0ZWQuIENoZWNrIGRhaWx5IEFQSSBsaW1pdHMgb3IgdG9rZW4gdmFsaWRpdHkuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IGVycjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdab2hvIHRva2VuIHJlZnJlc2ggZmFpbGVkIGFmdGVyIG1heGltdW0gcmV0cmllcycpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyByZWZyZXNoQWNjZXNzVG9rZW4oKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdSZWZyZXNoaW5nIFpvaG8gYWNjZXNzIHRva2VuLi4uJyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBDcmVhdGUgZm9ybSBkYXRhIGZvciB0aGUgcmVxdWVzdFxyXG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcclxuICAgICAgZm9ybURhdGEuYXBwZW5kKCdyZWZyZXNoX3Rva2VuJywgcHJvY2Vzcy5lbnYuWk9IT19SRUZSRVNIX1RPS0VOIHx8ICcnKTtcclxuICAgICAgZm9ybURhdGEuYXBwZW5kKCdjbGllbnRfaWQnLCBwcm9jZXNzLmVudi5aT0hPX0NMSUVOVF9JRCB8fCAnJyk7XHJcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnY2xpZW50X3NlY3JldCcsIHByb2Nlc3MuZW52LlpPSE9fQ0xJRU5UX1NFQ1JFVCB8fCAnJyk7XHJcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZ3JhbnRfdHlwZScsICdyZWZyZXNoX3Rva2VuJyk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3Q8VG9rZW5SZXNwb25zZT4oYCR7dGhpcy5BQ0NPVU5UU19CQVNFfS9vYXV0aC92Mi90b2tlbmAsIGZvcm1EYXRhLCB7XHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gQ2FjaGUgdGhlIHN1Y2Nlc3NmdWwgdG9rZW4gYW5kIGV4cGlyeSBpbmZvcm1hdGlvblxyXG4gICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gcmVzcG9uc2UuZGF0YS5hY2Nlc3NfdG9rZW47XHJcbiAgICAgIHRoaXMudG9rZW5FeHBpcnkgPSBEYXRlLm5vdygpICsgKHJlc3BvbnNlLmRhdGEuZXhwaXJlc19pbiAqIDEwMDApO1xyXG4gICAgICBcclxuICAgICAgLy8gQ2FjaGUgdGhlIHN1Y2Nlc3NmdWwgdG9rZW4gYXMgZmFsbGJhY2tcclxuICAgICAgdGhpcy5jYWNoZWRBY2Nlc3NUb2tlbiA9IHJlc3BvbnNlLmRhdGEuYWNjZXNzX3Rva2VuO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coYFRva2VuIHJlZnJlc2hlZCBzdWNjZXNzZnVsbHkuIEV4cGlyZXMgaW4gJHtNYXRoLnJvdW5kKHJlc3BvbnNlLmRhdGEuZXhwaXJlc19pbiAvIDYwKX0gbWludXRlc2ApO1xyXG4gICAgICBjb25zb2xlLmxvZyhg8J+UkCBUb2tlbiBjYWNoZWQ6IGFjY2Vzc190b2tlbj0ke3RoaXMuYWNjZXNzVG9rZW4uc3Vic3RyaW5nKDAsIDEwKX0uLi4sIGV4cGlyZXNfaW49JHtyZXNwb25zZS5kYXRhLmV4cGlyZXNfaW59cywgZXhwaXJ5PSR7bmV3IERhdGUodGhpcy50b2tlbkV4cGlyeSkudG9JU09TdHJpbmcoKX1gKTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiB0aGlzLmFjY2Vzc1Rva2VuO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVmcmVzaGluZyBab2hvIGFjY2VzcyB0b2tlbjonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIFpvaG8nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgbWFrZVJlcXVlc3QoZW5kcG9pbnQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBBcHBseSByYXRlIGxpbWl0aW5nXHJcbiAgICAgIGF3YWl0IHRoaXMuYXBwbHlSYXRlTGltaXQoKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdGhpcy5nZXRBY2Nlc3NUb2tlbigpO1xyXG4gICAgICBcclxuICAgICAgLy8gTG9nIEFQSSBjYWxsIGNvdW50IGZvciBtb25pdG9yaW5nXHJcbiAgICAgIHRoaXMucmVxdWVzdENvdW50Kys7XHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5OKIFpvaG8gQVBJIGNhbGwgIyR7dGhpcy5yZXF1ZXN0Q291bnR9IHRvOiAke2VuZHBvaW50fWApO1xyXG4gICAgICBcclxuICAgICAgLy8gVmFsaWRhdGUgdG9rZW4gYmVmb3JlIG1ha2luZyByZXF1ZXN0XHJcbiAgICAgIGlmICghdG9rZW4gfHwgdG9rZW4gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG9yIG1pc3NpbmcgYWNjZXNzIHRva2VuJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFZhbGlkYXRlIG9yZ2FuaXphdGlvbiBiZWZvcmUgaGl0dGluZyByZXBvcnRzIGVuZHBvaW50c1xyXG4gICAgICBpZiAoIXRoaXMub3JnYW5pemF0aW9uVmFsaWRhdGVkICYmIGVuZHBvaW50LnN0YXJ0c1dpdGgoJ3JlcG9ydHMvJykpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLnZhbGlkYXRlT3JnYW5pemF0aW9uKHRva2VuKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgY29uc29sZS5pbmZvKGBNYWtpbmcgWm9obyBBUEkgcmVxdWVzdCB0bzogJHtlbmRwb2ludH1gKTtcclxuICAgICAgY29uc29sZS5pbmZvKGBUb2tlbiAoZmlyc3QgMTAgY2hhcnMpOiAke3Rva2VuPy5zdWJzdHJpbmcoMCwgMTApID8/ICdOL0EnfS4uLmApO1xyXG4gICAgICBcclxuICAgICAgLy8gQ3JlYXRlIEFib3J0Q29udHJvbGxlciBmb3IgdGltZW91dFxyXG4gICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IGNvbnRyb2xsZXIuYWJvcnQoKSwgMTUwMDApOyAvLyAxNSBzZWNvbmQgdGltZW91dFxyXG4gICAgICBcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChgJHt0aGlzLkFQSV9CQVNFfS9ib29rcy92My8ke2VuZHBvaW50fWAsIHtcclxuICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dG9rZW59YCxcclxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgb3JnYW5pemF0aW9uX2lkOiBwcm9jZXNzLmVudi5aT0hPX09SR0FOSVpBVElPTl9JRCxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB0aW1lb3V0OiAxNTAwMCwgLy8gMTUgc2Vjb25kIHRpbWVvdXRcclxuICAgICAgICAgIHNpZ25hbDogY29udHJvbGxlci5zaWduYWwsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFJlc2V0IHJldHJ5IGNvdW50IG9uIHN1Y2Nlc3NcclxuICAgICAgICB0aGlzLnJldHJ5Q291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMucmVxdWVzdENvdW50Kys7XHJcbiAgICAgICAgdGhpcy5sYXN0UmVxdWVzdFRpbWUgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmluZm8oYFpvaG8gQVBJIHJlcXVlc3Qgc3VjY2Vzc2Z1bDogJHtlbmRwb2ludH1gKTtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgfSBjYXRjaCAoYXhpb3NFcnJvcjogYW55KSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gSGFuZGxlIHRpbWVvdXQgc3BlY2lmaWNhbGx5XHJcbiAgICAgICAgaWYgKGF4aW9zRXJyb3IuY29kZSA9PT0gJ0VDT05OQUJPUlRFRCcgfHwgYXhpb3NFcnJvci5tZXNzYWdlPy5pbmNsdWRlcygndGltZW91dCcpKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFpvaG8gQVBJIHJlcXVlc3QgdGltZWQgb3V0IGZvciAke2VuZHBvaW50fWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aHJvdyBheGlvc0Vycm9yO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICAgIC8vIEhhbmRsZSByYXRlIGxpbWl0aW5nICg0MDAgd2l0aCBzcGVjaWZpYyBlcnJvciBtZXNzYWdlKVxyXG4gICAgICBpZiAoZXJyb3IucmVzcG9uc2U/LnN0YXR1cyA9PT0gNDAwICYmIFxyXG4gICAgICAgICAgZXJyb3IucmVzcG9uc2U/LmRhdGE/LmVycm9yX2Rlc2NyaXB0aW9uPy5pbmNsdWRlcygndG9vIG1hbnkgcmVxdWVzdHMnKSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUud2FybignWm9obyByYXRlIGxpbWl0IGhpdCwgaW1wbGVtZW50aW5nIGV4cG9uZW50aWFsIGJhY2tvZmYuLi4nKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmhhbmRsZVJhdGVMaW1pdCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFJldHJ5IHRoZSByZXF1ZXN0IGFmdGVyIGJhY2tvZmZcclxuICAgICAgICBpZiAodGhpcy5yZXRyeUNvdW50IDwgdGhpcy5NQVhfUkVUUklFUykge1xyXG4gICAgICAgICAgdGhpcy5yZXRyeUNvdW50Kys7XHJcbiAgICAgICAgICBjb25zb2xlLmluZm8oYFJldHJ5aW5nIHJlcXVlc3QgYWZ0ZXIgcmF0ZSBsaW1pdCBiYWNrb2ZmIChhdHRlbXB0ICR7dGhpcy5yZXRyeUNvdW50fSlgKTtcclxuICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0KGVuZHBvaW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdab2hvIEFQSSByYXRlIGxpbWl0IGV4Y2VlZGVkIGFmdGVyIG1heGltdW0gcmV0cmllcy4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4nKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEhhbmRsZSA0MjkgVG9vIE1hbnkgUmVxdWVzdHMgKGV4cGxpY2l0IHJhdGUgbGltaXQpXHJcbiAgICAgIGlmIChlcnJvci5yZXNwb25zZT8uc3RhdHVzID09PSA0MjkpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ1pvaG8gNDI5IHJhdGUgbGltaXQgaGl0LCBpbXBsZW1lbnRpbmcgZXhwb25lbnRpYWwgYmFja29mZi4uLicpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuaGFuZGxlUmF0ZUxpbWl0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gUmV0cnkgdGhlIHJlcXVlc3QgYWZ0ZXIgYmFja29mZlxyXG4gICAgICAgIGlmICh0aGlzLnJldHJ5Q291bnQgPCB0aGlzLk1BWF9SRVRSSUVTKSB7XHJcbiAgICAgICAgICB0aGlzLnJldHJ5Q291bnQrKztcclxuICAgICAgICAgIGNvbnNvbGUuaW5mbyhgUmV0cnlpbmcgcmVxdWVzdCBhZnRlciA0MjkgYmFja29mZiAoYXR0ZW1wdCAke3RoaXMucmV0cnlDb3VudH0pYCk7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlUmVxdWVzdChlbmRwb2ludCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWm9obyBBUEkgcmF0ZSBsaW1pdCBleGNlZWRlZCBhZnRlciBtYXhpbXVtIHJldHJpZXMuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBJZiB3ZSBnZXQgYSA0MDEsIHRyeSByZWZyZXNoaW5nIHRoZSB0b2tlbiBvbmNlXHJcbiAgICAgIGlmIChlcnJvci5yZXNwb25zZT8uc3RhdHVzID09PSA0MDEpIHtcclxuICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2U/LmRhdGE/LmNvZGUgPT09IDU3KSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdab2hvIEFQSSBhdXRob3JpemF0aW9uIGVycm9yIChjb2RlIDU3KS4gTGlrZWx5IG1pc3NpbmcgcmVxdWlyZWQgc2NvcGVzIHN1Y2ggYXMgWm9ob0Jvb2tzLnJlcG9ydHMuUkVBRC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5pbmZvKCdUb2tlbiBleHBpcmVkLCByZWZyZXNoaW5nLi4uJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ2xlYXIgdGhlIGN1cnJlbnQgdG9rZW4gYW5kIGZvcmNlIGEgcmVmcmVzaFxyXG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMudG9rZW5FeHBpcnkgPSAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCBuZXdUb2tlbiA9IGF3YWl0IHRoaXMuZm9yY2VSZWZyZXNoVG9rZW4oKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gVmFsaWRhdGUgdGhlIG5ldyB0b2tlblxyXG4gICAgICAgICAgaWYgKCFuZXdUb2tlbiB8fCBuZXdUb2tlbiA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gb2J0YWluIHZhbGlkIHRva2VuIGFmdGVyIHJlZnJlc2gnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY29uc29sZS5pbmZvKGBSZXRyeWluZyByZXF1ZXN0IHdpdGggbmV3IHRva2VuOiAke2VuZHBvaW50fWApO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBSZXRyeSB0aGUgcmVxdWVzdCB3aXRoIHRoZSBuZXcgdG9rZW5cclxuICAgICAgICAgIGNvbnN0IHJldHJ5UmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoYCR7dGhpcy5BUElfQkFTRX0vYm9va3MvdjMvJHtlbmRwb2ludH1gLCB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHtuZXdUb2tlbn1gLFxyXG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgIG9yZ2FuaXphdGlvbl9pZDogcHJvY2Vzcy5lbnYuWk9IT19PUkdBTklaQVRJT05fSUQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRpbWVvdXQ6IDE1MDAwLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGNvbnNvbGUuaW5mbygnUmVxdWVzdCByZXRyeSBzdWNjZXNzZnVsIGFmdGVyIHRva2VuIHJlZnJlc2gnKTtcclxuICAgICAgICAgIHJldHVybiByZXRyeVJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgfSBjYXRjaCAocmVmcmVzaEVycm9yOiBhbnkpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZWZyZXNoIHRva2VuIG9yIHJldHJ5IHJlcXVlc3Q6JywgcmVmcmVzaEVycm9yKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gTG9nIGRldGFpbGVkIHJlZnJlc2ggZXJyb3IgaW5mb3JtYXRpb25cclxuICAgICAgICAgIGlmIChheGlvcy5pc0F4aW9zRXJyb3IocmVmcmVzaEVycm9yKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdUb2tlbiByZWZyZXNoIEF4aW9zIGVycm9yIGRldGFpbHM6Jywge1xyXG4gICAgICAgICAgICAgIHN0YXR1czogcmVmcmVzaEVycm9yLnJlc3BvbnNlPy5zdGF0dXMsXHJcbiAgICAgICAgICAgICAgc3RhdHVzVGV4dDogcmVmcmVzaEVycm9yLnJlc3BvbnNlPy5zdGF0dXNUZXh0LFxyXG4gICAgICAgICAgICAgIGRhdGE6IHJlZnJlc2hFcnJvci5yZXNwb25zZT8uZGF0YSxcclxuICAgICAgICAgICAgICBtZXNzYWdlOiByZWZyZXNoRXJyb3IubWVzc2FnZSxcclxuICAgICAgICAgICAgICBlbmRwb2ludDogZW5kcG9pbnRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIENoZWNrIGlmIGl0J3MgYSByYXRlIGxpbWl0aW5nIGlzc3VlIGR1cmluZyB0b2tlbiByZWZyZXNoXHJcbiAgICAgICAgICBpZiAocmVmcmVzaEVycm9yLnJlc3BvbnNlPy5zdGF0dXMgPT09IDQwMCAmJiBcclxuICAgICAgICAgICAgICByZWZyZXNoRXJyb3IucmVzcG9uc2U/LmRhdGE/LmVycm9yX2Rlc2NyaXB0aW9uPy5pbmNsdWRlcygndG9vIG1hbnkgcmVxdWVzdHMnKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFpvaG8gdG9rZW4gcmVmcmVzaCByYXRlIGxpbWl0ZWQ6ICR7ZW5kcG9pbnR9LiBQbGVhc2Ugd2FpdCBiZWZvcmUgcmV0cnlpbmcuYCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIENoZWNrIGlmIGl0J3MgYW4gYXV0aGVudGljYXRpb24gaXNzdWUgZHVyaW5nIHRva2VuIHJlZnJlc2hcclxuICAgICAgICAgIGlmIChyZWZyZXNoRXJyb3IucmVzcG9uc2U/LnN0YXR1cyA9PT0gNDAwICYmIFxyXG4gICAgICAgICAgICAgIHJlZnJlc2hFcnJvci5yZXNwb25zZT8uZGF0YT8uZXJyb3JfZGVzY3JpcHRpb24/LmluY2x1ZGVzKCdpbnZhbGlkJykpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBab2hvIHRva2VuIHJlZnJlc2ggZmFpbGVkIC0gaW52YWxpZCBjcmVkZW50aWFsczogJHtlbmRwb2ludH0uIENoZWNrIHlvdXIgT0F1dGggY29uZmlndXJhdGlvbi5gKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBab2hvIEFQSSBhdXRoZW50aWNhdGlvbiBmYWlsZWQgYWZ0ZXIgdG9rZW4gcmVmcmVzaDogJHtlbmRwb2ludH0uIEVycm9yOiAke3JlZnJlc2hFcnJvci5tZXNzYWdlfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTG9nIHRoZSBlcnJvciBkZXRhaWxzIGZvciBkZWJ1Z2dpbmdcclxuICAgICAgY29uc29sZS5lcnJvcihgWm9obyBBUEkgcmVxdWVzdCBmYWlsZWQgZm9yICR7ZW5kcG9pbnR9OmAsIHtcclxuICAgICAgICBzdGF0dXM6IGVycm9yLnJlc3BvbnNlPy5zdGF0dXMsXHJcbiAgICAgICAgc3RhdHVzVGV4dDogZXJyb3IucmVzcG9uc2U/LnN0YXR1c1RleHQsXHJcbiAgICAgICAgZGF0YTogZXJyb3IucmVzcG9uc2U/LmRhdGEsXHJcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxyXG4gICAgICB9KTtcclxuICAgICAgaWYgKGVycm9yLnJlc3BvbnNlPy5kYXRhPy5jb2RlID09PSA1Nykge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1pvaG8gQVBJIGF1dGhvcml6YXRpb24gZXJyb3IgKGNvZGUgNTcpLiBWZXJpZnkgb3JnYW5pemF0aW9uX2lkIGFuZCBPQXV0aCBzY29wZXMgKFpvaG9Cb29rcy5yZXBvcnRzLlJFQUQpLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIENoZWNrIGdyYW50ZWQgc2NvcGVzIGZvciBjdXJyZW50IGFjY2VzcyB0b2tlblxyXG4gIHByaXZhdGUgYXN5bmMgY2hlY2tUb2tlblNjb3Blcyh0b2tlbjogc3RyaW5nKTogUHJvbWlzZTx7IHNjb3BlPzogc3RyaW5nIH0gfCBudWxsPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLkFDQ09VTlRTX0JBU0V9L29hdXRoL3YyL3Rva2VuaW5mbz90b2tlbj0ke2VuY29kZVVSSUNvbXBvbmVudCh0b2tlbil9YDtcclxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KHVybCwgeyB0aW1lb3V0OiAxMDAwMCB9KTtcclxuICAgICAgcmV0dXJuIHJlcy5kYXRhIGFzIHsgc2NvcGU/OiBzdHJpbmcgfTtcclxuICAgIH0gY2F0Y2ggKGVycjogYW55KSB7XHJcbiAgICAgIC8vIFN1cmZhY2UgY29uY2lzZSBjb250ZXh0IGJ1dCBkbyBub3QgZmFpbCB0aGUgbWFpbiBmbG93XHJcbiAgICAgIGNvbnN0IG1zZyA9IGF4aW9zLmlzQXhpb3NFcnJvcihlcnIpID8gZXJyLnJlc3BvbnNlPy5kYXRhIHx8IGVyci5tZXNzYWdlIDogU3RyaW5nKGVycik7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcih0eXBlb2YgbXNnID09PSAnc3RyaW5nJyA/IG1zZyA6IEpTT04uc3RyaW5naWZ5KG1zZykpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gVmFsaWRhdGUgdGhlIGNvbmZpZ3VyZWQgb3JnYW5pemF0aW9uIElEIGJ5IGNhbGxpbmcgb3JnYW5pemF0aW9ucyBlbmRwb2ludFxyXG4gIHByaXZhdGUgYXN5bmMgdmFsaWRhdGVPcmdhbml6YXRpb24odG9rZW46IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgb3JnSWQgPSBwcm9jZXNzLmVudi5aT0hPX09SR0FOSVpBVElPTl9JRDtcclxuICAgICAgaWYgKCFvcmdJZCkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignWk9IT19PUkdBTklaQVRJT05fSUQgbm90IHNldC4gUmVwb3J0cyBjYWxscyBtYXkgZmFpbC4nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5BUElfQkFTRX0vYm9va3MvdjMvb3JnYW5pemF0aW9uc2A7XHJcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCh1cmwsIHtcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0b2tlbn1gLFxyXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGltZW91dDogMTUwMDBcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IG9yZ3MgPSAocmVzLmRhdGE/Lm9yZ2FuaXphdGlvbnMgfHwgW10pIGFzIEFycmF5PHsgb3JnYW5pemF0aW9uX2lkPzogc3RyaW5nIHwgbnVtYmVyIH0+O1xyXG4gICAgICBjb25zdCBmb3VuZCA9IG9yZ3Muc29tZShvID0+IFN0cmluZyhvLm9yZ2FuaXphdGlvbl9pZCkgPT09IFN0cmluZyhvcmdJZCkpO1xyXG4gICAgICBpZiAoIWZvdW5kKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgUHJvdmlkZWQgb3JnYW5pemF0aW9uX2lkPSR7b3JnSWR9IG5vdCBmb3VuZCBpbiBab2hvIGFjY291bnQuIEZldGNoZWQgb3JnYW5pemF0aW9uczogJHtKU09OLnN0cmluZ2lmeShvcmdzKX1gKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvblZhbGlkYXRlZCA9IHRydWU7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFZhbGlkYXRlZCBab2hvIG9yZ2FuaXphdGlvbl9pZD0ke29yZ0lkfWApO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnI6IGFueSkge1xyXG4gICAgICBjb25zdCBzdGF0dXMgPSBheGlvcy5pc0F4aW9zRXJyb3IoZXJyKSA/IGVyci5yZXNwb25zZT8uc3RhdHVzIDogdW5kZWZpbmVkO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXhpb3MuaXNBeGlvc0Vycm9yKGVycikgPyBlcnIucmVzcG9uc2U/LmRhdGEgOiB1bmRlZmluZWQ7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byB2YWxpZGF0ZSBab2hvIG9yZ2FuaXphdGlvbjonLCB7IHN0YXR1cywgZGF0YSwgbWVzc2FnZTogZXJyLm1lc3NhZ2UgfSk7XHJcbiAgICAgIC8vIERvIG5vdCB0aHJvdzsgYWxsb3cgcmVxdWVzdCB0byBwcm9jZWVkIGJ1dCBsb2dzIHdpbGwgaGVscCBkaWFnbm9zZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBhcHBseVJhdGVMaW1pdCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gd2FpdCBiZXR3ZWVuIHJlcXVlc3RzXHJcbiAgICBpZiAodGhpcy5sYXN0UmVxdWVzdFRpbWUgPiAwKSB7XHJcbiAgICAgIGNvbnN0IHRpbWVTaW5jZUxhc3RSZXF1ZXN0ID0gbm93IC0gdGhpcy5sYXN0UmVxdWVzdFRpbWU7XHJcbiAgICAgIGlmICh0aW1lU2luY2VMYXN0UmVxdWVzdCA8IHRoaXMuTUlOX1JFUVVFU1RfSU5URVJWQUwpIHtcclxuICAgICAgICBjb25zdCB3YWl0VGltZSA9IHRoaXMuTUlOX1JFUVVFU1RfSU5URVJWQUwgLSB0aW1lU2luY2VMYXN0UmVxdWVzdDtcclxuICAgICAgICBjb25zb2xlLmluZm8oYFJhdGUgbGltaXRpbmc6IHdhaXRpbmcgJHt3YWl0VGltZX1tcyBiZWZvcmUgbmV4dCByZXF1ZXN0YCk7XHJcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHdhaXRUaW1lKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgd2UndmUgZXhjZWVkZWQgdGhlIHBlci1taW51dGUgbGltaXRcclxuICAgIGlmICh0aGlzLnJlcXVlc3RDb3VudCA+PSB0aGlzLk1BWF9SRVFVRVNUU19QRVJfTUlOVVRFKSB7XHJcbiAgICAgIGNvbnN0IHRpbWVTaW5jZUZpcnN0UmVxdWVzdCA9IG5vdyAtIHRoaXMubGFzdFJlcXVlc3RUaW1lO1xyXG4gICAgICBpZiAodGltZVNpbmNlRmlyc3RSZXF1ZXN0IDwgNjAwMDApIHsgLy8gTGVzcyB0aGFuIDEgbWludXRlXHJcbiAgICAgICAgY29uc3Qgd2FpdFRpbWUgPSA2MDAwMCAtIHRpbWVTaW5jZUZpcnN0UmVxdWVzdDtcclxuICAgICAgICBjb25zb2xlLndhcm4oYFJhdGUgbGltaXRpbmc6IGV4Y2VlZGVkICR7dGhpcy5NQVhfUkVRVUVTVFNfUEVSX01JTlVURX0gcmVxdWVzdHMgcGVyIG1pbnV0ZSwgd2FpdGluZyAke3dhaXRUaW1lfW1zYCk7XHJcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHdhaXRUaW1lKSk7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0Q291bnQgPSAwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFJlc2V0IGNvdW50ZXIgaWYgbW9yZSB0aGFuIDEgbWludXRlIGhhcyBwYXNzZWRcclxuICAgICAgICB0aGlzLnJlcXVlc3RDb3VudCA9IDA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlUmF0ZUxpbWl0KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgZGVsYXkgPSB0aGlzLkJBU0VfREVMQVkgKiBNYXRoLnBvdygyLCB0aGlzLnJldHJ5Q291bnQpO1xyXG4gICAgY29uc3Qgaml0dGVyID0gTWF0aC5yYW5kb20oKSAqIDEwMDA7IC8vIEFkZCB1cCB0byAxIHNlY29uZCBvZiBqaXR0ZXJcclxuICAgIGNvbnN0IHRvdGFsRGVsYXkgPSBkZWxheSArIGppdHRlcjtcclxuICAgIFxyXG4gICAgY29uc29sZS53YXJuKGBSYXRlIGxpbWl0IGJhY2tvZmY6IHdhaXRpbmcgJHt0b3RhbERlbGF5fW1zIGJlZm9yZSByZXRyeSAoYXR0ZW1wdCAke3RoaXMucmV0cnlDb3VudCArIDF9KWApO1xyXG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHRvdGFsRGVsYXkpKTtcclxuICAgIFxyXG4gICAgLy8gUmVzZXQgcmVxdWVzdCBjb3VudGVycyB0byBhbGxvdyBmcmVzaCBzdGFydFxyXG4gICAgdGhpcy5yZXF1ZXN0Q291bnQgPSAwO1xyXG4gICAgdGhpcy5sYXN0UmVxdWVzdFRpbWUgPSAwO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0UHJvamVjdHMoKTogUHJvbWlzZTxab2hvUHJvamVjdFtdPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBsZXQgYWxsUHJvamVjdHM6IFpvaG9Qcm9qZWN0W10gPSBbXTtcclxuICAgICAgbGV0IHBhZ2UgPSAxO1xyXG4gICAgICBjb25zdCBwZXJQYWdlID0gMjAwO1xyXG4gICAgICBcclxuICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdChgcHJvamVjdHM/cGFnZT0ke3BhZ2V9JnBlcl9wYWdlPSR7cGVyUGFnZX1gKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IGRhdGEucHJvamVjdHM/Lm1hcCgocHJvamVjdDogYW55KSA9PiB7XHJcbiAgICAgICAgICAvLyBMb2cgdGhlIGZpcnN0IHByb2plY3QgdG8gc2VlIGF2YWlsYWJsZSBmaWVsZHNcclxuICAgICAgICAgIGlmIChwYWdlID09PSAxICYmIGFsbFByb2plY3RzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU2FtcGxlIFpvaG8gcHJvamVjdCBkYXRhOicsIEpTT04uc3RyaW5naWZ5KHByb2plY3QsIG51bGwsIDIpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJvamVjdF9pZDogcHJvamVjdC5wcm9qZWN0X2lkLFxyXG4gICAgICAgICAgICBwcm9qZWN0X25hbWU6IHByb2plY3QucHJvamVjdF9uYW1lIHx8IHByb2plY3QubmFtZSB8fCAnJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb2plY3QuZGVzY3JpcHRpb24gfHwgJycsXHJcbiAgICAgICAgICAgIHN0YXR1czogcHJvamVjdC5zdGF0dXMgfHwgJ2FjdGl2ZScsXHJcbiAgICAgICAgICAgIHN0YXJ0X2RhdGU6IHByb2plY3Quc3RhcnRfZGF0ZSB8fCAnJyxcclxuICAgICAgICAgICAgZW5kX2RhdGU6IHByb2plY3QuZW5kX2RhdGUgfHwgJycsXHJcbiAgICAgICAgICAgIGJ1ZGdldF9hbW91bnQ6IHByb2plY3QuYnVkZ2V0X2Ftb3VudCB8fCAwLFxyXG4gICAgICAgICAgICByYXRlX3Blcl9ob3VyOiBwcm9qZWN0LnJhdGVfcGVyX2hvdXIgfHwgMCxcclxuICAgICAgICAgICAgY3VzdG9tZXJfaWQ6IHByb2plY3QuY3VzdG9tZXJfaWQgfHwgJycsXHJcbiAgICAgICAgICAgIGN1c3RvbWVyX25hbWU6IHByb2plY3QuY3VzdG9tZXJfbmFtZSB8fCAnJyxcclxuICAgICAgICAgICAgc2lnbmVkX2ZlZTogdW5kZWZpbmVkLCAvLyBSZW1vdmUgWm9obyBzaWduZWQgZmVlLCBvbmx5IHVzZSB1c2VyLWVudGVyZWQgZGF0YVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KSB8fCBbXTtcclxuICAgICAgICBcclxuICAgICAgICBhbGxQcm9qZWN0cyA9IGFsbFByb2plY3RzLmNvbmNhdChwcm9qZWN0cyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UndmUgcmVhY2hlZCB0aGUgZW5kXHJcbiAgICAgICAgaWYgKHByb2plY3RzLmxlbmd0aCA8IHBlclBhZ2UpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwYWdlKys7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKGBGZXRjaGVkICR7YWxsUHJvamVjdHMubGVuZ3RofSBwcm9qZWN0cyBmcm9tIFpvaG9gKTtcclxuICAgICAgcmV0dXJuIGFsbFByb2plY3RzO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHJvamVjdHM6JywgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRQcm9qZWN0c1dpdGhSZXZlbnVlQnVkZ2V0KCk6IFByb21pc2U8Wm9ob1Byb2plY3RbXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5sb2coJ0ZldGNoaW5nIHByb2plY3RzIHdpdGggcmV2ZW51ZSBidWRnZXQgZGF0YS4uLicpO1xyXG4gICAgICBjb25zdCBwcm9qZWN0cyA9IGF3YWl0IHRoaXMuZ2V0UHJvamVjdHMoKTtcclxuICAgICAgXHJcbiAgICAgIC8vIExvZyBwcm9qZWN0cyB0aGF0IGhhdmUgcmV2ZW51ZV9idWRnZXQgZGF0YVxyXG4gICAgICBjb25zdCBwcm9qZWN0c1dpdGhSZXZlbnVlQnVkZ2V0ID0gcHJvamVjdHMuZmlsdGVyKHByb2plY3QgPT4ge1xyXG4gICAgICAgIGNvbnN0IGhhc1JldmVudWVCdWRnZXQgPSBwcm9qZWN0LnNpZ25lZF9mZWUgJiYgcHJvamVjdC5zaWduZWRfZmVlID4gMDtcclxuICAgICAgICBpZiAoaGFzUmV2ZW51ZUJ1ZGdldCkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYFByb2plY3QgJHtwcm9qZWN0LnByb2plY3RfbmFtZX0gaGFzIHJldmVudWUgYnVkZ2V0OiAkJHtwcm9qZWN0LnNpZ25lZF9mZWV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoYXNSZXZlbnVlQnVkZ2V0O1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCAke3Byb2plY3RzV2l0aFJldmVudWVCdWRnZXQubGVuZ3RofSBwcm9qZWN0cyB3aXRoIHJldmVudWUgYnVkZ2V0IGRhdGFgKTtcclxuICAgICAgcmV0dXJuIHByb2plY3RzO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHJvamVjdHMgd2l0aCByZXZlbnVlIGJ1ZGdldDonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGRlYnVnUHJvamVjdEZpZWxkcygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdEZWJ1Z2dpbmcgWm9obyBwcm9qZWN0IGZpZWxkcy4uLicpO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdCgncHJvamVjdHM/cGFnZT0xJnBlcl9wYWdlPTUnKTtcclxuICAgICAgXHJcbiAgICAgIGlmIChkYXRhLnByb2plY3RzICYmIGRhdGEucHJvamVjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdBdmFpbGFibGUgZmllbGRzIGluIFpvaG8gcHJvamVjdCByZXNwb25zZTonKTtcclxuICAgICAgICBjb25zdCBzYW1wbGVQcm9qZWN0ID0gZGF0YS5wcm9qZWN0c1swXTtcclxuICAgICAgICBPYmplY3Qua2V5cyhzYW1wbGVQcm9qZWN0KS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgICAke2tleX06ICR7c2FtcGxlUHJvamVjdFtrZXldfSAoJHt0eXBlb2Ygc2FtcGxlUHJvamVjdFtrZXldfSlgKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDaGVjayBzcGVjaWZpY2FsbHkgZm9yIHJldmVudWVfYnVkZ2V0XHJcbiAgICAgICAgaWYgKHNhbXBsZVByb2plY3QucmV2ZW51ZV9idWRnZXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYOKchSBGb3VuZCByZXZlbnVlX2J1ZGdldCBmaWVsZDogJHtzYW1wbGVQcm9qZWN0LnJldmVudWVfYnVkZ2V0fWApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygn4p2MIHJldmVudWVfYnVkZ2V0IGZpZWxkIG5vdCBmb3VuZCBpbiBab2hvIHJlc3BvbnNlJyk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnQXZhaWxhYmxlIGJ1ZGdldC1yZWxhdGVkIGZpZWxkczonKTtcclxuICAgICAgICAgIE9iamVjdC5rZXlzKHNhbXBsZVByb2plY3QpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdidWRnZXQnKSB8fCBrZXkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygncmV2ZW51ZScpKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYCAgJHtrZXl9OiAke3NhbXBsZVByb2plY3Rba2V5XX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdObyBwcm9qZWN0cyBmb3VuZCBpbiBab2hvIHJlc3BvbnNlJyk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlYnVnZ2luZyBwcm9qZWN0IGZpZWxkczonLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRQcm9qZWN0c1dpdGhFc3RpbWF0ZXMoKTogUHJvbWlzZTxab2hvUHJvamVjdFtdPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBwcm9qZWN0cyA9IGF3YWl0IHRoaXMuZ2V0UHJvamVjdHMoKTtcclxuICAgICAgXHJcbiAgICAgIC8vIEZvciB0aGUgZmlyc3QgZmV3IHByb2plY3RzLCB0cnkgdG8gZ2V0IGVzdGltYXRlcyB0byBzZWUgaWYgdGhhdCBjb250YWlucyB0aGUgc2lnbmVkIGZlZVxyXG4gICAgICBjb25zdCBwcm9qZWN0c1dpdGhFc3RpbWF0ZXMgPSBhd2FpdCBQcm9taXNlLmFsbChcclxuICAgICAgICBwcm9qZWN0cy5zbGljZSgwLCA1KS5tYXAoYXN5bmMgKHByb2plY3QpID0+IHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVzdGltYXRlcyA9IGF3YWl0IHRoaXMuZ2V0UHJvamVjdEVzdGltYXRlcyhwcm9qZWN0LnByb2plY3RfaWQpO1xyXG4gICAgICAgICAgICBjb25zdCB0b3RhbEVzdGltYXRlQW1vdW50ID0gZXN0aW1hdGVzLnJlZHVjZSgoc3VtLCBlc3RpbWF0ZSkgPT4gc3VtICsgKGVzdGltYXRlLnRvdGFsIHx8IDApLCAwKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBQcm9qZWN0ICR7cHJvamVjdC5wcm9qZWN0X25hbWV9IGVzdGltYXRlczpgLCBlc3RpbWF0ZXMubGVuZ3RoLCAndG90YWwgYW1vdW50OicsIHRvdGFsRXN0aW1hdGVBbW91bnQpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAuLi5wcm9qZWN0LFxyXG4gICAgICAgICAgICAgIHNpZ25lZF9mZWU6IHByb2plY3Quc2lnbmVkX2ZlZSB8fCB0b3RhbEVzdGltYXRlQW1vdW50IHx8IDAsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBmZXRjaGluZyBlc3RpbWF0ZXMgZm9yIHByb2plY3QgJHtwcm9qZWN0LnByb2plY3RfaWR9OmAsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIHByb2plY3Q7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFJldHVybiBhbGwgcHJvamVjdHMsIHdpdGggdGhlIGZpcnN0IDUgaGF2aW5nIHVwZGF0ZWQgc2lnbmVkIGZlZXMgZnJvbSBlc3RpbWF0ZXNcclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICAuLi5wcm9qZWN0c1dpdGhFc3RpbWF0ZXMsXHJcbiAgICAgICAgLi4ucHJvamVjdHMuc2xpY2UoNSlcclxuICAgICAgXTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHByb2plY3RzIHdpdGggZXN0aW1hdGVzOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0UHJvamVjdHNXaXRoSW52b2ljZVRvdGFscygpOiBQcm9taXNlPFpvaG9Qcm9qZWN0W10+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IFtwcm9qZWN0cywgaW52b2ljZXNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgIHRoaXMuZ2V0UHJvamVjdHMoKSxcclxuICAgICAgICB0aGlzLmdldEludm9pY2VzKCksXHJcbiAgICAgIF0pO1xyXG4gICAgICBcclxuICAgICAgLy8gQ2FsY3VsYXRlIHNpZ25lZCBmZWUgYXMgdG90YWwgb2YgYWxsIGludm9pY2VzIGZvciBlYWNoIHByb2plY3RcclxuICAgICAgY29uc3QgcHJvamVjdHNXaXRoSW52b2ljZVRvdGFscyA9IHByb2plY3RzLm1hcChwcm9qZWN0ID0+IHtcclxuICAgICAgICBjb25zdCBwcm9qZWN0SW52b2ljZXMgPSBpbnZvaWNlcy5maWx0ZXIoaW52b2ljZSA9PiBpbnZvaWNlLnByb2plY3RfaWQgPT09IHByb2plY3QucHJvamVjdF9pZCk7XHJcbiAgICAgICAgY29uc3QgdG90YWxJbnZvaWNlQW1vdW50ID0gcHJvamVjdEludm9pY2VzLnJlZHVjZSgoc3VtLCBpbnZvaWNlKSA9PiBzdW0gKyBpbnZvaWNlLmFtb3VudCwgMCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coYFByb2plY3QgJHtwcm9qZWN0LnByb2plY3RfbmFtZX0gaW52b2ljZXM6YCwgcHJvamVjdEludm9pY2VzLmxlbmd0aCwgJ3RvdGFsIGFtb3VudDonLCB0b3RhbEludm9pY2VBbW91bnQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAuLi5wcm9qZWN0LFxyXG4gICAgICAgICAgc2lnbmVkX2ZlZTogcHJvamVjdC5zaWduZWRfZmVlIHx8IHRvdGFsSW52b2ljZUFtb3VudCB8fCAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHByb2plY3RzV2l0aEludm9pY2VUb3RhbHM7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwcm9qZWN0cyB3aXRoIGludm9pY2UgdG90YWxzOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0SW52b2ljZXMoKTogUHJvbWlzZTxab2hvSW52b2ljZVtdPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZygn8J+ThCBGZXRjaGluZyBpbnZvaWNlcyBmcm9tIFpvaG8uLi4nKTtcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoJ2ludm9pY2VzJyk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBpbnZvaWNlcyA9IGRhdGEuaW52b2ljZXM/Lm1hcCgoaW52b2ljZTogYW55KSA9PiAoe1xyXG4gICAgICAgIGludm9pY2VfaWQ6IGludm9pY2UuaW52b2ljZV9pZCxcclxuICAgICAgICBwcm9qZWN0X2lkOiBpbnZvaWNlLnByb2plY3RfaWQsXHJcbiAgICAgICAgaW52b2ljZV9udW1iZXI6IGludm9pY2UuaW52b2ljZV9udW1iZXIsXHJcbiAgICAgICAgZGF0ZTogaW52b2ljZS5kYXRlLFxyXG4gICAgICAgIGFtb3VudDogaW52b2ljZS50b3RhbCxcclxuICAgICAgICBzdGF0dXM6IGludm9pY2Uuc3RhdHVzLFxyXG4gICAgICAgIGJpbGxlZF9hbW91bnQ6IGludm9pY2UuYmlsbGVkX2Ftb3VudCB8fCAwLFxyXG4gICAgICAgIHVuYmlsbGVkX2Ftb3VudDogaW52b2ljZS51bmJpbGxlZF9hbW91bnQgfHwgMCxcclxuICAgICAgfSkpIHx8IFtdO1xyXG4gICAgICBcclxuICAgICAgLy8gTG9nIGludm9pY2UgY291bnRzIGFuZCBkZXRhaWxzXHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5OKIFpvaG8gaW52b2ljZXMgZmV0Y2hlZDogJHtpbnZvaWNlcy5sZW5ndGh9IHRvdGFsIGludm9pY2VzYCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoaW52b2ljZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IHN0YXR1c0NvdW50cyA9IGludm9pY2VzLnJlZHVjZSgoYWNjOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LCBpbnY6IFpvaG9JbnZvaWNlKSA9PiB7XHJcbiAgICAgICAgICBhY2NbaW52LnN0YXR1c10gPSAoYWNjW2ludi5zdGF0dXNdIHx8IDApICsgMTtcclxuICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgbnVtYmVyPik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfk4sgSW52b2ljZSBzdGF0dXMgYnJlYWtkb3duOicsIHN0YXR1c0NvdW50cyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9nIHNhbXBsZSBpbnZvaWNlIGRhdGEgZm9yIGRlYnVnZ2luZ1xyXG4gICAgICAgIGNvbnN0IHNhbXBsZUludm9pY2UgPSBpbnZvaWNlc1swXTtcclxuICAgICAgICBjb25zb2xlLmxvZygn8J+ThCBTYW1wbGUgaW52b2ljZSBkYXRhOicsIHtcclxuICAgICAgICAgIGlkOiBzYW1wbGVJbnZvaWNlLmludm9pY2VfaWQsXHJcbiAgICAgICAgICBudW1iZXI6IHNhbXBsZUludm9pY2UuaW52b2ljZV9udW1iZXIsXHJcbiAgICAgICAgICBwcm9qZWN0OiBzYW1wbGVJbnZvaWNlLnByb2plY3RfaWQsXHJcbiAgICAgICAgICBhbW91bnQ6IHNhbXBsZUludm9pY2UuYW1vdW50LFxyXG4gICAgICAgICAgc3RhdHVzOiBzYW1wbGVJbnZvaWNlLnN0YXR1c1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gaW52b2ljZXM7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBpbnZvaWNlczonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFByb2plY3RJbnZvaWNlcyhwcm9qZWN0SWQ6IHN0cmluZyk6IFByb21pc2U8Wm9ob0ludm9pY2VbXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoYHByb2plY3RzLyR7cHJvamVjdElkfS9pbnZvaWNlc2ApO1xyXG4gICAgICByZXR1cm4gZGF0YS5pbnZvaWNlcz8ubWFwKChpbnZvaWNlOiBhbnkpID0+ICh7XHJcbiAgICAgICAgaW52b2ljZV9pZDogaW52b2ljZS5pbnZvaWNlX2lkLFxyXG4gICAgICAgIHByb2plY3RfaWQ6IGludm9pY2UucHJvamVjdF9pZCxcclxuICAgICAgICBpbnZvaWNlX251bWJlcjogaW52b2ljZS5pbnZvaWNlX251bWJlcixcclxuICAgICAgICBkYXRlOiBpbnZvaWNlLmRhdGUsXHJcbiAgICAgICAgYW1vdW50OiBpbnZvaWNlLnRvdGFsLFxyXG4gICAgICAgIHN0YXR1czogaW52b2ljZS5zdGF0dXMsXHJcbiAgICAgICAgYmlsbGVkX2Ftb3VudDogaW52b2ljZS5iaWxsZWRfYW1vdW50IHx8IDAsXHJcbiAgICAgICAgdW5iaWxsZWRfYW1vdW50OiBpbnZvaWNlLnVuYmlsbGVkX2Ftb3VudCB8fCAwLFxyXG4gICAgICB9KSkgfHwgW107XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwcm9qZWN0IGludm9pY2VzOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0UHJvamVjdERldGFpbHMocHJvamVjdElkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoYHByb2plY3RzLyR7cHJvamVjdElkfWApO1xyXG4gICAgICBjb25zb2xlLmxvZyhgUHJvamVjdCAke3Byb2plY3RJZH0gZGV0YWlsczpgLCBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKSk7XHJcbiAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHJvamVjdCBkZXRhaWxzOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRQcm9qZWN0RXN0aW1hdGVzKHByb2plY3RJZDogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoYHByb2plY3RzLyR7cHJvamVjdElkfS9lc3RpbWF0ZXNgKTtcclxuICAgICAgY29uc29sZS5sb2coYFByb2plY3QgJHtwcm9qZWN0SWR9IGVzdGltYXRlczpgLCBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKSk7XHJcbiAgICAgIHJldHVybiBkYXRhLmVzdGltYXRlcyB8fCBbXTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHByb2plY3QgZXN0aW1hdGVzOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0UHJvamVjdENvbnRyYWN0cyhwcm9qZWN0SWQ6IHN0cmluZyk6IFByb21pc2U8YW55W10+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KGBwcm9qZWN0cy8ke3Byb2plY3RJZH0vY29udHJhY3RzYCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBQcm9qZWN0ICR7cHJvamVjdElkfSBjb250cmFjdHM6YCwgSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMikpO1xyXG4gICAgICByZXR1cm4gZGF0YS5jb250cmFjdHMgfHwgW107XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwcm9qZWN0IGNvbnRyYWN0czonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIE5ldyBtZXRob2QgdG8gZ2V0IFByb2ZpdCAmIExvc3Mgc3RhdGVtZW50XHJcbiAgYXN5bmMgZ2V0UHJvZml0QW5kTG9zcyhzdGFydERhdGU6IHN0cmluZywgZW5kRGF0ZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnNvbGUuaW5mbyhg8J+TiiBGZXRjaGluZyBab2hvIFByb2ZpdCAmIExvc3MgZm9yICR7c3RhcnREYXRlfSB0byAke2VuZERhdGV9YCk7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KGByZXBvcnRzL3Byb2ZpdGFuZGxvc3M/ZnJvbV9kYXRlPSR7c3RhcnREYXRlfSZ0b19kYXRlPSR7ZW5kRGF0ZX1gKTtcclxuICAgICAgY29uc3Qgc2l6ZUJ5dGVzID0gSlNPTi5zdHJpbmdpZnkoZGF0YSB8fCB7fSkubGVuZ3RoO1xyXG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSB8fCB7fSkubGVuZ3RoO1xyXG4gICAgICBjb25zb2xlLmluZm8oYOKchSBQcm9maXQgJiBMb3NzIGRhdGEgZmV0Y2hlZCBzdWNjZXNzZnVsbHkgKGtleXM6ICR7a2V5c30sIGJ5dGVzOiAke3NpemVCeXRlc30pYCk7XHJcbiAgICAgIGlmICghZGF0YSB8fCBrZXlzID09PSAwKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdObyBkYXRhIGZvciByZXBvcnRzL3Byb2ZpdGFuZGxvc3MuIFZlcmlmeSBvcmdhbml6YXRpb24gSUQsIGRhdGUgcmFuZ2UgKDIwMjUtMDEtMDEgdG8gMjAyNS0wOC0xMyksIG9yIGRhdGEgaW4gWm9obyBkYXNoYm9hcmQuJyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgUHJvZml0ICYgTG9zczonLCBlcnJvcik7XHJcbiAgICAgIGNvbnNvbGUud2Fybign8J+OrSBQcm9maXQgJiBMb3NzIGRhdGEgdW5hdmFpbGFibGUsIHdpbGwgdXNlIGRlZmF1bHRzJyk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTmV3IG1ldGhvZCB0byBnZXQgQ2FzaCBGbG93IHN0YXRlbWVudFxyXG4gIGFzeW5jIGdldENhc2hGbG93KHN0YXJ0RGF0ZTogc3RyaW5nLCBlbmREYXRlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5pbmZvKGDwn5KwIEZldGNoaW5nIFpvaG8gQ2FzaCBGbG93IGZvciAke3N0YXJ0RGF0ZX0gdG8gJHtlbmREYXRlfWApO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdChgcmVwb3J0cy9jYXNoZmxvdz9mcm9tX2RhdGU9JHtzdGFydERhdGV9JnRvX2RhdGU9JHtlbmREYXRlfWApO1xyXG4gICAgICBjb25zdCBzaXplQnl0ZXMgPSBKU09OLnN0cmluZ2lmeShkYXRhIHx8IHt9KS5sZW5ndGg7XHJcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhIHx8IHt9KS5sZW5ndGg7XHJcbiAgICAgIGNvbnNvbGUuaW5mbyhg4pyFIENhc2ggRmxvdyBkYXRhIGZldGNoZWQgc3VjY2Vzc2Z1bGx5IChrZXlzOiAke2tleXN9LCBieXRlczogJHtzaXplQnl0ZXN9KWApO1xyXG4gICAgICBpZiAoIWRhdGEgfHwga2V5cyA9PT0gMCkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignTm8gZGF0YSBmb3IgcmVwb3J0cy9jYXNoZmxvdy4gVmVyaWZ5IG9yZ2FuaXphdGlvbiBJRCwgZGF0ZSByYW5nZSAoMjAyNS0wMS0wMSB0byAyMDI1LTA4LTEzKSwgb3IgZGF0YSBpbiBab2hvIGRhc2hib2FyZC4nKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZGF0YTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBmZXRjaGluZyBDYXNoIEZsb3c6JywgZXJyb3IpO1xyXG4gICAgICBjb25zb2xlLndhcm4oJ/Cfjq0gQ2FzaCBGbG93IGRhdGEgdW5hdmFpbGFibGUsIHdpbGwgdXNlIGRlZmF1bHRzJyk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTmV3IG1ldGhvZCB0byBnZXQgQmFsYW5jZSBTaGVldFxyXG4gIGFzeW5jIGdldEJhbGFuY2VTaGVldChkYXRlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5pbmZvKGDwn5OIIEZldGNoaW5nIFpvaG8gQmFsYW5jZSBTaGVldCBmb3IgJHtkYXRlfWApO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdChgcmVwb3J0cy9iYWxhbmNlc2hlZXQ/ZGF0ZT0ke2RhdGV9YCk7XHJcbiAgICAgIGNvbnN0IHNpemVCeXRlcyA9IEpTT04uc3RyaW5naWZ5KGRhdGEgfHwge30pLmxlbmd0aDtcclxuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEgfHwge30pLmxlbmd0aDtcclxuICAgICAgY29uc29sZS5pbmZvKGDinIUgQmFsYW5jZSBTaGVldCBkYXRhIGZldGNoZWQgc3VjY2Vzc2Z1bGx5IChrZXlzOiAke2tleXN9LCBieXRlczogJHtzaXplQnl0ZXN9KWApO1xyXG4gICAgICBpZiAoIWRhdGEgfHwga2V5cyA9PT0gMCkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignTm8gZGF0YSBmb3IgcmVwb3J0cy9iYWxhbmNlc2hlZXQuIFZlcmlmeSBvcmdhbml6YXRpb24gSUQsIGRhdGUgcmFuZ2UgKDIwMjUtMDEtMDEgdG8gMjAyNS0wOC0xMyksIG9yIGRhdGEgaW4gWm9obyBkYXNoYm9hcmQuJyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgQmFsYW5jZSBTaGVldDonLCBlcnJvcik7XHJcbiAgICAgIGNvbnNvbGUud2Fybign8J+OrSBCYWxhbmNlIFNoZWV0IGRhdGEgdW5hdmFpbGFibGUsIHdpbGwgdXNlIGRlZmF1bHRzJyk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTmV3IG1ldGhvZCB0byBnZXQgQ2hhcnQgb2YgQWNjb3VudHNcclxuICBhc3luYyBnZXRDaGFydE9mQWNjb3VudHMoKTogUHJvbWlzZTxhbnlbXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoJ2NoYXJ0b2ZhY2NvdW50cycpO1xyXG4gICAgICBjb25zb2xlLmxvZygnQ2hhcnQgb2YgQWNjb3VudHMgZGF0YTonLCBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKSk7XHJcbiAgICAgIHJldHVybiBkYXRhLmNoYXJ0b2ZhY2NvdW50cyB8fCBbXTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIENoYXJ0IG9mIEFjY291bnRzOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTmV3IG1ldGhvZCB0byBnZXQgSm91cm5hbCBFbnRyaWVzIGZvciBhIGRhdGUgcmFuZ2VcclxuICBhc3luYyBnZXRKb3VybmFsRW50cmllcyhzdGFydERhdGU6IHN0cmluZywgZW5kRGF0ZTogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoYGpvdXJuYWxlbnRyaWVzP2Zyb21fZGF0ZT0ke3N0YXJ0RGF0ZX0mdG9fZGF0ZT0ke2VuZERhdGV9YCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdKb3VybmFsIEVudHJpZXMgZGF0YTonLCBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKSk7XHJcbiAgICAgIHJldHVybiBkYXRhLmpvdXJuYWxlbnRyaWVzIHx8IFtdO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgSm91cm5hbCBFbnRyaWVzOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTmV3IG1ldGhvZCB0byBnZXQgY29tcHJlaGVuc2l2ZSBmaW5hbmNpYWwgbWV0cmljc1xyXG4gIGFzeW5jIGdldEZpbmFuY2lhbE1ldHJpY3Moc3RhcnREYXRlOiBzdHJpbmcsIGVuZERhdGU6IHN0cmluZyk6IFByb21pc2U8e1xyXG4gICAgcmV2ZW51ZTogbnVtYmVyO1xyXG4gICAgZXhwZW5zZXM6IG51bWJlcjtcclxuICAgIGdyb3NzUHJvZml0OiBudW1iZXI7XHJcbiAgICBuZXRQcm9maXQ6IG51bWJlcjtcclxuICAgIG9wZXJhdGluZ0luY29tZTogbnVtYmVyO1xyXG4gICAgY2FzaEZsb3c6IG51bWJlcjtcclxuICAgIGFjY291bnRzUmVjZWl2YWJsZTogbnVtYmVyO1xyXG4gICAgYWNjb3VudHNQYXlhYmxlOiBudW1iZXI7XHJcbiAgICBjYXNoQmFsYW5jZTogbnVtYmVyO1xyXG4gIH0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnNvbGUuaW5mbyhg8J+SsCBGZXRjaGluZyBab2hvIGZpbmFuY2lhbCBtZXRyaWNzIGZvciAke3N0YXJ0RGF0ZX0gdG8gJHtlbmREYXRlfWApO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgW3BsRGF0YSwgY2ZEYXRhLCBic0RhdGFdID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFtcclxuICAgICAgICB0aGlzLmdldFByb2ZpdEFuZExvc3Moc3RhcnREYXRlLCBlbmREYXRlKSxcclxuICAgICAgICB0aGlzLmdldENhc2hGbG93KHN0YXJ0RGF0ZSwgZW5kRGF0ZSksXHJcbiAgICAgICAgdGhpcy5nZXRCYWxhbmNlU2hlZXQoZW5kRGF0ZSlcclxuICAgICAgXSk7XHJcblxyXG4gICAgICAvLyBMb2cgcmF3IHJlc3BvbnNlIHN0YXR1cyBhbmQgYm9keSBsZW5ndGggZm9yIGVhY2ggcmVwb3J0XHJcbiAgICAgIGNvbnNvbGUuaW5mbygn8J+TiiBGaW5hbmNpYWwgcmVwb3J0cyByYXcgcmVzcG9uc2UgZGV0YWlsczonLCB7XHJcbiAgICAgICAgcHJvZml0TG9zczoge1xyXG4gICAgICAgICAgc3RhdHVzOiBwbERhdGEuc3RhdHVzLFxyXG4gICAgICAgICAgYm9keUxlbmd0aDogcGxEYXRhLnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcgPyBKU09OLnN0cmluZ2lmeShwbERhdGEudmFsdWUgfHwge30pLmxlbmd0aCA6ICdOL0EnLFxyXG4gICAgICAgICAgaGFzRGF0YTogcGxEYXRhLnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcgJiYgcGxEYXRhLnZhbHVlICYmIE9iamVjdC5rZXlzKHBsRGF0YS52YWx1ZSB8fCB7fSkubGVuZ3RoID4gMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2FzaEZsb3c6IHtcclxuICAgICAgICAgIHN0YXR1czogY2ZEYXRhLnN0YXR1cyxcclxuICAgICAgICAgIGJvZHlMZW5ndGg6IGNmRGF0YS5zdGF0dXMgPT09ICdmdWxmaWxsZWQnID8gSlNPTi5zdHJpbmdpZnkoY2ZEYXRhLnZhbHVlIHx8IHt9KS5sZW5ndGggOiAnTi9BJyxcclxuICAgICAgICAgIGhhc0RhdGE6IGNmRGF0YS5zdGF0dXMgPT09ICdmdWxmaWxsZWQnICYmIGNmRGF0YS52YWx1ZSAmJiBPYmplY3Qua2V5cyhjZkRhdGEudmFsdWUgfHwge30pLmxlbmd0aCA+IDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJhbGFuY2VTaGVldDoge1xyXG4gICAgICAgICAgc3RhdHVzOiBic0RhdGEuc3RhdHVzLFxyXG4gICAgICAgICAgYm9keUxlbmd0aDogYnNEYXRhLnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcgPyBKU09OLnN0cmluZ2lmeShic0RhdGEudmFsdWUgfHwge30pLmxlbmd0aCA6ICdOL0EnLFxyXG4gICAgICAgICAgaGFzRGF0YTogYnNEYXRhLnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcgJiYgYnNEYXRhLnZhbHVlICYmIE9iamVjdC5rZXlzKGJzRGF0YS52YWx1ZSB8fCB7fSkubGVuZ3RoID4gMFxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBDaGVjayBmb3IgNDA0IGVycm9ycyBhbmQgbG9nIHNwZWNpZmljIHdhcm5pbmdzXHJcbiAgICAgIGlmIChwbERhdGEuc3RhdHVzID09PSAncmVqZWN0ZWQnKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBwbERhdGEucmVhc29uIGFzIGFueTtcclxuICAgICAgICBpZiAoZXJyb3I/LnJlc3BvbnNlPy5zdGF0dXMgPT09IDQwNCkge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gUHJvZml0ICYgTG9zcyByZXR1cm5lZCA0MDQgLSBJbnZhbGlkIGVuZHBvaW50IC0gY2hlY2sgWm9obyBBUEkgZG9jcycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBQcm9maXQgJiBMb3NzIGRhdGEgZmFpbGVkOicsIHBsRGF0YS5yZWFzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoY2ZEYXRhLnN0YXR1cyA9PT0gJ3JlamVjdGVkJykge1xyXG4gICAgICAgIGNvbnN0IGVycm9yID0gY2ZEYXRhLnJlYXNvbiBhcyBhbnk7XHJcbiAgICAgICAgaWYgKGVycm9yPy5yZXNwb25zZT8uc3RhdHVzID09PSA0MDQpIHtcclxuICAgICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIENhc2ggRmxvdyByZXR1cm5lZCA0MDQgLSBJbnZhbGlkIGVuZHBvaW50IC0gY2hlY2sgWm9obyBBUEkgZG9jcycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBDYXNoIEZsb3cgZGF0YSBmYWlsZWQ6JywgY2ZEYXRhLnJlYXNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChic0RhdGEuc3RhdHVzID09PSAncmVqZWN0ZWQnKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBic0RhdGEucmVhc29uIGFzIGFueTtcclxuICAgICAgICBpZiAoZXJyb3I/LnJlc3BvbnNlPy5zdGF0dXMgPT09IDQwNCkge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gQmFsYW5jZSBTaGVldCByZXR1cm5lZCA0MDQgLSBJbnZhbGlkIGVuZHBvaW50IC0gY2hlY2sgWm9obyBBUEkgZG9jcycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBCYWxhbmNlIFNoZWV0IGRhdGEgZmFpbGVkOicsIGJzRGF0YS5yZWFzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRXh0cmFjdCBmaW5hbmNpYWwgbWV0cmljcyBmcm9tIHRoZSByZXNwb25zZXMgd2l0aCBmYWxsYmFja3NcclxuICAgICAgY29uc3QgcmV2ZW51ZSA9IHBsRGF0YS5zdGF0dXMgPT09ICdmdWxmaWxsZWQnID8gKHBsRGF0YS52YWx1ZT8ucmV2ZW51ZT8udG90YWwgfHwgMCkgOiAwO1xyXG4gICAgICBjb25zdCBleHBlbnNlcyA9IHBsRGF0YS5zdGF0dXMgPT09ICdmdWxmaWxsZWQnID8gKHBsRGF0YS52YWx1ZT8uZXhwZW5zZXM/LnRvdGFsIHx8IDApIDogMDtcclxuICAgICAgY29uc3QgZ3Jvc3NQcm9maXQgPSByZXZlbnVlIC0gZXhwZW5zZXM7XHJcbiAgICAgIFxyXG4gICAgICAvLyBDYWxjdWxhdGUgbmV0IHByb2ZpdCAobWF5IG5lZWQgYWRqdXN0bWVudCBiYXNlZCBvbiBhY3R1YWwgWm9obyByZXNwb25zZSBzdHJ1Y3R1cmUpXHJcbiAgICAgIGNvbnN0IG9wZXJhdGluZ0V4cGVuc2VzID0gcGxEYXRhLnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcgPyAocGxEYXRhLnZhbHVlPy5vcGVyYXRpbmdfZXhwZW5zZXM/LnRvdGFsIHx8IDApIDogMDtcclxuICAgICAgY29uc3QgbmV0UHJvZml0ID0gZ3Jvc3NQcm9maXQgLSBvcGVyYXRpbmdFeHBlbnNlcztcclxuICAgICAgY29uc3Qgb3BlcmF0aW5nSW5jb21lID0gZ3Jvc3NQcm9maXQgLSBvcGVyYXRpbmdFeHBlbnNlcztcclxuICAgICAgXHJcbiAgICAgIC8vIEV4dHJhY3QgY2FzaCBmbG93IGRhdGFcclxuICAgICAgY29uc3QgY2FzaEZsb3cgPSBjZkRhdGEuc3RhdHVzID09PSAnZnVsZmlsbGVkJyA/IChjZkRhdGEudmFsdWU/Lm5ldF9jYXNoX2Zsb3cgfHwgMCkgOiAwO1xyXG4gICAgICBjb25zdCBhY2NvdW50c1JlY2VpdmFibGUgPSBic0RhdGEuc3RhdHVzID09PSAnZnVsZmlsbGVkJyA/IChic0RhdGEudmFsdWU/LmN1cnJlbnRfYXNzZXRzPy5hY2NvdW50c19yZWNlaXZhYmxlIHx8IDApIDogMDtcclxuICAgICAgY29uc3QgYWNjb3VudHNQYXlhYmxlID0gYnNEYXRhLnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcgPyAoYnNEYXRhLnZhbHVlPy5jdXJyZW50X2xpYWJpbGl0aWVzPy5hY2NvdW50c19wYXlhYmxlIHx8IDApIDogMDtcclxuICAgICAgY29uc3QgY2FzaEJhbGFuY2UgPSBic0RhdGEuc3RhdHVzID09PSAnZnVsZmlsbGVkJyA/IChic0RhdGEudmFsdWU/LmN1cnJlbnRfYXNzZXRzPy5jYXNoX2FuZF9iYW5rIHx8IDApIDogMDtcclxuXHJcbiAgICAgIC8vIExvZyB3aGljaCBkYXRhIHNvdXJjZXMgc3VjY2VlZGVkL2ZhaWxlZFxyXG4gICAgICBjb25zb2xlLmluZm8oJ/Cfk4ogRmluYW5jaWFsIG1ldHJpY3MgZGF0YSBzb3VyY2VzOicsIHtcclxuICAgICAgICBwcm9maXRMb3NzOiBwbERhdGEuc3RhdHVzID09PSAnZnVsZmlsbGVkJyA/ICfinIUnIDogJ+KdjCcsXHJcbiAgICAgICAgY2FzaEZsb3c6IGNmRGF0YS5zdGF0dXMgPT09ICdmdWxmaWxsZWQnID8gJ+KchScgOiAn4p2MJyxcclxuICAgICAgICBiYWxhbmNlU2hlZXQ6IGJzRGF0YS5zdGF0dXMgPT09ICdmdWxmaWxsZWQnID8gJ+KchScgOiAn4p2MJ1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgcmV2ZW51ZSxcclxuICAgICAgICBleHBlbnNlcyxcclxuICAgICAgICBncm9zc1Byb2ZpdCxcclxuICAgICAgICBuZXRQcm9maXQsXHJcbiAgICAgICAgb3BlcmF0aW5nSW5jb21lLFxyXG4gICAgICAgIGNhc2hGbG93LFxyXG4gICAgICAgIGFjY291bnRzUmVjZWl2YWJsZSxcclxuICAgICAgICBhY2NvdW50c1BheWFibGUsXHJcbiAgICAgICAgY2FzaEJhbGFuY2VcclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBmZXRjaGluZyBmaW5hbmNpYWwgbWV0cmljczonLCBlcnJvcik7XHJcbiAgICAgIGNvbnNvbGUud2Fybign8J+OrSBSZXR1cm5pbmcgZGVmYXVsdCBmaW5hbmNpYWwgbWV0cmljcyBkdWUgdG8gQVBJIGZhaWx1cmUnKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFJldHVybiBkZWZhdWx0IHZhbHVlcyBpZiBBUEkgY2FsbHMgZmFpbFxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHJldmVudWU6IDAsXHJcbiAgICAgICAgZXhwZW5zZXM6IDAsXHJcbiAgICAgICAgZ3Jvc3NQcm9maXQ6IDAsXHJcbiAgICAgICAgbmV0UHJvZml0OiAwLFxyXG4gICAgICAgIG9wZXJhdGluZ0luY29tZTogMCxcclxuICAgICAgICBjYXNoRmxvdzogMCxcclxuICAgICAgICBhY2NvdW50c1JlY2VpdmFibGU6IDAsXHJcbiAgICAgICAgYWNjb3VudHNQYXlhYmxlOiAwLFxyXG4gICAgICAgIGNhc2hCYWxhbmNlOiAwXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBNZXRob2QgdG8gbWFudWFsbHkgcmVmcmVzaCB0b2tlbiAoZm9yIHRlc3RpbmcpXHJcbiAgYXN5bmMgZm9yY2VSZWZyZXNoVG9rZW4oKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBudWxsO1xyXG4gICAgdGhpcy50b2tlbkV4cGlyeSA9IDA7XHJcbiAgICB0aGlzLmxhc3RSZWZyZXNoVGltZSA9IERhdGUubm93KCk7IC8vIFRyYWNrIG1hbnVhbCByZWZyZXNoIHRpbWVcclxuICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEFjY2Vzc1Rva2VuKCk7XHJcbiAgfVxyXG5cclxuICAvLyBHZXQgdG9rZW4gc3RhdHVzIGZvciBkZWJ1Z2dpbmdcclxuICBnZXRUb2tlblN0YXR1cygpOiB7IGhhc1Rva2VuOiBib29sZWFuOyBleHBpcmVzSW46IG51bWJlcjsgaXNFeHBpcmVkOiBib29sZWFuIH0ge1xyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGhhc1Rva2VuOiAhIXRoaXMuYWNjZXNzVG9rZW4sXHJcbiAgICAgIGV4cGlyZXNJbjogdGhpcy50b2tlbkV4cGlyeSAtIG5vdyxcclxuICAgICAgaXNFeHBpcmVkOiBub3cgPj0gdGhpcy50b2tlbkV4cGlyeSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBNZXRob2QgdG8gZ2V0IGF1dG8tcmVmcmVzaCBzdGF0dXNcclxuICBnZXRBdXRvUmVmcmVzaFN0YXR1cygpOiB7IGlzQWN0aXZlOiBib29sZWFuOyBuZXh0UmVmcmVzaEluOiBudW1iZXIgfSB7XHJcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgY29uc3QgdGltZVNpbmNlTGFzdFJlZnJlc2ggPSBub3cgLSB0aGlzLmxhc3RSZWZyZXNoVGltZTtcclxuICAgIGNvbnN0IG5leHRSZWZyZXNoSW4gPSBNYXRoLm1heCgwLCB0aGlzLkFVVE9fUkVGUkVTSF9JTlRFUlZBTCAtIHRpbWVTaW5jZUxhc3RSZWZyZXNoKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaXNBY3RpdmU6ICEhdGhpcy5hdXRvUmVmcmVzaFRpbWVyLFxyXG4gICAgICBuZXh0UmVmcmVzaEluLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYyBtZXRob2QgdG8gc3RhcnQgYXV0by1yZWZyZXNoXHJcbiAgZW5hYmxlQXV0b1JlZnJlc2goKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zdGFydEF1dG9SZWZyZXNoKCk7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWMgbWV0aG9kIHRvIHN0b3AgYXV0by1yZWZyZXNoXHJcbiAgZGlzYWJsZUF1dG9SZWZyZXNoKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc3RvcEF1dG9SZWZyZXNoKCk7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWMgbWV0aG9kIHRvIGdldCBjb21wcmVoZW5zaXZlIHN0YXR1c1xyXG4gIGdldFN0YXR1cygpOiB7IFxyXG4gICAgaGFzVG9rZW46IGJvb2xlYW47IFxyXG4gICAgZXhwaXJlc0luOiBudW1iZXI7IFxyXG4gICAgaXNFeHBpcmVkOiBib29sZWFuO1xyXG4gICAgYXV0b1JlZnJlc2g6IHsgaXNBY3RpdmU6IGJvb2xlYW47IG5leHRSZWZyZXNoSW46IG51bWJlciB9O1xyXG4gIH0ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4udGhpcy5nZXRUb2tlblN0YXR1cygpLFxyXG4gICAgICBhdXRvUmVmcmVzaDogdGhpcy5nZXRBdXRvUmVmcmVzaFN0YXR1cygpLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB6b2hvU2VydmljZSA9IG5ldyBab2hvU2VydmljZSgpOyBcclxuXHJcbi8vIEV4cG9ydCB0aGUgZnVuY3Rpb25zIHRoYXQgYXJlIGJlaW5nIGltcG9ydGVkIGluIHBhZ2UudHN4XHJcbmV4cG9ydCBjb25zdCBmZXRjaFByb2plY3RzID0gYXN5bmMgKCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zb2xlLmxvZygnQ2xpZW50OiBGZXRjaGluZyBwcm9qZWN0cyBmcm9tIEFQSScpO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9wcm9qZWN0cycpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgXHJcbiAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgY29uc29sZS5sb2coJ0NsaWVudDogU3VjY2Vzc2Z1bGx5IGZldGNoZWQnLCByZXN1bHQuY291bnQsICdwcm9qZWN0cycpO1xyXG4gICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdDbGllbnQ6IEFQSSByZXR1cm5lZCBlcnJvcjonLCByZXN1bHQuZXJyb3IpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LmVycm9yKTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignQ2xpZW50OiBFcnJvciBmZXRjaGluZyBwcm9qZWN0czonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZmV0Y2hJbnZvaWNlcyA9IGFzeW5jICgpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc29sZS5sb2coJ0NsaWVudDogRmV0Y2hpbmcgaW52b2ljZXMgZnJvbSBBUEknKTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvaW52b2ljZXMnKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIFxyXG4gICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdDbGllbnQ6IFN1Y2Nlc3NmdWxseSBmZXRjaGVkJywgcmVzdWx0LmNvdW50LCAnaW52b2ljZXMnKTtcclxuICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcignQ2xpZW50OiBBUEkgcmV0dXJuZWQgZXJyb3I6JywgcmVzdWx0LmVycm9yKTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdC5lcnJvcik7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0NsaWVudDogRXJyb3IgZmV0Y2hpbmcgaW52b2ljZXM6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59OyAiXSwibmFtZXMiOlsiYXhpb3MiLCJab2hvU2VydmljZSIsImNvbnN0cnVjdG9yIiwiYWNjZXNzVG9rZW4iLCJ0b2tlbkV4cGlyeSIsInJlZnJlc2hQcm9taXNlIiwiVE9LRU5fUkVGUkVTSF9CVUZGRVIiLCJhdXRvUmVmcmVzaFRpbWVyIiwiQVVUT19SRUZSRVNIX0lOVEVSVkFMIiwibGFzdFJlZnJlc2hUaW1lIiwiQUNDT1VOVFNfQkFTRSIsInByb2Nlc3MiLCJlbnYiLCJaT0hPX0FDQ09VTlRTX0JBU0UiLCJBUElfQkFTRSIsIlpPSE9fQVBJX0JBU0UiLCJvcmdhbml6YXRpb25WYWxpZGF0ZWQiLCJyZXF1ZXN0Q291bnQiLCJsYXN0UmVxdWVzdFRpbWUiLCJNQVhfUkVRVUVTVFNfUEVSX01JTlVURSIsIk1JTl9SRVFVRVNUX0lOVEVSVkFMIiwicmV0cnlDb3VudCIsIk1BWF9SRVRSSUVTIiwiQkFTRV9ERUxBWSIsImNhY2hlZEFjY2Vzc1Rva2VuIiwiX3N0YXJ0QXV0b1JlZnJlc2giLCJjb25zb2xlIiwibG9nIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiRGF0ZSIsIm5vdyIsImZvcmNlUmVmcmVzaFRva2VuIiwiZXJyb3IiLCJfc3RvcEF1dG9SZWZyZXNoIiwiZ2V0QWNjZXNzVG9rZW4iLCJ0aW1lVW50aWxFeHBpcnkiLCJaT0hPX0ZPUkNFX1JFRlJFU0giLCJtaW51dGVzTGVmdCIsIk1hdGgiLCJyb3VuZCIsIlpPSE9fQ0xJRU5UX0lEIiwiWk9IT19DTElFTlRfU0VDUkVUIiwiWk9IT19SRUZSRVNIX1RPS0VOIiwibWlzc2luZ1ZhcnMiLCJwdXNoIiwiRXJyb3IiLCJqb2luIiwiX3BlcmZvcm1Ub2tlblJlZnJlc2hXaXRoQmFja29mZiIsInRva2VuIiwiaXNBeGlvc0Vycm9yIiwic3RhdHVzIiwicmVzcG9uc2UiLCJzdGF0dXNUZXh0IiwiZGF0YSIsIm1lc3NhZ2UiLCJoZWFkZXJzIiwicmF0ZUxpbWl0SGVhZGVycyIsIndhcm4iLCJtYXhBdHRlbXB0cyIsImF0dGVtcHQiLCJmb3JtRGF0YSIsIlVSTFNlYXJjaFBhcmFtcyIsImFwcGVuZCIsInBvc3QiLCJ0aW1lb3V0IiwiYWNjZXNzX3Rva2VuIiwiZXhwaXJlc19pbiIsInN1YnN0cmluZyIsInRvSVNPU3RyaW5nIiwic2NvcGVJbmZvIiwiY2hlY2tUb2tlblNjb3BlcyIsInNjb3BlIiwiaW5jbHVkZXMiLCJzY29wZUVyciIsImVyciIsImlzQXhpb3MiLCJ1bmRlZmluZWQiLCJkZXNjcmlwdGlvbiIsImVycm9yX2Rlc2NyaXB0aW9uIiwidG9Mb3dlckNhc2UiLCJkZWxheU1zIiwicG93IiwiZmxvb3IiLCJyYW5kb20iLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJyZWZyZXNoQWNjZXNzVG9rZW4iLCJtYWtlUmVxdWVzdCIsImVuZHBvaW50IiwiYXBwbHlSYXRlTGltaXQiLCJzdGFydHNXaXRoIiwidmFsaWRhdGVPcmdhbml6YXRpb24iLCJpbmZvIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsInRpbWVvdXRJZCIsImFib3J0IiwiZ2V0IiwicGFyYW1zIiwib3JnYW5pemF0aW9uX2lkIiwiWk9IT19PUkdBTklaQVRJT05fSUQiLCJzaWduYWwiLCJjbGVhclRpbWVvdXQiLCJheGlvc0Vycm9yIiwiY29kZSIsImhhbmRsZVJhdGVMaW1pdCIsIm5ld1Rva2VuIiwicmV0cnlSZXNwb25zZSIsInJlZnJlc2hFcnJvciIsInVybCIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcyIsIm1zZyIsIlN0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJvcmdJZCIsIm9yZ3MiLCJvcmdhbml6YXRpb25zIiwiZm91bmQiLCJzb21lIiwibyIsInRpbWVTaW5jZUxhc3RSZXF1ZXN0Iiwid2FpdFRpbWUiLCJ0aW1lU2luY2VGaXJzdFJlcXVlc3QiLCJkZWxheSIsImppdHRlciIsInRvdGFsRGVsYXkiLCJnZXRQcm9qZWN0cyIsImFsbFByb2plY3RzIiwicGFnZSIsInBlclBhZ2UiLCJwcm9qZWN0cyIsIm1hcCIsInByb2plY3QiLCJsZW5ndGgiLCJwcm9qZWN0X2lkIiwicHJvamVjdF9uYW1lIiwibmFtZSIsInN0YXJ0X2RhdGUiLCJlbmRfZGF0ZSIsImJ1ZGdldF9hbW91bnQiLCJyYXRlX3Blcl9ob3VyIiwiY3VzdG9tZXJfaWQiLCJjdXN0b21lcl9uYW1lIiwic2lnbmVkX2ZlZSIsImNvbmNhdCIsImdldFByb2plY3RzV2l0aFJldmVudWVCdWRnZXQiLCJwcm9qZWN0c1dpdGhSZXZlbnVlQnVkZ2V0IiwiZmlsdGVyIiwiaGFzUmV2ZW51ZUJ1ZGdldCIsImRlYnVnUHJvamVjdEZpZWxkcyIsInNhbXBsZVByb2plY3QiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInJldmVudWVfYnVkZ2V0IiwiZ2V0UHJvamVjdHNXaXRoRXN0aW1hdGVzIiwicHJvamVjdHNXaXRoRXN0aW1hdGVzIiwiYWxsIiwic2xpY2UiLCJlc3RpbWF0ZXMiLCJnZXRQcm9qZWN0RXN0aW1hdGVzIiwidG90YWxFc3RpbWF0ZUFtb3VudCIsInJlZHVjZSIsInN1bSIsImVzdGltYXRlIiwidG90YWwiLCJnZXRQcm9qZWN0c1dpdGhJbnZvaWNlVG90YWxzIiwiaW52b2ljZXMiLCJnZXRJbnZvaWNlcyIsInByb2plY3RzV2l0aEludm9pY2VUb3RhbHMiLCJwcm9qZWN0SW52b2ljZXMiLCJpbnZvaWNlIiwidG90YWxJbnZvaWNlQW1vdW50IiwiYW1vdW50IiwiaW52b2ljZV9pZCIsImludm9pY2VfbnVtYmVyIiwiZGF0ZSIsImJpbGxlZF9hbW91bnQiLCJ1bmJpbGxlZF9hbW91bnQiLCJzdGF0dXNDb3VudHMiLCJhY2MiLCJpbnYiLCJzYW1wbGVJbnZvaWNlIiwiaWQiLCJudW1iZXIiLCJnZXRQcm9qZWN0SW52b2ljZXMiLCJwcm9qZWN0SWQiLCJnZXRQcm9qZWN0RGV0YWlscyIsImdldFByb2plY3RDb250cmFjdHMiLCJjb250cmFjdHMiLCJnZXRQcm9maXRBbmRMb3NzIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsInNpemVCeXRlcyIsImdldENhc2hGbG93IiwiZ2V0QmFsYW5jZVNoZWV0IiwiZ2V0Q2hhcnRPZkFjY291bnRzIiwiY2hhcnRvZmFjY291bnRzIiwiZ2V0Sm91cm5hbEVudHJpZXMiLCJqb3VybmFsZW50cmllcyIsImdldEZpbmFuY2lhbE1ldHJpY3MiLCJwbERhdGEiLCJjZkRhdGEiLCJic0RhdGEiLCJhbGxTZXR0bGVkIiwicHJvZml0TG9zcyIsImJvZHlMZW5ndGgiLCJ2YWx1ZSIsImhhc0RhdGEiLCJjYXNoRmxvdyIsImJhbGFuY2VTaGVldCIsInJlYXNvbiIsInJldmVudWUiLCJleHBlbnNlcyIsImdyb3NzUHJvZml0Iiwib3BlcmF0aW5nRXhwZW5zZXMiLCJvcGVyYXRpbmdfZXhwZW5zZXMiLCJuZXRQcm9maXQiLCJvcGVyYXRpbmdJbmNvbWUiLCJuZXRfY2FzaF9mbG93IiwiYWNjb3VudHNSZWNlaXZhYmxlIiwiY3VycmVudF9hc3NldHMiLCJhY2NvdW50c19yZWNlaXZhYmxlIiwiYWNjb3VudHNQYXlhYmxlIiwiY3VycmVudF9saWFiaWxpdGllcyIsImFjY291bnRzX3BheWFibGUiLCJjYXNoQmFsYW5jZSIsImNhc2hfYW5kX2JhbmsiLCJnZXRUb2tlblN0YXR1cyIsImhhc1Rva2VuIiwiZXhwaXJlc0luIiwiaXNFeHBpcmVkIiwiZ2V0QXV0b1JlZnJlc2hTdGF0dXMiLCJ0aW1lU2luY2VMYXN0UmVmcmVzaCIsIm5leHRSZWZyZXNoSW4iLCJtYXgiLCJpc0FjdGl2ZSIsImVuYWJsZUF1dG9SZWZyZXNoIiwiZGlzYWJsZUF1dG9SZWZyZXNoIiwiZ2V0U3RhdHVzIiwiYXV0b1JlZnJlc2giLCJ6b2hvU2VydmljZSIsImZldGNoUHJvamVjdHMiLCJmZXRjaCIsInJlc3VsdCIsImpzb24iLCJzdWNjZXNzIiwiY291bnQiLCJmZXRjaEludm9pY2VzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/zoho.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/axios","vendor-chunks/next","vendor-chunks/asynckit","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/call-bind-apply-helpers","vendor-chunks/debug","vendor-chunks/get-proto","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/supports-color","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/mime-types","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/has-flag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhomepage-dashboard%2Froute&page=%2Fapi%2Fhomepage-dashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhomepage-dashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJonathan%5CDesktop%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();