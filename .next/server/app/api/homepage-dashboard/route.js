"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/homepage-dashboard/route";
exports.ids = ["app/api/homepage-dashboard/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhomepage-dashboard%2Froute&page=%2Fapi%2Fhomepage-dashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhomepage-dashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhomepage-dashboard%2Froute&page=%2Fapi%2Fhomepage-dashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhomepage-dashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_John_BillingPlatform_Billing_app_api_homepage_dashboard_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/homepage-dashboard/route.ts */ \"(rsc)/./app/api/homepage-dashboard/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/homepage-dashboard/route\",\n        pathname: \"/api/homepage-dashboard\",\n        filename: \"route\",\n        bundlePath: \"app/api/homepage-dashboard/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\John\\\\BillingPlatform\\\\Billing\\\\app\\\\api\\\\homepage-dashboard\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_John_BillingPlatform_Billing_app_api_homepage_dashboard_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/homepage-dashboard/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZob21lcGFnZS1kYXNoYm9hcmQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmhvbWVwYWdlLWRhc2hib2FyZCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmhvbWVwYWdlLWRhc2hib2FyZCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNKb2huJTVDQmlsbGluZ1BsYXRmb3JtJTVDQmlsbGluZyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDSm9obiU1Q0JpbGxpbmdQbGF0Zm9ybSU1Q0JpbGxpbmcmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2lDO0FBQzlHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vem9oby1iaWxsaW5nLXBsYXRmb3JtLz81NTZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXEpvaG5cXFxcQmlsbGluZ1BsYXRmb3JtXFxcXEJpbGxpbmdcXFxcYXBwXFxcXGFwaVxcXFxob21lcGFnZS1kYXNoYm9hcmRcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2hvbWVwYWdlLWRhc2hib2FyZC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2hvbWVwYWdlLWRhc2hib2FyZFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvaG9tZXBhZ2UtZGFzaGJvYXJkL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcSm9oblxcXFxCaWxsaW5nUGxhdGZvcm1cXFxcQmlsbGluZ1xcXFxhcHBcXFxcYXBpXFxcXGhvbWVwYWdlLWRhc2hib2FyZFxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvaG9tZXBhZ2UtZGFzaGJvYXJkL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhomepage-dashboard%2Froute&page=%2Fapi%2Fhomepage-dashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhomepage-dashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/homepage-dashboard/route.ts":
/*!*********************************************!*\
  !*** ./app/api/homepage-dashboard/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_zoho__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/zoho */ \"(rsc)/./lib/zoho.ts\");\n/* harmony import */ var _lib_clockify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/clockify */ \"(rsc)/./lib/clockify.ts\");\n\n\n\n// Force dynamic rendering to prevent static generation errors\nconst dynamic = \"force-dynamic\";\nasync function GET(request) {\n    try {\n        console.log(\"\\uD83D\\uDE80 Homepage Dashboard API called - starting data collection...\");\n        const now = new Date();\n        const currentYear = now.getFullYear();\n        const currentYearStart = new Date(currentYear, 0, 1);\n        const lastYearStart = new Date(currentYear - 1, 0, 1);\n        // Use extended date range for Clockify to include 2024 data for better metrics\n        const extendedStartDate = new Date(2024, 0, 1); // Start from January 1, 2024\n        console.log(\"\\uD83D\\uDCC5 Date ranges calculated:\", {\n            currentYear,\n            currentYearStart: currentYearStart.toISOString(),\n            lastYearStart: lastYearStart.toISOString(),\n            extendedStartDate: extendedStartDate.toISOString()\n        });\n        // Initialize data containers\n        let projects = [];\n        let invoices = [];\n        let clockifyData = null;\n        let financialMetrics = null;\n        let zohoAuthFailed = false;\n        let zohoApiCallCount = 0;\n        // Fetch Zoho data\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting Zoho data fetch...\");\n            // Track API calls\n            zohoApiCallCount++;\n            projects = await _lib_zoho__WEBPACK_IMPORTED_MODULE_1__.zohoService.getProjects();\n            zohoApiCallCount++;\n            invoices = await _lib_zoho__WEBPACK_IMPORTED_MODULE_1__.zohoService.getInvoices();\n            console.log(\"✅ Zoho data fetched:\", {\n                projectsCount: projects.length,\n                invoicesCount: invoices.length\n            });\n            // Log raw invoice data counts and details\n            if (invoices.length > 0) {\n                console.log(\"\\uD83D\\uDCCA Raw invoice data analysis:\");\n                console.log(`  - Total invoices: ${invoices.length}`);\n                // Count by status\n                const statusCounts = invoices.reduce((acc, inv)=>{\n                    acc[inv.status] = (acc[inv.status] || 0) + 1;\n                    return acc;\n                }, {});\n                console.log(\"  - Status breakdown:\", statusCounts);\n                // Count by project\n                const projectCounts = invoices.reduce((acc, inv)=>{\n                    acc[inv.project_id] = (acc[inv.project_id] || 0) + 1;\n                    return acc;\n                }, {});\n                console.log(`  - Projects with invoices: ${Object.keys(projectCounts).length}`);\n                // Amount analysis\n                const totalAmount = invoices.reduce((sum, inv)=>sum + (inv.amount || 0), 0);\n                const avgAmount = totalAmount / invoices.length;\n                console.log(`  - Total amount: $${totalAmount.toFixed(2)}`);\n                console.log(`  - Average amount: $${avgAmount.toFixed(2)}`);\n                // Sample invoice data\n                const sampleInvoice = invoices[0];\n                console.log(\"  - Sample invoice:\", {\n                    id: sampleInvoice.invoice_id,\n                    number: sampleInvoice.invoice_number,\n                    project: sampleInvoice.project_id,\n                    amount: sampleInvoice.amount,\n                    status: sampleInvoice.status,\n                    date: sampleInvoice.date\n                });\n            } else {\n                console.log(\"⚠️ No invoices found in Zoho data\");\n            }\n            // Get financial metrics for current year\n            try {\n                console.log(\"\\uD83D\\uDCB0 Fetching financial metrics...\");\n                console.log(\"\\uD83D\\uDCC5 Date range:\", {\n                    start: currentYearStart.toISOString().split(\"T\")[0],\n                    end: now.toISOString().split(\"T\")[0]\n                });\n                zohoApiCallCount++;\n                financialMetrics = await _lib_zoho__WEBPACK_IMPORTED_MODULE_1__.zohoService.getFinancialMetrics(currentYearStart.toISOString().split(\"T\")[0], now.toISOString().split(\"T\")[0]);\n                console.log(\"✅ Financial metrics loaded:\", financialMetrics);\n                // Log the full financialMetrics object after fetch to confirm values\n                console.log(\"\\uD83D\\uDCCA Full financialMetrics object:\", JSON.stringify(financialMetrics, null, 2));\n                // Check if we got meaningful data\n                if (financialMetrics?.operatingIncome === 0 && financialMetrics?.revenue === 0) {\n                    console.warn(\"⚠️ Financial metrics returned all zeros - this might indicate an issue\");\n                    console.warn(\"   - Check if Zoho Books has financial data for the date range\");\n                    console.warn(\"   - Verify OAuth scopes include ZohoBooks.reports.READ\");\n                    console.warn(\"   - Check if Reports module is enabled in your Zoho Books account\");\n                }\n                // If cashFlow is 0, log warning to verify data in Zoho\n                if (financialMetrics?.cashFlow === 0) {\n                    console.warn(\"⚠️ Cash Flow is 0 - verify data in Zoho for date range\");\n                }\n            } catch (error) {\n                console.error(\"❌ Failed to fetch financial metrics:\", error);\n                // Type guard to check if error has response property\n                const hasResponse = (err)=>{\n                    return typeof err === \"object\" && err !== null && \"response\" in err;\n                };\n                console.error(\"Error details:\", {\n                    message: error instanceof Error ? error.message : \"Unknown error\",\n                    status: hasResponse(error) ? error.response?.status : undefined,\n                    statusText: hasResponse(error) ? error.response?.statusText : undefined,\n                    data: hasResponse(error) ? error.response?.data : undefined,\n                    stack: error instanceof Error ? error.stack : undefined\n                });\n                // Provide specific guidance based on error type\n                if (hasResponse(error) && error.response?.status === 404) {\n                    console.error(\"\\uD83D\\uDD0D 404 Error: Reports endpoints not found. Check if your Zoho Books plan includes financial reporting.\");\n                } else if (hasResponse(error) && error.response?.status === 401) {\n                    console.error(\"\\uD83D\\uDD10 401 Error: Authentication failed. Check OAuth scopes and token validity.\");\n                } else if (hasResponse(error) && error.response?.status === 403) {\n                    console.error(\"\\uD83D\\uDEAB 403 Error: Access forbidden. Check if Reports module is enabled in your Zoho Books account.\");\n                } else if (hasResponse(error) && error.response?.status === 429) {\n                    console.error(\"⏰ 429 Error: Rate limited. Zoho API rate limits exceeded.\");\n                }\n                financialMetrics = {\n                    revenue: 0,\n                    expenses: 0,\n                    netProfit: 0,\n                    grossProfit: 0,\n                    operatingIncome: 0,\n                    cashFlow: 0\n                };\n            }\n        } catch (error) {\n            console.error(\"❌ Failed to fetch Zoho data:\", error);\n            // Check if it's an authentication/rate limit error\n            if (error instanceof Error) {\n                const errorMessage = error.message.toLowerCase();\n                if (errorMessage.includes(\"rate limit\") || errorMessage.includes(\"authentication\") || errorMessage.includes(\"token\")) {\n                    zohoAuthFailed = true;\n                    console.warn(\"⚠️ Zoho authentication failed due to rate limits or token issues. Showing partial data.\");\n                }\n            }\n            projects = [];\n            invoices = [];\n            financialMetrics = {\n                revenue: 0,\n                expenses: 0,\n                netProfit: 0,\n                grossProfit: 0,\n                operatingIncome: 0,\n                cashFlow: 0\n            };\n        }\n        // Log Zoho API call count for monitoring\n        console.log(`📊 Zoho API calls made in this request: ${zohoApiCallCount}`);\n        // Fetch Clockify data\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting Clockify data fetch...\");\n            console.log(\"\\uD83D\\uDD11 Environment check - CLOCKIFY_API_KEY:\", process.env.CLOCKIFY_API_KEY ? \"✅ Set\" : \"❌ Missing\");\n            console.log(\"\\uD83D\\uDD11 Environment check - CLOCKIFY_WORKSPACE_ID:\", process.env.CLOCKIFY_WORKSPACE_ID ? \"✅ Set\" : \"❌ Missing\");\n            const clockifyConfig = _lib_clockify__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getConfigurationStatus();\n            console.log(\"\\uD83D\\uDCCB Clockify config status:\", clockifyConfig);\n            if (clockifyConfig.configured) {\n                console.log(\"⏰ Clockify configured, fetching real data...\");\n                const [clockifyUser, clockifyProjects, timeEntries] = await Promise.all([\n                    _lib_clockify__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getUser(),\n                    _lib_clockify__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getProjects(),\n                    _lib_clockify__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getAllTimeEntries(extendedStartDate.toISOString(), now.toISOString())\n                ]);\n                console.log(\"\\uD83D\\uDCCA Clockify raw data received:\", {\n                    user: clockifyUser?.name || \"Unknown\",\n                    projectsCount: clockifyProjects?.length || 0,\n                    timeEntriesCount: timeEntries?.length || 0\n                });\n                // Calculate time tracking metrics\n                const totalHours = timeEntries.reduce((sum, entry)=>{\n                    const duration = entry.timeInterval?.duration || \"PT0H\";\n                    const hours = parseDuration(duration);\n                    return sum + hours;\n                }, 0);\n                const billableHours = timeEntries.filter((entry)=>entry.billable).reduce((sum, entry)=>{\n                    const duration = entry.timeInterval?.duration || \"PT0H\";\n                    const hours = parseDuration(duration);\n                    return sum + hours;\n                }, 0);\n                const efficiency = totalHours > 0 ? billableHours / totalHours : 0.85;\n                // Calculate average hourly rate\n                const billableEntries = timeEntries.filter((entry)=>entry.billable);\n                let averageHourlyRate = 125; // Default\n                if (billableEntries.length > 0) {\n                    const totalRate = billableEntries.reduce((sum, entry)=>{\n                        const rate = typeof entry.hourlyRate === \"object\" ? entry.hourlyRate.amount : entry.hourlyRate || 150;\n                        return sum + rate;\n                    }, 0);\n                    averageHourlyRate = totalRate / billableEntries.length;\n                }\n                clockifyData = {\n                    totalHours,\n                    billableHours,\n                    nonBillableHours: totalHours - billableHours,\n                    efficiency,\n                    averageHourlyRate,\n                    totalTimeValue: billableHours * averageHourlyRate,\n                    averageHoursPerProject: projects.length > 0 ? totalHours / projects.length : 0\n                };\n                console.log(\"✅ Clockify data calculated:\", clockifyData);\n                console.log(\"\\uD83D\\uDCCA Clockify billing calculations:\", {\n                    billableHours: clockifyData.billableHours,\n                    averageHourlyRate: clockifyData.averageHourlyRate,\n                    totalTimeValue: clockifyData.totalTimeValue,\n                    calculatedBilled: clockifyData.billableHours * clockifyData.averageHourlyRate * 0.7,\n                    calculatedUnbilled: clockifyData.billableHours * clockifyData.averageHourlyRate * 0.3\n                });\n            } else {\n                console.log(\"\\uD83C\\uDFAD Clockify not configured, using mock data\");\n                clockifyData = {\n                    totalHours: 28400,\n                    billableHours: 25200,\n                    nonBillableHours: 3200,\n                    efficiency: 0.89,\n                    averageHourlyRate: 125,\n                    totalTimeValue: 3150000,\n                    averageHoursPerProject: 70\n                };\n            }\n        } catch (error) {\n            console.warn(\"⚠️ Failed to fetch Clockify data, using defaults:\", error);\n            console.error(\"Clockify error details:\", {\n                message: error instanceof Error ? error.message : \"Unknown error\",\n                stack: error instanceof Error ? error.stack : undefined\n            });\n            clockifyData = {\n                totalHours: 28400,\n                billableHours: 25200,\n                nonBillableHours: 3200,\n                efficiency: 0.89,\n                averageHourlyRate: 125,\n                totalTimeValue: 3150000,\n                averageHoursPerProject: 70\n            };\n        }\n        // Calculate project metrics\n        const activeProjects = projects.filter((p)=>p.status === \"active\") || [];\n        const totalProjects = projects.length || 0;\n        // Calculate billing metrics\n        const paidInvoices = invoices.filter((inv)=>inv.status === \"paid\") || [];\n        const outstandingInvoices = invoices.filter((inv)=>inv.status === \"sent\" || inv.status === \"viewed\") || [];\n        // Calculate billing from Zoho invoices\n        const zohoTotalBilled = paidInvoices.reduce((sum, inv)=>sum + (inv.total || 0), 0);\n        const zohoTotalUnbilled = outstandingInvoices.reduce((sum, inv)=>sum + (inv.total || 0), 0);\n        // Calculate billing from Clockify time tracking (if available)\n        let clockifyTotalBilled = 0;\n        let clockifyTotalUnbilled = 0;\n        if (clockifyData && clockifyData.totalHours > 0) {\n            // Use Clockify data to calculate billable amounts\n            const clockifyBillableAmount = clockifyData.billableHours * clockifyData.averageHourlyRate;\n            // If we have Clockify data, use it as the primary source\n            // Otherwise fall back to Zoho data\n            if (clockifyData.totalHours > 0) {\n                clockifyTotalBilled = clockifyBillableAmount * 0.7; // Assume 70% of billable time is invoiced\n                clockifyTotalUnbilled = clockifyBillableAmount * 0.3; // Assume 30% is unbilled\n            }\n        }\n        // Use the higher value between Zoho and Clockify, or combine them\n        const totalBilled = Math.max(zohoTotalBilled, clockifyTotalBilled) || zohoTotalBilled;\n        const totalUnbilled = Math.max(zohoTotalUnbilled, clockifyTotalUnbilled) || zohoTotalUnbilled;\n        console.log(\"\\uD83D\\uDCB0 Final billing calculations:\", {\n            zohoTotalBilled,\n            zohoTotalUnbilled,\n            clockifyTotalBilled,\n            clockifyTotalUnbilled,\n            finalTotalBilled: totalBilled,\n            finalTotalUnbilled: totalUnbilled\n        });\n        console.log(\"\\uD83D\\uDCCA Zoho Books financial data:\", {\n            revenue: financialMetrics?.revenue,\n            expenses: financialMetrics?.expenses,\n            operatingIncome: financialMetrics?.operatingIncome,\n            grossProfit: financialMetrics?.grossProfit,\n            netProfit: financialMetrics?.netProfit,\n            cashFlow: financialMetrics?.cashFlow\n        });\n        // Use financial metrics from Zoho Books as the primary source for financial data\n        let ytdRevenue = financialMetrics?.revenue || totalBilled;\n        const ytdExpenses = financialMetrics?.expenses || 0;\n        const ytdOperatingIncome = financialMetrics?.operatingIncome || 0;\n        const ytdGrossProfit = financialMetrics?.grossProfit || 0;\n        const ytdNetProfit = financialMetrics?.netProfit || 0;\n        const ytdCashFlow = financialMetrics?.cashFlow || 0;\n        // Only use Clockify data if Zoho financial data is not available\n        if (!financialMetrics?.revenue && clockifyData && clockifyData.totalTimeValue > 0) {\n            const clockifyYtdRevenue = clockifyData.totalTimeValue;\n            ytdRevenue = clockifyYtdRevenue;\n        }\n        // Get top performing projects - ensure we always return an array\n        let topPerformingProjects = [];\n        try {\n            if (Array.isArray(projects) && projects.length > 0) {\n                topPerformingProjects = projects.filter((p)=>p.status === \"active\").sort((a, b)=>{\n                    const aRevenue = invoices.filter((inv)=>inv.project_id === a.project_id).reduce((sum, inv)=>sum + (inv.total || 0), 0);\n                    const bRevenue = invoices.filter((inv)=>inv.project_id === b.project_id).reduce((sum, inv)=>sum + (inv.total || 0), 0);\n                    return bRevenue - aRevenue;\n                }).slice(0, 5).map((p)=>p.project_code || p.project_name || \"Unknown Project\").filter(Boolean); // Remove any undefined/null values\n            }\n        } catch (error) {\n            console.warn(\"⚠️ Error calculating top performing projects, using defaults:\", error);\n            topPerformingProjects = [\n                \"Project A\",\n                \"Project B\",\n                \"Project C\"\n            ]; // Fallback\n        }\n        // Ensure we have valid arrays for all data\n        const safeDashboardData = {\n            totalProjects: totalProjects || 0,\n            totalBilled: totalBilled || 0,\n            totalUnbilled: totalUnbilled || 0,\n            activeProjects: activeProjects.length || 0,\n            totalHours: clockifyData?.totalHours || 0,\n            billableHours: clockifyData?.billableHours || 0,\n            efficiency: clockifyData?.efficiency || 0.85,\n            averageHourlyRate: clockifyData?.averageHourlyRate || 125,\n            totalTimeValue: clockifyData?.totalTimeValue || 0,\n            averageHoursPerProject: clockifyData?.averageHoursPerProject || 0,\n            topPerformingProjects: Array.isArray(topPerformingProjects) ? topPerformingProjects : [],\n            ytdRevenue: ytdRevenue || 0,\n            ytdExpenses: ytdExpenses || 0,\n            ytdProfit: (ytdRevenue || 0) - (ytdExpenses || 0),\n            ytdOperatingIncome: ytdOperatingIncome || 0,\n            ytdGrossProfit: ytdGrossProfit || 0,\n            ytdNetProfit: ytdNetProfit || 0,\n            ytdCashFlow: ytdCashFlow || 0,\n            warnings: zohoAuthFailed ? [\n                \"Zoho authentication failed due to rate limits. Showing partial data.\"\n            ] : [],\n            zohoApiCallCount\n        };\n        console.log(\"✅ Homepage dashboard data generated:\", safeDashboardData);\n        console.log(\"\\uD83D\\uDE80 Returning dashboard data to client...\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(safeDashboardData);\n    } catch (error) {\n        console.error(\"❌ Homepage Dashboard API error:\", error);\n        console.error(\"Error details:\", {\n            message: error instanceof Error ? error.message : \"Unknown error\",\n            stack: error instanceof Error ? error.stack : undefined,\n            timestamp: new Date().toISOString()\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to generate homepage dashboard data\",\n            details: error instanceof Error ? error.message : \"Unknown error\",\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n// Helper function to parse duration strings (e.g., \"PT2H30M\")\nfunction parseDuration(duration) {\n    if (!duration) return 0;\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/;\n    const match = duration.match(regex);\n    if (!match) return 0;\n    const hours = parseInt(match[1] || \"0\");\n    const minutes = parseInt(match[2] || \"0\");\n    const seconds = parseInt(match[3] || \"0\");\n    return hours + minutes / 60 + seconds / 3600;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/homepage-dashboard/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/clockify.ts":
/*!*************************!*\
  !*** ./lib/clockify.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clockifyService: () => (/* binding */ clockifyService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fetchAllClockifyTimeSummaries: () => (/* binding */ fetchAllClockifyTimeSummaries),\n/* harmony export */   fetchClockifyProjects: () => (/* binding */ fetchClockifyProjects),\n/* harmony export */   fetchClockifyTimeEntries: () => (/* binding */ fetchClockifyTimeEntries),\n/* harmony export */   fetchClockifyTimeReport: () => (/* binding */ fetchClockifyTimeReport)\n/* harmony export */ });\nclass ClockifyService {\n    constructor(){\n        this.apiKey = null;\n        this.workspaceId = null;\n        this.baseUrl = \"https://api.clockify.me/api/v1\";\n        this.reportsBaseUrl = \"https://reports.api.clockify.me/v1\" // Correct Reports API base URL\n        ;\n        this._isConfigured = false;\n        this.apiKey = process.env.CLOCKIFY_API_KEY || null;\n        this.workspaceId = process.env.CLOCKIFY_WORKSPACE_ID || null;\n        // Check if we have valid credentials\n        if (this.apiKey && this.apiKey !== \"your_clockify_api_key_here\" && this.workspaceId && this.workspaceId !== \"your_clockify_workspace_id_here\") {\n            this._isConfigured = true;\n            console.info(\"Clockify service initialized with valid credentials\");\n        } else {\n            this._isConfigured = false;\n            console.warn(\"Clockify service initialized without valid credentials - will use mock data\");\n            console.warn(\"Please set CLOCKIFY_API_KEY and CLOCKIFY_WORKSPACE_ID in your environment variables\");\n        }\n    }\n    getHeaders() {\n        if (!this.apiKey) {\n            throw new Error(\"Clockify API key not configured\");\n        }\n        return {\n            \"X-Api-Key\": this.apiKey,\n            \"Content-Type\": \"application/json\"\n        };\n    }\n    async makeRequest(endpoint, params) {\n        if (!this._isConfigured) {\n            throw new Error(\"Clockify service not properly configured\");\n        }\n        try {\n            const url = new URL(`${this.baseUrl}${endpoint}`);\n            if (params) {\n                Object.keys(params).forEach((key)=>{\n                    if (params[key] !== undefined && params[key] !== null) {\n                        url.searchParams.append(key, params[key]);\n                    }\n                });\n            }\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            console.log(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            console.log(`📡 Clockify API Response: ${response.status} ${response.statusText}`);\n            if (response.status === 401) {\n                throw new Error(\"Clockify API authentication failed - check your API key\");\n            }\n            if (response.status === 403) {\n                throw new Error(\"Clockify API access forbidden - check your workspace ID and permissions\");\n            }\n            if (response.status === 404) {\n                const errorDetails = `Endpoint not found: ${endpoint}`;\n                console.error(`❌ 404 Error Details: ${errorDetails}`);\n                console.error(`   Full URL: ${url.toString()}`);\n                console.error(`   Workspace ID: ${this.workspaceId}`);\n                console.error(`   API Key configured: ${!!this.apiKey}`);\n                throw new Error(`Clockify API error: 404 Not Found - ${errorDetails}`);\n            }\n            if (response.status === 429) {\n                throw new Error(\"Clockify API rate limit exceeded - try again later\");\n            }\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: ${endpoint}`);\n            return data;\n        } catch (error) {\n            if (error instanceof Error) {\n                console.error(`❌ Clockify API Error in ${endpoint}:`, error.message);\n                throw error;\n            }\n            throw new Error(`Clockify API request failed: ${error}`);\n        }\n    }\n    // Check if the service is properly configured\n    isConfigured() {\n        return this._isConfigured;\n    }\n    // Get configuration status for debugging\n    getConfigurationStatus() {\n        return {\n            configured: this._isConfigured,\n            hasApiKey: !!(this.apiKey && this.apiKey !== \"your_clockify_api_key_here\"),\n            hasWorkspaceId: !!(this.workspaceId && this.workspaceId !== \"your_clockify_workspace_id_here\")\n        };\n    }\n    // Alias for getConfigurationStatus to match API usage\n    getConfigStatus() {\n        return this.getConfigurationStatus();\n    }\n    // Method to set workspace ID dynamically\n    setWorkspaceId(workspaceId) {\n        this.workspaceId = workspaceId;\n        if (this.apiKey && this.apiKey !== \"your_clockify_api_key_here\") {\n            this._isConfigured = true;\n        }\n    }\n    async getUser() {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock user\");\n                return this.getMockUser();\n            }\n            const url = new URL(`${this.baseUrl}/user`);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /user`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify user:\", error);\n            console.log(\"Returning mock user due to Clockify API failure\");\n            return this.getMockUser();\n        }\n    }\n    async getWorkspaces() {\n        try {\n            return await this.makeRequest(\"/workspaces\");\n        } catch (error) {\n            console.error(\"Failed to get Clockify workspaces:\", error);\n            // Return mock workspace data when Clockify fails\n            return [\n                {\n                    id: \"mock-workspace-id\",\n                    name: \"Mock Workspace\",\n                    hourlyRate: {\n                        amount: 100,\n                        currency: \"USD\"\n                    }\n                }\n            ];\n        }\n    }\n    async getProjects() {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock projects\");\n                return this.getMockProjects();\n            }\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/projects`);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /workspaces/${this.workspaceId}/projects`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify projects:\", error);\n            console.log(\"Returning mock projects due to Clockify API failure\");\n            return this.getMockProjects();\n        }\n    }\n    async getTimeEntries(projectId, startDate, endDate) {\n        try {\n            if (!this._isConfigured) {\n                console.log(\"Clockify not configured, returning mock data\");\n                return this.getMockTimeEntries(projectId, startDate, endDate);\n            }\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/projects/${projectId}/time-entries`);\n            url.searchParams.append(\"start\", startDate);\n            url.searchParams.append(\"end\", endDate);\n            console.log(`🔍 Clockify API Request: ${url.toString()}`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`✅ Clockify API Success: /workspaces/${this.workspaceId}/projects/${projectId}/time-entries`);\n            return data;\n        } catch (error) {\n            console.error(\"Failed to get Clockify time entries:\", error);\n            console.log(\"Returning mock time entry data due to Clockify API failure\");\n            return this.getMockTimeEntries(projectId, startDate, endDate);\n        }\n    }\n    async getAllTimeEntries(startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            // First try the Reports API for bulk time entry data\n            try {\n                console.info(\"\\uD83D\\uDD04 Attempting to fetch time entries via Clockify Reports API (requires Pro plan)...\");\n                return await this.getTimeEntriesViaReports(startDate, endDate);\n            } catch (reportsError) {\n                console.warn(\"⚠️ Clockify Reports API failed, falling back to user time entries endpoint:\", {\n                    error: reportsError instanceof Error ? reportsError.message : \"Unknown error\",\n                    reason: \"Reports API may require Pro plan or may be temporarily unavailable\",\n                    fallback: \"Using user time entries endpoint instead\"\n                });\n                return await this.getTimeEntriesViaUserEndpoint(startDate, endDate);\n            }\n        } catch (error) {\n            console.error(\"❌ Failed to get all Clockify time entries:\", error);\n            // Return mock time entry data when Clockify fails\n            console.warn(\"\\uD83C\\uDFAD Returning mock time entry data due to Clockify API failure. Check your plan level and API configuration.\");\n            return [\n                {\n                    id: \"mock-time-entry-1\",\n                    description: \"Mock work session (Clockify API unavailable)\",\n                    timeInterval: {\n                        start: startDate,\n                        end: endDate,\n                        duration: \"PT8H0M\"\n                    },\n                    billable: true,\n                    userId: \"mock-user-id\",\n                    userName: \"Mock User\",\n                    projectId: \"mock-project-1\",\n                    projectName: \"Mock Project 1\"\n                }\n            ];\n        }\n    }\n    // Method to get time entries via Reports API (preferred method)\n    async getTimeEntriesViaReports(startDate, endDate) {\n        const url = new URL(`${this.reportsBaseUrl}/workspaces/${this.workspaceId}/reports/detailed`);\n        console.info(`🔍 Clockify Reports API Request: ${url.toString()}`);\n        console.info(`   Method: POST (Reports API)`);\n        console.info(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n        console.info(`   Body: ${JSON.stringify({\n            dateRangeStart: startDate,\n            dateRangeEnd: endDate,\n            detailedFilter: {\n                pageSize: 1000,\n                sortColumn: \"DATE\"\n            }\n        })}`);\n        const response = await fetch(url.toString(), {\n            method: \"POST\",\n            headers: {\n                ...this.getHeaders(),\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                dateRangeStart: startDate,\n                dateRangeEnd: endDate,\n                detailedFilter: {\n                    pageSize: 1000,\n                    sortColumn: \"DATE\"\n                }\n            })\n        });\n        console.info(`📡 Clockify Reports API Response: ${response.status} ${response.statusText}`);\n        if (response.status === 401) {\n            throw new Error(\"Clockify API authentication failed - check your API key\");\n        }\n        if (response.status === 403) {\n            throw new Error(\"Clockify API access forbidden - check your workspace ID and permissions. Note: Detailed reports require Pro plan or higher.\");\n        }\n        if (response.status === 404) {\n            const errorDetails = `Reports endpoint not found: /workspaces/${this.workspaceId}/reports/detailed`;\n            console.error(`❌ 404 Error Details: ${errorDetails}`);\n            console.error(`   Full URL: ${url.toString()}`);\n            console.error(`   Workspace ID: ${this.workspaceId}`);\n            console.error(`   API Key configured: ${!!this.apiKey}`);\n            console.error(`   Note: This endpoint requires Clockify Pro plan or higher for detailed reports`);\n            throw new Error(`Clockify API error: 404 Not Found - ${errorDetails}. This endpoint requires Pro plan or higher.`);\n        }\n        if (response.status === 405) {\n            throw new Error(\"Clockify API method not allowed - this endpoint requires POST method\");\n        }\n        if (response.status === 429) {\n            throw new Error(\"Clockify API rate limit exceeded - try again later\");\n        }\n        if (!response.ok) {\n            const errorText = await response.text().catch(()=>\"Unknown error\");\n            console.error(`Clockify Reports API error response body: ${errorText}`);\n            throw new Error(`Clockify API error: ${response.status} ${response.statusText} - ${errorText}`);\n        }\n        const data = await response.json();\n        console.info(`✅ Clockify Reports API Success: /workspaces/${this.workspaceId}/reports/detailed`);\n        // Transform the reports data to match our expected time entry format\n        if (data.timeentries && Array.isArray(data.timeentries)) {\n            console.info(`📊 Processing ${data.timeentries.length} time entries from Reports API`);\n            return data.timeentries.map((entry, index)=>{\n                try {\n                    // Handle duration conversion - Reports API returns duration in seconds as number\n                    let duration = \"PT0H0M\";\n                    // First try to use the duration field if it's valid\n                    if (entry.duration !== undefined && entry.duration !== null) {\n                        if (typeof entry.duration === \"number\" && entry.duration > 0) {\n                            // Convert seconds to ISO 8601 duration format\n                            const hours = Math.floor(entry.duration / 3600);\n                            const minutes = Math.floor(entry.duration % 3600 / 60);\n                            duration = `PT${hours}H${minutes}M`;\n                        } else if (typeof entry.duration === \"string\" && entry.duration !== \"PT0H0M\") {\n                            // If it's already a string and not zero, use it directly\n                            duration = entry.duration;\n                        }\n                    }\n                    // If duration is still zero, calculate it from start and end times\n                    if (duration === \"PT0H0M\" && entry.timeInterval?.start && entry.timeInterval?.end) {\n                        try {\n                            const startTime = new Date(entry.timeInterval.start);\n                            const endTime = new Date(entry.timeInterval.end);\n                            if (!isNaN(startTime.getTime()) && !isNaN(endTime.getTime()) && endTime > startTime) {\n                                const diffMs = endTime.getTime() - startTime.getTime();\n                                const diffHours = diffMs / (1000 * 60 * 60);\n                                const hours = Math.floor(diffHours);\n                                const minutes = Math.floor((diffHours - hours) * 60);\n                                duration = `PT${hours}H${minutes}M`;\n                            }\n                        } catch (timeError) {\n                            console.warn(`⚠️ Error calculating duration from start/end times for entry ${index}:`, timeError);\n                        }\n                    }\n                    // Handle undefined IDs - generate a fallback ID if needed\n                    const entryId = entry.id || `reports-entry-${index}-${Date.now()}`;\n                    // Log sample entry for debugging (first few entries)\n                    if (index < 3) {\n                        console.info(`📝 Sample entry ${index}:`, {\n                            id: entryId,\n                            duration: entry.duration,\n                            convertedDuration: duration,\n                            projectId: entry.projectId,\n                            userId: entry.userId\n                        });\n                    }\n                    return {\n                        id: entryId,\n                        description: entry.description || \"No description\",\n                        timeInterval: {\n                            start: entry.timeInterval?.start || entry.start,\n                            end: entry.timeInterval?.end || entry.end,\n                            duration: duration\n                        },\n                        billable: entry.billable || false,\n                        userId: entry.userId || \"unknown-user\",\n                        userName: entry.userName || \"Unknown User\",\n                        projectId: entry.projectId || \"unknown-project\",\n                        projectName: entry.projectName || \"Unknown Project\",\n                        hourlyRate: entry.hourlyRate || 0\n                    };\n                } catch (entryError) {\n                    console.error(`❌ Error processing time entry ${index}:`, entryError);\n                    console.error(`   Raw entry data:`, entry);\n                    // Return a safe fallback entry\n                    return {\n                        id: `error-entry-${index}-${Date.now()}`,\n                        description: \"Error processing entry\",\n                        timeInterval: {\n                            start: startDate,\n                            end: endDate,\n                            duration: \"PT0H0M\"\n                        },\n                        billable: false,\n                        userId: \"error-user\",\n                        userName: \"Error User\",\n                        projectId: \"error-project\",\n                        projectName: \"Error Project\",\n                        hourlyRate: 0\n                    };\n                }\n            }).filter((entry)=>entry !== null); // Remove any null entries\n        }\n        console.warn(\"⚠️ No time entries found in Reports API response\");\n        return [];\n    }\n    // Fallback method to get time entries via user endpoint (GET method)\n    async getTimeEntriesViaUserEndpoint(startDate, endDate) {\n        try {\n            // Get the current user first\n            const user = await this.getUser();\n            if (!user?.id) {\n                throw new Error(\"Could not get current user for time entries\");\n            }\n            // Use GET method with query parameters - this is the correct way to fetch time entries\n            const url = new URL(`${this.baseUrl}/workspaces/${this.workspaceId}/user/${user.id}/time-entries`);\n            url.searchParams.set(\"start\", startDate);\n            url.searchParams.set(\"end\", endDate);\n            console.info(`🔍 Clockify User Time Entries API Request (Fallback): ${url.toString()}`);\n            console.info(`   Method: GET (User Time Entries - Fallback from Reports API)`);\n            console.info(`   Headers: ${JSON.stringify(this.getHeaders())}`);\n            console.info(`   Note: Using fallback method because Reports API failed or requires Pro plan`);\n            const response = await fetch(url.toString(), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            console.info(`📡 Clockify User Time Entries API Response: ${response.status} ${response.statusText}`);\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                console.error(`Clockify User Time Entries API error response body: ${errorText}`);\n                throw new Error(`Clockify User Time Entries API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const data = await response.json();\n            console.info(`✅ Clockify User Time Entries API Success (Fallback): /workspaces/${this.workspaceId}/user/${user.id}/time-entries`);\n            console.info(`   Retrieved ${data?.length || 0} time entries via fallback method`);\n            // Transform the data to match our expected format\n            if (Array.isArray(data)) {\n                return data.map((entry, index)=>{\n                    try {\n                        // Handle duration conversion - User API might also return duration as number\n                        let duration = \"PT0H0M\";\n                        // First try to use the duration field if it's valid\n                        if (entry.duration !== undefined && entry.duration !== null) {\n                            if (typeof entry.duration === \"number\" && entry.duration > 0) {\n                                // Convert seconds to ISO 8601 duration format\n                                const hours = Math.floor(entry.duration / 3600);\n                                const minutes = Math.floor(entry.duration % 3600 / 60);\n                                duration = `PT${hours}H${minutes}M`;\n                            } else if (typeof entry.duration === \"string\" && entry.duration !== \"PT0H0M\") {\n                                // If it's already a string and not zero, use it directly\n                                duration = entry.duration;\n                            }\n                        }\n                        // If duration is still zero, calculate it from start and end times\n                        if (duration === \"PT0H0M\" && entry.timeInterval?.start && entry.timeInterval?.end) {\n                            try {\n                                const startTime = new Date(entry.timeInterval.start);\n                                const endTime = new Date(entry.timeInterval.end);\n                                if (!isNaN(startTime.getTime()) && !isNaN(endTime.getTime()) && endTime > startTime) {\n                                    const diffMs = endTime.getTime() - startTime.getTime();\n                                    const diffHours = diffMs / (1000 * 60 * 60);\n                                    const hours = Math.floor(diffHours);\n                                    const minutes = Math.floor((diffHours - hours) * 60);\n                                    duration = `PT${hours}H${minutes}M`;\n                                }\n                            } catch (timeError) {\n                                console.warn(`⚠️ Error calculating duration from start/end times for fallback entry ${index}:`, timeError);\n                            }\n                        }\n                        // Handle undefined IDs - generate a fallback ID if needed\n                        const entryId = entry.id || `user-entry-${index}-${Date.now()}`;\n                        // Log sample entry for debugging (first few entries)\n                        if (index < 3) {\n                            console.info(`📝 Fallback entry ${index}:`, {\n                                id: entryId,\n                                duration: entry.duration,\n                                convertedDuration: duration,\n                                projectId: entry.projectId,\n                                userId: entry.userId\n                            });\n                        }\n                        return {\n                            id: entryId,\n                            description: entry.description || \"No description\",\n                            timeInterval: {\n                                start: entry.timeInterval?.start || entry.start,\n                                end: entry.timeInterval?.end || entry.end,\n                                duration: duration\n                            },\n                            billable: entry.billable || false,\n                            userId: entry.userId || \"unknown-user\",\n                            userName: entry.userName || \"Unknown User\",\n                            projectId: entry.projectId || \"unknown-project\",\n                            projectName: entry.projectName || \"Unknown Project\",\n                            hourlyRate: entry.hourlyRate || 0\n                        };\n                    } catch (entryError) {\n                        console.error(`❌ Error processing fallback time entry ${index}:`, entryError);\n                        console.error(`   Raw entry data:`, entry);\n                        // Return a safe fallback entry\n                        return {\n                            id: `error-fallback-${index}-${Date.now()}`,\n                            description: \"Error processing fallback entry\",\n                            timeInterval: {\n                                start: startDate,\n                                end: endDate,\n                                duration: \"PT0H0M\"\n                            },\n                            billable: false,\n                            userId: \"error-user\",\n                            userName: \"Error User\",\n                            projectId: \"error-project\",\n                            projectName: \"Error Project\",\n                            hourlyRate: 0\n                        };\n                    }\n                }).filter((entry)=>entry !== null); // Remove any null entries\n            }\n            return [];\n        } catch (error) {\n            console.error(\"Failed to get time entries via user endpoint (fallback):\", error);\n            throw error;\n        }\n    }\n    async getProjectTimeReport(projectId, startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const timeEntries = await this.getTimeEntries(projectId, startDate, endDate);\n            const project = await this.getProjects().then((projects)=>projects.find((p)=>p.id === projectId));\n            if (!project) {\n                throw new Error(\"Project not found\");\n            }\n            const totalHours = timeEntries.reduce((sum, entry)=>{\n                const duration = entry.timeInterval.duration;\n                const hours = this.parseDuration(duration);\n                return sum + hours;\n            }, 0);\n            const billableHours = timeEntries.filter((entry)=>entry.billable).reduce((sum, entry)=>{\n                const duration = entry.timeInterval.duration;\n                const hours = this.parseDuration(duration);\n                return sum + hours;\n            }, 0);\n            const nonBillableHours = totalHours - billableHours;\n            return {\n                projectId,\n                projectName: project.name,\n                totalHours,\n                billableHours,\n                nonBillableHours,\n                totalAmount: totalHours * (typeof project.hourlyRate === \"object\" ? project.hourlyRate.amount : project.hourlyRate || 0),\n                billableAmount: billableHours * (typeof project.hourlyRate === \"object\" ? project.hourlyRate.amount : project.hourlyRate || 0),\n                nonBillableAmount: nonBillableHours * (typeof project.hourlyRate === \"object\" ? project.hourlyRate.amount : project.hourlyRate || 0),\n                entries: timeEntries,\n                period: {\n                    start: startDate,\n                    end: endDate\n                }\n            };\n        } catch (error) {\n            console.error(\"Failed to get project time report:\", error);\n            return null;\n        }\n    }\n    async getAllProjectsTimeSummary(startDate, endDate) {\n        try {\n            if (!this.workspaceId) {\n                throw new Error(\"Workspace ID not configured\");\n            }\n            const projects = await this.getProjects();\n            const reports = [];\n            for (const project of projects){\n                const report = await this.getProjectTimeReport(project.id, startDate, endDate);\n                if (report) {\n                    reports.push(report);\n                }\n            }\n            return reports;\n        } catch (error) {\n            console.error(\"Failed to get all projects time summary:\", error);\n            return [];\n        }\n    }\n    // Helper method to parse ISO 8601 duration to hours\n    parseDuration(duration) {\n        const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || \"0\");\n        const minutes = parseInt(match[2] || \"0\");\n        const seconds = parseInt(match[3] || \"0\");\n        return hours + minutes / 60 + seconds / 3600;\n    }\n    // Enhanced method to generate mock time entries\n    getMockTimeEntries(projectId, startDate, endDate) {\n        return [\n            {\n                id: `mock-${projectId}-1`,\n                description: \"Mock project work\",\n                timeInterval: {\n                    start: startDate,\n                    end: endDate,\n                    duration: \"PT8H0M\"\n                },\n                billable: true,\n                userId: \"mock-user-id\",\n                userName: \"Mock User\",\n                projectId: projectId,\n                projectName: \"Mock Project\"\n            }\n        ];\n    }\n    // Enhanced method to generate mock projects\n    getMockProjects() {\n        return [\n            {\n                id: \"mock-project-1\",\n                name: \"Mock Project 1\",\n                workspaceId: \"mock-workspace\",\n                clientId: \"mock-client-1\",\n                clientName: \"Mock Client 1\",\n                isPublic: true,\n                isTemplate: false,\n                color: \"#000000\",\n                billable: true,\n                public: true,\n                archived: false,\n                status: \"ACTIVE\",\n                budget: 50000,\n                hourlyRate: {\n                    amount: 150,\n                    currency: \"USD\"\n                }\n            }\n        ];\n    }\n    // Enhanced method to generate mock user\n    getMockUser() {\n        return {\n            id: \"mock-user-id\",\n            email: \"mock@example.com\",\n            name: \"Mock User\",\n            profilePicture: \"\",\n            status: \"ACTIVE\",\n            activeWorkspace: \"mock-workspace\",\n            defaultWorkspace: \"mock-workspace\"\n        };\n    }\n    // Data Import Methods - NEW: Import time entries to database\n    async importTimeEntries(startDate, endDate) {\n        try {\n            console.log(\"\\uD83D\\uDD04 Starting Clockify time entries import...\");\n            console.log(`📅 Date range: ${startDate} to ${endDate}`);\n            // Get all time entries for the date range\n            const timeEntries = await this.getTimeEntries(\"\", startDate, endDate);\n            console.log(`📊 Found ${timeEntries.length} time entries to process`);\n            if (timeEntries.length === 0) {\n                console.log(\"⚠️ No time entries found for the specified date range\");\n                return {\n                    success: true,\n                    recordsImported: 0,\n                    errors: [],\n                    summary: {\n                        totalEntries: 0,\n                        billableHours: 0,\n                        nonBillableHours: 0,\n                        totalCost: 0\n                    }\n                };\n            }\n            // Get projects and users for mapping\n            const [projects, users] = await Promise.all([\n                this.getProjects(),\n                this.getWorkspaces().then((workspaces)=>workspaces.length > 0 ? this.getUsers(workspaces[0].id) : [])\n            ]);\n            console.log(`📋 Retrieved ${projects.length} projects and ${users.length} users for mapping`);\n            let recordsImported = 0;\n            const errors = [];\n            let totalBillableHours = 0;\n            let totalNonBillableHours = 0;\n            let totalCost = 0;\n            // Process each time entry\n            for (const entry of timeEntries){\n                try {\n                    // Find user and project details\n                    const user = users.find((u)=>u.id === entry.userId);\n                    const project = projects.find((p)=>p.id === entry.projectId);\n                    if (!user || !project) {\n                        const errorMsg = `Missing user (${entry.userId}) or project (${entry.projectId}) for entry ${entry.id}`;\n                        console.warn(`⚠️ ${errorMsg}`);\n                        errors.push(errorMsg);\n                        continue;\n                    }\n                    // Parse duration to hours\n                    const hours = this.parseDuration(entry.timeInterval.duration);\n                    const billableHours = entry.billable ? hours : 0;\n                    const nonBillableHours = entry.billable ? 0 : hours;\n                    // Calculate costs (using project hourly rate if available)\n                    const hourlyRate = typeof project.hourlyRate === \"object\" ? project.hourlyRate.amount : project.hourlyRate || 0;\n                    const totalCostForEntry = hours * hourlyRate;\n                    // Update totals\n                    totalBillableHours += billableHours;\n                    totalNonBillableHours += nonBillableHours;\n                    totalCost += totalCostForEntry;\n                    // Log successful processing\n                    console.log(`✅ Processed entry: ${user.name} - ${project.name} - ${hours.toFixed(2)}h (${entry.billable ? \"Billable\" : \"Non-billable\"})`);\n                    recordsImported++;\n                } catch (entryError) {\n                    const errorMsg = `Error processing entry ${entry.id}: ${entryError}`;\n                    console.error(`❌ ${errorMsg}`);\n                    errors.push(errorMsg);\n                }\n            }\n            const summary = {\n                totalEntries: timeEntries.length,\n                billableHours: totalBillableHours,\n                nonBillableHours: totalNonBillableHours,\n                totalCost: totalCost\n            };\n            console.log(`📊 Import completed: ${recordsImported}/${timeEntries.length} entries processed successfully`);\n            console.log(`💰 Summary: ${totalBillableHours.toFixed(2)} billable hours, ${totalNonBillableHours.toFixed(2)} non-billable hours, $${totalCost.toFixed(2)} total cost`);\n            if (errors.length > 0) {\n                console.warn(`⚠️ ${errors.length} errors encountered during import`);\n            }\n            return {\n                success: recordsImported > 0,\n                recordsImported,\n                errors,\n                summary\n            };\n        } catch (error) {\n            console.error(\"❌ Clockify time entries import failed:\", error);\n            return {\n                success: false,\n                recordsImported: 0,\n                errors: [\n                    error instanceof Error ? error.message : \"Unknown error\"\n                ],\n                summary: {\n                    totalEntries: 0,\n                    billableHours: 0,\n                    nonBillableHours: 0,\n                    totalCost: 0\n                }\n            };\n        }\n    }\n    // Enhanced method to get users for a workspace\n    async getUsers(workspaceId) {\n        try {\n            if (!this.apiKey) {\n                throw new Error(\"API key not configured\");\n            }\n            const url = `${this.baseUrl}/workspaces/${workspaceId}/users`;\n            console.info(`🔍 Clockify Users API Request: ${url}`);\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`Clockify API error: ${response.status} ${response.statusText}`);\n            }\n            const users = await response.json();\n            console.info(`✅ Retrieved ${users.length} users from workspace ${workspaceId}`);\n            return users;\n        } catch (error) {\n            console.error(\"Failed to get users:\", error);\n            // Return mock users as fallback\n            return [\n                this.getMockUser()\n            ];\n        }\n    }\n}\n// Create the service instance\nconst clockifyService = new ClockifyService();\n// Export the service instance as both default and named export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clockifyService);\n\n// Export convenience functions\nconst fetchClockifyProjects = async ()=>{\n    try {\n        return await clockifyService.getProjects();\n    } catch (error) {\n        console.error(\"Error fetching Clockify projects:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeEntries = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getTimeEntries(projectId, startDate || \"\", endDate || \"\");\n    } catch (error) {\n        console.error(\"Error fetching Clockify time entries:\", error);\n        return [];\n    }\n};\nconst fetchClockifyTimeReport = async (projectId, startDate, endDate)=>{\n    try {\n        return await clockifyService.getProjectTimeReport(projectId, startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time report:\", error);\n        return null;\n    }\n};\nconst fetchAllClockifyTimeSummaries = async (startDate, endDate)=>{\n    try {\n        return await clockifyService.getAllProjectsTimeSummary(startDate, endDate);\n    } catch (error) {\n        console.error(\"Error fetching Clockify time summaries:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/clockify.ts\n");

/***/ }),

/***/ "(rsc)/./lib/zoho.ts":
/*!*********************!*\
  !*** ./lib/zoho.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchInvoices: () => (/* binding */ fetchInvoices),\n/* harmony export */   fetchProjects: () => (/* binding */ fetchProjects),\n/* harmony export */   zohoService: () => (/* binding */ zohoService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var p_limit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-limit */ \"(rsc)/./node_modules/p-limit/index.js\");\n/* harmony import */ var p_limit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(p_limit__WEBPACK_IMPORTED_MODULE_0__);\n\n\n// Type guard for errors with response property\nconst hasResponse = (err)=>{\n    return typeof err === \"object\" && err !== null && \"response\" in err;\n};\nclass ZohoService {\n    constructor(){\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.refreshPromise = null;\n        this.TOKEN_REFRESH_BUFFER = 10 * 60 * 1000 // 10 minutes buffer (increased for better caching)\n        ;\n        this.autoRefreshTimer = null;\n        this.AUTO_REFRESH_INTERVAL = 45 * 60 * 1000 // 45 minutes\n        ;\n        this.lastRefreshTime = 0 // Track when auto-refresh was last triggered\n        ;\n        this.ACCOUNTS_BASE = process.env.ZOHO_ACCOUNTS_BASE || \"https://accounts.zoho.com\";\n        this.API_BASE = process.env.ZOHO_API_BASE || \"https://www.zohoapis.com\";\n        this.organizationValidated = false;\n        // Rate limiting properties\n        this.requestCount = 0;\n        this.lastRequestTime = 0;\n        this.MAX_REQUESTS_PER_MINUTE = 80 // Conservative limit (Zoho allows 100, we use 80)\n        ;\n        this.MIN_REQUEST_INTERVAL = 2000 // 2 seconds between requests (reduced for better performance)\n        ;\n        this.retryCount = 0;\n        this.MAX_RETRIES = 5 // Increased from 3 to 5\n        ;\n        this.BASE_DELAY = 5000 // Increased from 2000 to 5000ms base delay for exponential backoff\n        ;\n        this.cachedAccessToken = null // Fallback cached token\n        ;\n        // p-limit rate limiter for concurrent API calls\n        this.rateLimiter = p_limit__WEBPACK_IMPORTED_MODULE_0___default()(50) // Limit to 50 concurrent calls\n        ;\n        // Start automatic token refresh\n        this._startAutoRefresh();\n        console.log(`Zoho API base: ${this.API_BASE} | Accounts base: ${this.ACCOUNTS_BASE}`);\n    }\n    _startAutoRefresh() {\n        // Clear any existing timer\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n        }\n        // Set up automatic refresh every 45 minutes\n        this.autoRefreshTimer = setInterval(async ()=>{\n            try {\n                console.log(\"Auto-refreshing Zoho token (45-minute interval)...\");\n                this.lastRefreshTime = Date.now(); // Track when refresh was triggered\n                await this.forceRefreshToken();\n                console.log(\"Auto-refresh completed successfully\");\n            } catch (error) {\n                console.error(\"Auto-refresh failed:\", error);\n            }\n        }, this.AUTO_REFRESH_INTERVAL);\n        // Set initial refresh time\n        this.lastRefreshTime = Date.now();\n        console.log(\"Automatic Zoho token refresh started (every 45 minutes)\");\n    }\n    _stopAutoRefresh() {\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n            this.autoRefreshTimer = null;\n            console.log(\"Automatic Zoho token refresh stopped\");\n        }\n    }\n    async getAccessToken() {\n        try {\n            const now = Date.now();\n            const timeUntilExpiry = this.tokenExpiry - now;\n            // Check if we have a valid token with sufficient buffer time\n            if (this.accessToken && timeUntilExpiry > this.TOKEN_REFRESH_BUFFER && process.env.ZOHO_FORCE_REFRESH !== \"true\") {\n                const minutesLeft = Math.round(timeUntilExpiry / 60000);\n                console.log(`🔐 Using cached token (expires in ${minutesLeft} minutes)`);\n                return this.accessToken;\n            }\n            // Log token status for debugging\n            if (this.accessToken && timeUntilExpiry > 0) {\n                const minutesLeft = Math.round(timeUntilExpiry / 60000);\n                console.log(`⚠️ Token expires soon (${minutesLeft} minutes), refreshing proactively`);\n            } else if (this.accessToken) {\n                console.log(\"\\uD83D\\uDD04 Token expired, refreshing...\");\n            } else {\n                console.log(\"\\uD83C\\uDD95 No token available, obtaining new one...\");\n            }\n            console.log(\"Token expired or missing, refreshing...\");\n            // Clear any existing token\n            this.accessToken = null;\n            this.tokenExpiry = 0;\n            if (false) {}\n            // Ensure only one refresh happens at a time across concurrent requests\n            if (!this.refreshPromise) {\n                this.refreshPromise = this._performTokenRefreshWithBackoff();\n            }\n            const token = await this.refreshPromise;\n            // Clear the in-flight promise after completion\n            this.refreshPromise = null;\n            return token;\n        } catch (error) {\n            console.error(\"Error refreshing Zoho access token:\", error);\n            // Log specific error details for debugging\n            if (axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(error)) {\n                console.error(\"Axios error details:\", {\n                    status: hasResponse(error) ? error.response?.status : undefined,\n                    statusText: hasResponse(error) ? error.response?.statusText : undefined,\n                    data: hasResponse(error) ? error.response?.data : undefined,\n                    message: error.message,\n                    headers: hasResponse(error) ? error.response?.headers : undefined // Log headers for rate limit info\n                });\n                // Log rate limit headers if available\n                if (hasResponse(error) && error.response?.headers) {\n                    const rateLimitHeaders = {\n                        \"X-Rate-Limit\": error.response.headers[\"x-rate-limit\"],\n                        \"X-Rate-Limit-Remaining\": error.response.headers[\"x-rate-limit-remaining\"],\n                        \"X-Rate-Limit-Reset\": error.response.headers[\"x-rate-limit-reset\"],\n                        \"Retry-After\": error.response.headers[\"retry-after\"]\n                    };\n                    console.error(\"Rate limit headers:\", rateLimitHeaders);\n                }\n            }\n            // Try to fall back to cached token if available\n            if (this.cachedAccessToken) {\n                console.warn(\"Falling back to cached access token due to refresh failure\");\n                return this.cachedAccessToken;\n            }\n            throw new Error(`Failed to authenticate with Zoho: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    // Perform the token refresh with form-encoded body and improved exponential backoff\n    async _performTokenRefreshWithBackoff() {\n        const maxAttempts = 5; // Increased from 3 to 5\n        for(let attempt = 1; attempt <= maxAttempts; attempt++){\n            try {\n                const formData = new URLSearchParams();\n                formData.append(\"refresh_token\", \"1000.347acbb43b4a925483b2a29677f38c00.1d602040864cf160552f3499af5e86d9\" || 0);\n                formData.append(\"client_id\", \"1000.8RL8WMTDXS0WIP2EJF2XUS6NDSLQEP\" || 0);\n                formData.append(\"client_secret\", \"8a7ee3c04f0a0d860dd215c4449deab9bf15d1d00b\" || 0);\n                formData.append(\"grant_type\", \"refresh_token\");\n                const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(`${this.ACCOUNTS_BASE}/oauth/v2/token`, formData, {\n                    headers: {\n                        \"Content-Type\": \"application/x-www-form-urlencoded\"\n                    },\n                    timeout: 15000\n                });\n                if (!response.data.access_token) {\n                    throw new Error(\"No access token received from Zoho\");\n                }\n                // Cache the successful token and expiry information\n                this.accessToken = response.data.access_token;\n                this.tokenExpiry = Date.now() + response.data.expires_in * 1000;\n                this.lastRefreshTime = Date.now();\n                // Cache the successful token as fallback\n                this.cachedAccessToken = response.data.access_token;\n                console.log(`Token refreshed successfully. Expires in ${Math.round(response.data.expires_in / 60)} minutes`);\n                console.log(\"Zoho token refresh response:\", response.data);\n                // Log token caching details\n                console.log(`🔐 Token cached: access_token=${this.accessToken.substring(0, 10)}..., expires_in=${response.data.expires_in}s, expiry=${new Date(this.tokenExpiry).toISOString()}`);\n                // Validate scopes on refreshed token\n                try {\n                    const scopeInfo = await this.checkTokenScopes(this.accessToken);\n                    console.log(\"Zoho granted scopes:\", scopeInfo?.scope || \"unknown\");\n                    if (typeof scopeInfo?.scope === \"string\" && !scopeInfo.scope.includes(\"ZohoBooks.reports.READ\")) {\n                        console.warn(\"⚠️ Missing ZohoBooks.reports.READ scope. Regenerate token.\");\n                    }\n                } catch (scopeErr) {\n                    console.error(\"Zoho token scope verification failed:\", scopeErr?.message);\n                }\n                return this.accessToken;\n            } catch (err) {\n                // If rate-limited by Zoho during token refresh, implement exponential backoff\n                const isAxios = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(err);\n                const status = isAxios && hasResponse(err) ? err.response?.status : undefined;\n                const description = isAxios && hasResponse(err) ? err.response?.data?.error_description : undefined;\n                if (status === 400 && typeof description === \"string\" && description.toLowerCase().includes(\"too many requests\")) {\n                    // Exponential backoff: delay = base * 2^attempt\n                    const delayMs = this.BASE_DELAY * Math.pow(2, attempt - 1) + Math.floor(Math.random() * 1000);\n                    console.warn(`Zoho token refresh rate-limited (attempt ${attempt}/${maxAttempts}). Waiting ${delayMs}ms before retry.`);\n                    await new Promise((resolve)=>setTimeout(resolve, delayMs));\n                    continue;\n                }\n                // For other errors, do not retry endlessly\n                if (attempt === maxAttempts) {\n                    console.error(`Zoho token refresh failed after ${maxAttempts} attempts:`, err);\n                    throw new Error(\"Zoho token refresh rate-limited. Check daily API limits or token validity.\");\n                }\n                throw err;\n            }\n        }\n        throw new Error(\"Zoho token refresh failed after maximum retries\");\n    }\n    async refreshAccessToken() {\n        try {\n            console.log(\"Refreshing Zoho access token...\");\n            // Create form data for the request\n            const formData = new URLSearchParams();\n            formData.append(\"refresh_token\", \"1000.347acbb43b4a925483b2a29677f38c00.1d602040864cf160552f3499af5e86d9\" || 0);\n            formData.append(\"client_id\", \"1000.8RL8WMTDXS0WIP2EJF2XUS6NDSLQEP\" || 0);\n            formData.append(\"client_secret\", \"8a7ee3c04f0a0d860dd215c4449deab9bf15d1d00b\" || 0);\n            formData.append(\"grant_type\", \"refresh_token\");\n            const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(`${this.ACCOUNTS_BASE}/oauth/v2/token`, formData, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            });\n            // Cache the successful token and expiry information\n            this.accessToken = response.data.access_token;\n            this.tokenExpiry = Date.now() + response.data.expires_in * 1000;\n            // Cache the successful token as fallback\n            this.cachedAccessToken = response.data.access_token;\n            console.log(`Token refreshed successfully. Expires in ${Math.round(response.data.expires_in / 60)} minutes`);\n            console.log(`🔐 Token cached: access_token=${this.accessToken.substring(0, 10)}..., expires_in=${response.data.expires_in}s, expiry=${new Date(this.tokenExpiry).toISOString()}`);\n            return this.accessToken;\n        } catch (error) {\n            console.error(\"Error refreshing Zoho access token:\", error);\n            throw new Error(\"Failed to authenticate with Zoho\");\n        }\n    }\n    async makeRequest(endpoint) {\n        // Use p-limit rate limiter to prevent 429 errors\n        return this.rateLimiter(async ()=>{\n            try {\n                // Apply rate limiting\n                await this.applyRateLimit();\n                const token = await this.getAccessToken();\n                // Log API call count for monitoring\n                this.requestCount++;\n                console.log(`📊 Zoho API call #${this.requestCount} to: ${endpoint}`);\n                // Validate token before making request\n                if (!token || token === \"undefined\") {\n                    throw new Error(\"Invalid or missing access token\");\n                }\n                // Validate organization before hitting reports endpoints\n                if (!this.organizationValidated && endpoint.startsWith(\"reports/\")) {\n                    await this.validateOrganization(token);\n                }\n                console.info(`Making Zoho API request to: ${endpoint}`);\n                console.info(`Token (first 10 chars): ${token?.substring(0, 10) ?? \"N/A\"}...`);\n                // Create AbortController for timeout\n                const controller = new AbortController();\n                const timeoutId = setTimeout(()=>controller.abort(), 15000); // 15 second timeout\n                try {\n                    const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(`${this.API_BASE}/books/v3/${endpoint}`, {\n                        headers: {\n                            \"Authorization\": `Bearer ${token}`,\n                            \"Content-Type\": \"application/json\"\n                        },\n                        params: {\n                            organization_id: \"652094923\"\n                        },\n                        timeout: 15000,\n                        signal: controller.signal\n                    });\n                    clearTimeout(timeoutId);\n                    // Reset retry count on success\n                    this.retryCount = 0;\n                    this.requestCount++;\n                    this.lastRequestTime = Date.now();\n                    console.info(`Zoho API request successful: ${endpoint}`);\n                    return response.data;\n                } catch (axiosError) {\n                    clearTimeout(timeoutId);\n                    // Handle timeout specifically\n                    if (axiosError.code === \"ECONNABORTED\" || axiosError.message?.includes(\"timeout\")) {\n                        throw new Error(`Zoho API request timed out for ${endpoint}`);\n                    }\n                    throw axiosError;\n                }\n            } catch (error) {\n                // Handle rate limiting (400 with specific error message)\n                if (hasResponse(error) && error.response?.status === 400 && error.response?.data?.error_description?.includes(\"too many requests\")) {\n                    console.warn(\"Zoho rate limit hit, implementing exponential backoff...\");\n                    await this.handleRateLimit();\n                    // Retry the request after backoff\n                    if (this.retryCount < this.MAX_RETRIES) {\n                        this.retryCount++;\n                        console.info(`Retrying request after rate limit backoff (attempt ${this.retryCount})`);\n                        return this.makeRequest(endpoint);\n                    } else {\n                        throw new Error(\"Zoho API rate limit exceeded after maximum retries. Please try again later.\");\n                    }\n                }\n                // Handle 429 Too Many Requests (explicit rate limit)\n                if (hasResponse(error) && error.response?.status === 429) {\n                    console.warn(\"Zoho 429 rate limit hit, implementing exponential backoff...\");\n                    await this.handleRateLimit();\n                    // Retry the request after backoff\n                    if (this.retryCount < this.MAX_RETRIES) {\n                        this.retryCount++;\n                        console.info(`Retrying request after 429 backoff (attempt ${this.retryCount})`);\n                        return this.makeRequest(endpoint);\n                    } else {\n                        throw new Error(\"Zoho API rate limit exceeded after maximum retries. Please try again later.\");\n                    }\n                }\n                // If we get a 401, try refreshing the token once\n                if (hasResponse(error) && error.response?.status === 401) {\n                    if (hasResponse(error) && error.response?.data?.code === 57) {\n                        console.error(\"Zoho API authorization error (code 57). Likely missing required scopes such as ZohoBooks.reports.READ.\");\n                    }\n                    console.info(\"Token expired, refreshing...\");\n                    // Clear the current token and force a refresh\n                    this.accessToken = null;\n                    this.tokenExpiry = 0;\n                    try {\n                        const newToken = await this.forceRefreshToken();\n                        // Validate the new token\n                        if (!newToken || newToken === \"undefined\") {\n                            throw new Error(\"Failed to obtain valid token after refresh\");\n                        }\n                        console.info(`Retrying request with new token: ${endpoint}`);\n                        // Retry the request with the new token\n                        const retryResponse = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(`${this.API_BASE}/books/v3/${endpoint}`, {\n                            headers: {\n                                \"Authorization\": `Bearer ${newToken}`,\n                                \"Content-Type\": \"application/json\"\n                            },\n                            params: {\n                                organization_id: \"652094923\"\n                            },\n                            timeout: 15000\n                        });\n                        console.info(\"Request retry successful after token refresh\");\n                        return retryResponse.data;\n                    } catch (refreshError) {\n                        console.error(\"Failed to refresh token or retry request:\", refreshError);\n                        // Log detailed refresh error information\n                        if (axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(refreshError)) {\n                            console.error(\"Token refresh Axios error details:\", {\n                                status: hasResponse(refreshError) ? refreshError.response?.status : undefined,\n                                statusText: hasResponse(refreshError) ? refreshError.response?.statusText : undefined,\n                                data: hasResponse(refreshError) ? refreshError.response?.data : undefined,\n                                message: refreshError.message,\n                                endpoint: endpoint\n                            });\n                        }\n                        // Check if it's a rate limiting issue during token refresh\n                        if (hasResponse(refreshError) && refreshError.response?.status === 400 && refreshError.response?.data?.error_description?.includes(\"too many requests\")) {\n                            throw new Error(`Zoho token refresh rate limited: ${endpoint}. Please wait before retrying.`);\n                        }\n                        // Check if it's an authentication issue during token refresh\n                        if (hasResponse(refreshError) && refreshError.response?.status === 400 && refreshError.response?.data?.error_description?.includes(\"invalid\")) {\n                            throw new Error(`Zoho token refresh failed - invalid credentials: ${endpoint}. Check your OAuth configuration.`);\n                        }\n                        throw new Error(`Zoho API authentication failed after token refresh: ${endpoint}. Error: ${refreshError.message}`);\n                    }\n                }\n                // Log the error details for debugging\n                console.error(`Zoho API request failed for ${endpoint}:`, {\n                    status: hasResponse(error) ? error.response?.status : undefined,\n                    statusText: hasResponse(error) ? error.response?.statusText : undefined,\n                    data: hasResponse(error) ? error.response?.data : undefined,\n                    message: error.message\n                });\n                if (hasResponse(error) && error.response?.data?.code === 57) {\n                    console.error(\"Zoho API authorization error (code 57). Verify organization_id and OAuth scopes (ZohoBooks.reports.READ).\");\n                }\n                throw error;\n            }\n        });\n    }\n    // Check granted scopes for current access token\n    async checkTokenScopes(token) {\n        try {\n            const url = `${this.ACCOUNTS_BASE}/oauth/v2/tokeninfo?token=${encodeURIComponent(token)}`;\n            const res = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(url, {\n                timeout: 10000\n            });\n            return res.data;\n        } catch (err) {\n            // Surface concise context but do not fail the main flow\n            const msg = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(err) ? (hasResponse(err) ? err.response?.data : undefined) || err.message : String(err);\n            throw new Error(typeof msg === \"string\" ? msg : JSON.stringify(msg));\n        }\n    }\n    // Validate the configured organization ID by calling organizations endpoint\n    async validateOrganization(token) {\n        try {\n            const orgId = \"652094923\";\n            if (!orgId) {\n                console.warn(\"ZOHO_ORGANIZATION_ID not set. Reports calls may fail.\");\n                return;\n            }\n            const url = `${this.API_BASE}/books/v3/organizations`;\n            const res = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(url, {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                timeout: 15000\n            });\n            const orgs = res.data?.organizations || [];\n            const found = orgs.some((o)=>String(o.organization_id) === String(orgId));\n            if (!found) {\n                console.error(`Provided organization_id=${orgId} not found in Zoho account. Fetched organizations: ${JSON.stringify(orgs)}`);\n            } else {\n                this.organizationValidated = true;\n                console.log(`Validated Zoho organization_id=${orgId}`);\n            }\n        } catch (err) {\n            const status = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(err) ? hasResponse(err) ? err.response?.status : undefined : undefined;\n            const data = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(err) ? hasResponse(err) ? err.response?.data : undefined : undefined;\n            console.error(\"Failed to validate Zoho organization:\", {\n                status,\n                data,\n                message: err.message\n            });\n        // Do not throw; allow request to proceed but logs will help diagnose\n        }\n    }\n    async applyRateLimit() {\n        const now = Date.now();\n        // Check if we need to wait between requests\n        if (this.lastRequestTime > 0) {\n            const timeSinceLastRequest = now - this.lastRequestTime;\n            if (timeSinceLastRequest < this.MIN_REQUEST_INTERVAL) {\n                const waitTime = this.MIN_REQUEST_INTERVAL - timeSinceLastRequest;\n                console.info(`Rate limiting: waiting ${waitTime}ms before next request`);\n                await new Promise((resolve)=>setTimeout(resolve, waitTime));\n            }\n        }\n        // Check if we've exceeded the per-minute limit\n        if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n            const timeSinceFirstRequest = now - this.lastRequestTime;\n            if (timeSinceFirstRequest < 60000) {\n                const waitTime = 60000 - timeSinceFirstRequest;\n                console.warn(`Rate limiting: exceeded ${this.MAX_REQUESTS_PER_MINUTE} requests per minute, waiting ${waitTime}ms`);\n                await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                this.requestCount = 0;\n            } else {\n                // Reset counter if more than 1 minute has passed\n                this.requestCount = 0;\n            }\n        }\n    }\n    async handleRateLimit() {\n        const delay = this.BASE_DELAY * Math.pow(2, this.retryCount);\n        const jitter = Math.random() * 1000; // Add up to 1 second of jitter\n        const totalDelay = delay + jitter;\n        console.warn(`Rate limit backoff: waiting ${totalDelay}ms before retry (attempt ${this.retryCount + 1})`);\n        await new Promise((resolve)=>setTimeout(resolve, totalDelay));\n        // Reset request counters to allow fresh start\n        this.requestCount = 0;\n        this.lastRequestTime = 0;\n    }\n    async getProjects() {\n        try {\n            let allProjects = [];\n            let page = 1;\n            const perPage = 200;\n            while(true){\n                const data = await this.makeRequest(`projects?page=${page}&per_page=${perPage}`);\n                const projects = data.projects?.map((project)=>{\n                    // Log the first project to see available fields\n                    if (page === 1 && allProjects.length === 0) {\n                        console.log(\"Sample Zoho project data:\", JSON.stringify(project, null, 2));\n                    }\n                    return {\n                        project_id: project.project_id,\n                        project_name: project.project_name || project.name || \"\",\n                        description: project.description || \"\",\n                        status: project.status || \"active\",\n                        start_date: project.start_date || \"\",\n                        end_date: project.end_date || \"\",\n                        budget_amount: project.budget_amount || 0,\n                        rate_per_hour: project.rate_per_hour || 0,\n                        customer_id: project.customer_id || \"\",\n                        customer_name: project.customer_name || \"\",\n                        signed_fee: undefined\n                    };\n                }) || [];\n                allProjects = allProjects.concat(projects);\n                // Check if we've reached the end\n                if (projects.length < perPage) {\n                    break;\n                }\n                page++;\n            }\n            console.log(`Fetched ${allProjects.length} projects from Zoho`);\n            return allProjects;\n        } catch (error) {\n            console.error(\"Error fetching projects:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithRevenueBudget() {\n        try {\n            console.log(\"Fetching projects with revenue budget data...\");\n            const projects = await this.getProjects();\n            // Log projects that have revenue_budget data\n            const projectsWithRevenueBudget = projects.filter((project)=>{\n                const hasRevenueBudget = project.signed_fee && project.signed_fee > 0;\n                if (hasRevenueBudget) {\n                    console.log(`Project ${project.project_name} has revenue budget: $${project.signed_fee}`);\n                }\n                return hasRevenueBudget;\n            });\n            console.log(`Found ${projectsWithRevenueBudget.length} projects with revenue budget data`);\n            return projects;\n        } catch (error) {\n            console.error(\"Error fetching projects with revenue budget:\", error);\n            return [];\n        }\n    }\n    async debugProjectFields() {\n        try {\n            console.log(\"Debugging Zoho project fields...\");\n            const data = await this.makeRequest(\"projects?page=1&per_page=5\");\n            if (data.projects && data.projects.length > 0) {\n                console.log(\"Available fields in Zoho project response:\");\n                const sampleProject = data.projects[0];\n                Object.keys(sampleProject).forEach((key)=>{\n                    console.log(`  ${key}: ${sampleProject[key]} (${typeof sampleProject[key]})`);\n                });\n                // Check specifically for revenue_budget\n                if (sampleProject.revenue_budget !== undefined) {\n                    console.log(`✅ Found revenue_budget field: ${sampleProject.revenue_budget}`);\n                } else {\n                    console.log(\"❌ revenue_budget field not found in Zoho response\");\n                    console.log(\"Available budget-related fields:\");\n                    Object.keys(sampleProject).forEach((key)=>{\n                        if (key.toLowerCase().includes(\"budget\") || key.toLowerCase().includes(\"revenue\")) {\n                            console.log(`  ${key}: ${sampleProject[key]}`);\n                        }\n                    });\n                }\n            } else {\n                console.log(\"No projects found in Zoho response\");\n            }\n        } catch (error) {\n            console.error(\"Error debugging project fields:\", error);\n        }\n    }\n    async getProjectsWithEstimates() {\n        try {\n            const projects = await this.getProjects();\n            // For the first few projects, try to get estimates to see if that contains the signed fee\n            const projectsWithEstimates = await Promise.all(projects.slice(0, 5).map(async (project)=>{\n                try {\n                    const estimates = await this.getProjectEstimates(project.project_id);\n                    const totalEstimateAmount = estimates.reduce((sum, estimate)=>sum + (estimate.total || 0), 0);\n                    console.log(`Project ${project.project_name} estimates:`, estimates.length, \"total amount:\", totalEstimateAmount);\n                    return {\n                        ...project,\n                        signed_fee: project.signed_fee || totalEstimateAmount || 0\n                    };\n                } catch (error) {\n                    console.error(`Error fetching estimates for project ${project.project_id}:`, error);\n                    return project;\n                }\n            }));\n            // Return all projects, with the first 5 having updated signed fees from estimates\n            return [\n                ...projectsWithEstimates,\n                ...projects.slice(5)\n            ];\n        } catch (error) {\n            console.error(\"Error fetching projects with estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithInvoiceTotals() {\n        try {\n            const [projects, invoices] = await Promise.all([\n                this.getProjects(),\n                this.getInvoices()\n            ]);\n            // Calculate signed fee as total of all invoices for each project\n            const projectsWithInvoiceTotals = projects.map((project)=>{\n                const projectInvoices = invoices.filter((invoice)=>invoice.project_id === project.project_id);\n                const totalInvoiceAmount = projectInvoices.reduce((sum, invoice)=>sum + invoice.amount, 0);\n                console.log(`Project ${project.project_name} invoices:`, projectInvoices.length, \"total amount:\", totalInvoiceAmount);\n                return {\n                    ...project,\n                    signed_fee: project.signed_fee || totalInvoiceAmount || 0\n                };\n            });\n            return projectsWithInvoiceTotals;\n        } catch (error) {\n            console.error(\"Error fetching projects with invoice totals:\", error);\n            return [];\n        }\n    }\n    async getInvoices() {\n        try {\n            console.log(\"\\uD83D\\uDCC4 Fetching invoices from Zoho...\");\n            const data = await this.makeRequest(\"invoices\");\n            const invoices = data.invoices?.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                })) || [];\n            // Log invoice counts and details\n            console.log(`📊 Zoho invoices fetched: ${invoices.length} total invoices`);\n            if (invoices.length > 0) {\n                const statusCounts = invoices.reduce((acc, inv)=>{\n                    acc[inv.status] = (acc[inv.status] || 0) + 1;\n                    return acc;\n                }, {});\n                console.log(\"\\uD83D\\uDCCB Invoice status breakdown:\", statusCounts);\n                // Log sample invoice data for debugging\n                const sampleInvoice = invoices[0];\n                console.log(\"\\uD83D\\uDCC4 Sample invoice data:\", {\n                    id: sampleInvoice.invoice_id,\n                    number: sampleInvoice.invoice_number,\n                    project: sampleInvoice.project_id,\n                    amount: sampleInvoice.amount,\n                    status: sampleInvoice.status\n                });\n            }\n            return invoices;\n        } catch (error) {\n            console.error(\"Error fetching invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectInvoices(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/invoices`);\n            return data.invoices?.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                })) || [];\n        } catch (error) {\n            console.error(\"Error fetching project invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectDetails(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}`);\n            console.log(`Project ${projectId} details:`, JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching project details:\", error);\n            return null;\n        }\n    }\n    async getProjectEstimates(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/estimates`);\n            console.log(`Project ${projectId} estimates:`, JSON.stringify(data, null, 2));\n            return data.estimates || [];\n        } catch (error) {\n            console.error(\"Error fetching project estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectContracts(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/contracts`);\n            console.log(`Project ${projectId} contracts:`, JSON.stringify(data, null, 2));\n            return data.contracts || [];\n        } catch (error) {\n            console.error(\"Error fetching project contracts:\", error);\n            return [];\n        }\n    }\n    // New method to get Profit & Loss statement\n    async getProfitAndLoss(startDate, endDate) {\n        try {\n            console.info(`📊 Fetching Zoho Profit & Loss for ${startDate} to ${endDate}`);\n            const data = await this.makeRequest(`reports/profitandloss?from_date=${startDate}&to_date=${endDate}`);\n            const sizeBytes = JSON.stringify(data || {}).length;\n            const keys = Object.keys(data || {}).length;\n            console.info(`✅ Profit & Loss data fetched successfully (keys: ${keys}, bytes: ${sizeBytes})`);\n            if (!data || keys === 0) {\n                console.warn(\"No data for reports/profitandloss. Verify organization ID, date range (2025-01-01 to 2025-08-13), or data in Zoho dashboard.\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"❌ Error fetching Profit & Loss:\", error);\n            console.warn(\"\\uD83C\\uDFAD Profit & Loss data unavailable, will use defaults\");\n            return null;\n        }\n    }\n    // New method to get Cash Flow statement\n    async getCashFlow(startDate, endDate) {\n        try {\n            console.info(`💰 Fetching Zoho Cash Flow for ${startDate} to ${endDate}`);\n            const data = await this.makeRequest(`reports/cashflow?from_date=${startDate}&to_date=${endDate}`);\n            const sizeBytes = JSON.stringify(data || {}).length;\n            const keys = Object.keys(data || {}).length;\n            console.info(`✅ Cash Flow data fetched successfully (keys: ${keys}, bytes: ${sizeBytes})`);\n            if (!data || keys === 0) {\n                console.warn(\"No data for reports/cashflow. Verify organization ID, date range (2025-01-01 to 2025-08-13), or data in Zoho dashboard.\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"❌ Error fetching Cash Flow:\", error);\n            console.warn(\"\\uD83C\\uDFAD Cash Flow data unavailable, will use defaults\");\n            return null;\n        }\n    }\n    // New method to get Balance Sheet\n    async getBalanceSheet(date) {\n        try {\n            console.info(`📈 Fetching Zoho Balance Sheet for ${date}`);\n            const data = await this.makeRequest(`reports/balancesheet?date=${date}`);\n            const sizeBytes = JSON.stringify(data || {}).length;\n            const keys = Object.keys(data || {}).length;\n            console.info(`✅ Balance Sheet data fetched successfully (keys: ${keys}, bytes: ${sizeBytes})`);\n            if (!data || keys === 0) {\n                console.warn(\"No data for reports/balancesheet. Verify organization ID, date range (2025-01-01 to 2025-08-13), or data in Zoho dashboard.\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"❌ Error fetching Balance Sheet:\", error);\n            console.warn(\"\\uD83C\\uDFAD Balance Sheet data unavailable, will use defaults\");\n            return null;\n        }\n    }\n    // New method to get Chart of Accounts\n    async getChartOfAccounts() {\n        try {\n            const data = await this.makeRequest(\"chartofaccounts\");\n            console.log(\"Chart of Accounts data:\", JSON.stringify(data, null, 2));\n            return data.chartofaccounts || [];\n        } catch (error) {\n            console.error(\"Error fetching Chart of Accounts:\", error);\n            return [];\n        }\n    }\n    // New method to get Journal Entries for a date range\n    async getJournalEntries(startDate, endDate) {\n        try {\n            const data = await this.makeRequest(`journalentries?from_date=${startDate}&to_date=${endDate}`);\n            console.log(\"Journal Entries data:\", JSON.stringify(data, null, 2));\n            return data.journalentries || [];\n        } catch (error) {\n            console.error(\"Error fetching Journal Entries:\", error);\n            return [];\n        }\n    }\n    // New method to get comprehensive financial metrics\n    async getFinancialMetrics(startDate, endDate) {\n        try {\n            console.info(`💰 Fetching Zoho financial metrics for ${startDate} to ${endDate}`);\n            const [plData, cfData, bsData] = await Promise.allSettled([\n                this.getProfitAndLoss(startDate, endDate),\n                this.getCashFlow(startDate, endDate),\n                this.getBalanceSheet(endDate)\n            ]);\n            // Log raw response status and body length for each report\n            console.info(\"\\uD83D\\uDCCA Financial reports raw response details:\", {\n                profitLoss: {\n                    status: plData.status,\n                    bodyLength: plData.status === \"fulfilled\" ? JSON.stringify(plData.value || {}).length : \"N/A\",\n                    hasData: plData.status === \"fulfilled\" && plData.value && Object.keys(plData.value || {}).length > 0\n                },\n                cashFlow: {\n                    status: cfData.status,\n                    bodyLength: cfData.status === \"fulfilled\" ? JSON.stringify(cfData.value || {}).length : \"N/A\",\n                    hasData: cfData.status === \"fulfilled\" && cfData.value && Object.keys(cfData.value || {}).length > 0\n                },\n                balanceSheet: {\n                    status: bsData.status,\n                    bodyLength: bsData.status === \"fulfilled\" ? JSON.stringify(bsData.value || {}).length : \"N/A\",\n                    hasData: bsData.status === \"fulfilled\" && bsData.value && Object.keys(bsData.value || {}).length > 0\n                }\n            });\n            // Check for 404 errors and log specific warnings\n            if (plData.status === \"rejected\") {\n                const error = plData.reason;\n                if (hasResponse(error) && error.response?.status === 404) {\n                    console.warn(\"⚠️ Profit & Loss returned 404 - Invalid endpoint - check Zoho API docs\");\n                } else {\n                    console.warn(\"⚠️ Profit & Loss data failed:\", plData.reason);\n                }\n            }\n            if (cfData.status === \"rejected\") {\n                const error = cfData.reason;\n                if (hasResponse(error) && error.response?.status === 404) {\n                    console.warn(\"⚠️ Cash Flow returned 404 - Invalid endpoint - check Zoho API docs\");\n                } else {\n                    console.warn(\"⚠️ Cash Flow data failed:\", cfData.reason);\n                }\n            }\n            if (bsData.status === \"rejected\") {\n                const error = bsData.reason;\n                if (hasResponse(error) && error.response?.status === 404) {\n                    console.warn(\"⚠️ Balance Sheet returned 404 - Invalid endpoint - check Zoho API docs\");\n                } else {\n                    console.warn(\"⚠️ Balance Sheet data failed:\", bsData.reason);\n                }\n            }\n            // Extract financial metrics from the responses with fallbacks\n            const revenue = plData.status === \"fulfilled\" ? plData.value?.revenue?.total || 0 : 0;\n            const expenses = plData.status === \"fulfilled\" ? plData.value?.expenses?.total || 0 : 0;\n            const grossProfit = revenue - expenses;\n            // Calculate net profit (may need adjustment based on actual Zoho response structure)\n            const operatingExpenses = plData.status === \"fulfilled\" ? plData.value?.operating_expenses?.total || 0 : 0;\n            const netProfit = grossProfit - operatingExpenses;\n            const operatingIncome = grossProfit - operatingExpenses;\n            // Extract cash flow data\n            const cashFlow = cfData.status === \"fulfilled\" ? cfData.value?.net_cash_flow || 0 : 0;\n            const accountsReceivable = bsData.status === \"fulfilled\" ? bsData.value?.current_assets?.accounts_receivable || 0 : 0;\n            const accountsPayable = bsData.status === \"fulfilled\" ? bsData.value?.current_liabilities?.accounts_payable || 0 : 0;\n            const cashBalance = bsData.status === \"fulfilled\" ? bsData.value?.current_assets?.cash_and_bank || 0 : 0;\n            // Log which data sources succeeded/failed\n            console.info(\"\\uD83D\\uDCCA Financial metrics data sources:\", {\n                profitLoss: plData.status === \"fulfilled\" ? \"✅\" : \"❌\",\n                cashFlow: cfData.status === \"fulfilled\" ? \"✅\" : \"❌\",\n                balanceSheet: bsData.status === \"fulfilled\" ? \"✅\" : \"❌\"\n            });\n            return {\n                revenue,\n                expenses,\n                grossProfit,\n                netProfit,\n                operatingIncome,\n                cashFlow,\n                accountsReceivable,\n                accountsPayable,\n                cashBalance\n            };\n        } catch (error) {\n            console.error(\"❌ Error fetching financial metrics:\", error);\n            console.warn(\"\\uD83C\\uDFAD Returning default financial metrics due to API failure\");\n            // Return default values if API calls fail\n            return {\n                revenue: 0,\n                expenses: 0,\n                grossProfit: 0,\n                netProfit: 0,\n                operatingIncome: 0,\n                cashFlow: 0,\n                accountsReceivable: 0,\n                accountsPayable: 0,\n                cashBalance: 0\n            };\n        }\n    }\n    // Method to manually refresh token (for testing)\n    async forceRefreshToken() {\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.lastRefreshTime = Date.now(); // Track manual refresh time\n        return await this.getAccessToken();\n    }\n    // Get token status for debugging\n    getTokenStatus() {\n        const now = Date.now();\n        return {\n            hasToken: !!this.accessToken,\n            expiresIn: this.tokenExpiry - now,\n            isExpired: now >= this.tokenExpiry\n        };\n    }\n    // Method to get auto-refresh status\n    getAutoRefreshStatus() {\n        const now = Date.now();\n        const timeSinceLastRefresh = now - this.lastRefreshTime;\n        const nextRefreshIn = Math.max(0, this.AUTO_REFRESH_INTERVAL - timeSinceLastRefresh);\n        return {\n            isActive: !!this.autoRefreshTimer,\n            nextRefreshIn\n        };\n    }\n    // Public method to start auto-refresh\n    enableAutoRefresh() {\n        this._startAutoRefresh();\n    }\n    // Public method to stop auto-refresh\n    disableAutoRefresh() {\n        this._stopAutoRefresh();\n    }\n    // Public method to get comprehensive status\n    getStatus() {\n        return {\n            ...this.getTokenStatus(),\n            autoRefresh: this.getAutoRefreshStatus()\n        };\n    }\n}\nconst zohoService = new ZohoService();\n// Export the functions that are being imported in page.tsx\nconst fetchProjects = async ()=>{\n    try {\n        console.log(\"Client: Fetching projects from API\");\n        const response = await fetch(\"/api/projects\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"projects\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching projects:\", error);\n        throw error;\n    }\n};\nconst fetchInvoices = async ()=>{\n    try {\n        console.log(\"Client: Fetching invoices from API\");\n        const response = await fetch(\"/api/invoices\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"invoices\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching invoices:\", error);\n        throw error;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/zoho.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/form-data","vendor-chunks/get-intrinsic","vendor-chunks/asynckit","vendor-chunks/combined-stream","vendor-chunks/mime-types","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/p-limit","vendor-chunks/es-set-tostringtag","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/dunder-proto","vendor-chunks/yocto-queue","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/has-flag","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhomepage-dashboard%2Froute&page=%2Fapi%2Fhomepage-dashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhomepage-dashboard%2Froute.ts&appDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();