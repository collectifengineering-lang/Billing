"use strict";(()=>{var e={};e.id=816,e.ids=[816],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},30111:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>h,patchFetch:()=>b,requestAsyncStorage:()=>p,routeModule:()=>u,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var s={};a.r(s),a.d(s,{GET:()=>d,dynamic:()=>l});var o=a(49303),r=a(88716),n=a(60670),c=a(87070),i=a(24544);let l="force-dynamic";async function d(){if(!process.env.VERCEL_ENV)return c.NextResponse.json({success:!1,message:"Database connection skipped during build"});if(!i._B)return c.NextResponse.json({success:!1,message:"Prisma client not available"},{status:500});try{console.log("DATABASE_URL (redacted):",process.env.DATABASE_URL?.replace(/\/\/.*@/,"//[redacted]@")||"Not set"),console.log("Testing database connection...");let e=await i._B.$queryRaw`SELECT 1 as test`;return console.log("Database connection successful:",e),c.NextResponse.json({success:!0,message:"Database connection successful",result:e})}catch(e){return console.error("Database connection failed:",e),console.error("DATABASE_URL (redacted):",process.env.DATABASE_URL?.replace(/\/\/.*@/,"//[redacted]@")||"Not set"),c.NextResponse.json({error:"Database connection failed",details:e instanceof Error?e.message:"Unknown error",code:e instanceof Error&&"code"in e?e.code:void 0,stack:e instanceof Error?e.stack:void 0},{status:500})}}let u=new o.AppRouteRouteModule({definition:{kind:r.x.APP_ROUTE,page:"/api/db-test/route",pathname:"/api/db-test",filename:"route",bundlePath:"app/api/db-test/route"},resolvedPagePath:"C:\\Users\\Jonathan\\Desktop\\Billing\\app\\api\\db-test\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:p,staticGenerationAsyncStorage:m,serverHooks:g}=u,h="/api/db-test/route";function b(){return(0,n.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}},24544:(e,t,a)=>{a.d(t,{Xp:()=>o,_B:()=>s.Z,eK:()=>r});var s=a(52663);async function o(){try{return await s.Z.projection.findFirst(),console.log("Database schema already exists"),!0}catch(e){if(console.log("Tables do not exist, attempting to create schema..."),"P2021"===e.code||e.message?.includes("does not exist"))try{return console.log("Attempting to create database schema..."),await s.Z.projection.create({data:{projectId:"__test__",month:"__test__",value:0}}),await s.Z.projection.deleteMany({where:{projectId:"__test__",month:"__test__"}}),console.log("Database schema created successfully"),!0}catch(e){return console.error("Failed to create database schema:",e),!1}return console.log("Tables do not exist, but Prisma Accelerate will create them automatically"),console.log("Note: With Prisma Accelerate, tables are created automatically when you first insert data"),!1}}async function r(){try{if(console.log("Creating database schema..."),await o())return console.log("Database schema creation completed successfully"),!0;return console.error("Database schema creation failed"),!1}catch(e){return console.error("Database schema creation failed:",e),!1}}},52663:(e,t,a)=>{a.d(t,{Z:()=>o});let s=require("@prisma/client"),o=globalThis.prisma??new s.PrismaClient({log:["error"]})}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),s=t.X(0,[276,972],()=>a(30111));module.exports=s})();