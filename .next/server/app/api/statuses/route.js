"use strict";(()=>{var e={};e.id=324,e.ids=[324],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},29972:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>x,patchFetch:()=>j,requestAsyncStorage:()=>h,routeModule:()=>l,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var a={};s.r(a),s.d(a,{GET:()=>p,POST:()=>d,dynamic:()=>c});var r=s(49303),o=s(88716),n=s(60670),u=s(87070),i=s(52663);let c="force-dynamic";async function p(){try{console.log("Fetching statuses from database...");let e=await i.Z.status.findMany();console.log("Fetched",e.length,"statuses from database");let t=e.reduce((e,t)=>(e[t.projectId]||(e[t.projectId]={}),e[t.projectId][t.month]=t.status,e),{});return u.NextResponse.json(t)}catch(e){if(console.error("Error fetching statuses:",e),"P2021"===e.code||e.message?.includes("does not exist"))return console.log("Tables do not exist, returning empty statuses"),u.NextResponse.json({});return u.NextResponse.json({error:"Failed to fetch statuses"},{status:500})}}async function d(e){let{projectId:t,month:s,status:a}=await e.json();try{return console.log("Updating status for project:",t,"month:",s),await i.Z.status.upsert({where:{projectId_month:{projectId:t,month:s}},update:{status:a},create:{projectId:t,month:s,status:a}}),console.log("Status updated successfully"),u.NextResponse.json({success:!0})}catch(e){if(console.error("Error updating status:",e),"P2021"===e.code||e.message?.includes("does not exist")){console.log("Table does not exist, attempting to create schema...");try{return await i.Z.status.create({data:{projectId:"__test__",month:"__test__",status:"test"}}),await i.Z.status.deleteMany({where:{projectId:"__test__",month:"__test__"}}),await i.Z.status.upsert({where:{projectId_month:{projectId:t,month:s}},update:{status:a},create:{projectId:t,month:s,status:a}}),u.NextResponse.json({success:!0})}catch(e){return console.error("Failed to create table:",e),u.NextResponse.json({error:"Database schema not ready. Please run database setup first."},{status:500})}}return u.NextResponse.json({error:"Failed to update status"},{status:500})}}let l=new r.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/statuses/route",pathname:"/api/statuses",filename:"route",bundlePath:"app/api/statuses/route"},resolvedPagePath:"C:\\Users\\Jonathan\\Desktop\\Billing\\app\\api\\statuses\\route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:h,staticGenerationAsyncStorage:m,serverHooks:g}=l,x="/api/statuses/route";function j(){return(0,n.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}},52663:(e,t,s)=>{s.d(t,{Z:()=>r});let a=require("@prisma/client"),r=globalThis.prisma??new a.PrismaClient({log:["error"]})}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),a=t.X(0,[276,972],()=>s(29972));module.exports=a})();