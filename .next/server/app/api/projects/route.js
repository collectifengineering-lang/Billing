"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/projects/route";
exports.ids = ["app/api/projects/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprojects%2Froute&page=%2Fapi%2Fprojects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprojects%2Froute.ts&appDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprojects%2Froute&page=%2Fapi%2Fprojects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprojects%2Froute.ts&appDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_John_BillingPlatform_Billing_app_api_projects_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/projects/route.ts */ \"(rsc)/./app/api/projects/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/projects/route\",\n        pathname: \"/api/projects\",\n        filename: \"route\",\n        bundlePath: \"app/api/projects/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\John\\\\BillingPlatform\\\\Billing\\\\app\\\\api\\\\projects\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_John_BillingPlatform_Billing_app_api_projects_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/projects/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwcm9qZWN0cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGcHJvamVjdHMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZwcm9qZWN0cyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNKb2huJTVDQmlsbGluZ1BsYXRmb3JtJTVDQmlsbGluZyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDSm9obiU1Q0JpbGxpbmdQbGF0Zm9ybSU1Q0JpbGxpbmcmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3VCO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vem9oby1iaWxsaW5nLXBsYXRmb3JtLz81ZGVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXEpvaG5cXFxcQmlsbGluZ1BsYXRmb3JtXFxcXEJpbGxpbmdcXFxcYXBwXFxcXGFwaVxcXFxwcm9qZWN0c1xcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcHJvamVjdHMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wcm9qZWN0c1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcHJvamVjdHMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxKb2huXFxcXEJpbGxpbmdQbGF0Zm9ybVxcXFxCaWxsaW5nXFxcXGFwcFxcXFxhcGlcXFxccHJvamVjdHNcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3Byb2plY3RzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprojects%2Froute&page=%2Fapi%2Fprojects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprojects%2Froute.ts&appDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/projects/route.ts":
/*!***********************************!*\
  !*** ./app/api/projects/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_zoho__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/zoho */ \"(rsc)/./lib/zoho.ts\");\n\n\nasync function GET(request) {\n    try {\n        console.info(\"\\uD83D\\uDD04 Fetching projects from Zoho...\");\n        const projects = await _lib_zoho__WEBPACK_IMPORTED_MODULE_1__.zohoService.getProjects();\n        if (projects.length === 0) {\n            console.warn(\"⚠️ No projects returned from Zoho - this may indicate an API issue or rate limiting\");\n            // Return a more informative response instead of empty data\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                count: 0,\n                data: [],\n                message: \"No projects found. This may be due to Zoho API rate limiting or authentication issues.\",\n                timestamp: new Date().toISOString(),\n                suggestions: [\n                    \"Check Zoho API rate limits (100 requests/minute)\",\n                    \"Verify authentication credentials\",\n                    \"Try again in a few minutes\"\n                ]\n            });\n        }\n        console.info(`✅ Successfully fetched ${projects.length} projects from Zoho`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            count: projects.length,\n            data: projects,\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"❌ Error fetching projects from Zoho:\", {\n            message: error.message,\n            stack: error.stack,\n            timestamp: new Date().toISOString()\n        });\n        // Check if it's a rate limiting error\n        if (error.message?.includes(\"rate limit\") || error.message?.includes(\"too many requests\")) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                count: 0,\n                data: [],\n                error: \"Zoho API rate limit exceeded\",\n                message: \"Too many requests to Zoho API. Please try again in a few minutes.\",\n                timestamp: new Date().toISOString(),\n                retryAfter: \"2-5 minutes\",\n                suggestions: [\n                    \"Wait a few minutes before retrying\",\n                    \"Check your Zoho API usage\",\n                    \"Consider implementing request caching\"\n                ]\n            }, {\n                status: 429\n            });\n        }\n        // Check if it's an authentication error\n        if (error.message?.includes(\"authentication\") || error.message?.includes(\"token\")) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                count: 0,\n                data: [],\n                error: \"Zoho authentication failed\",\n                message: \"Failed to authenticate with Zoho API. Please check your credentials.\",\n                timestamp: new Date().toISOString(),\n                suggestions: [\n                    \"Verify Zoho OAuth credentials\",\n                    \"Check environment variables\",\n                    \"Refresh authentication tokens\"\n                ]\n            }, {\n                status: 401\n            });\n        }\n        // Generic error response\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            count: 0,\n            data: [],\n            error: \"Failed to fetch projects\",\n            message: error.message || \"An unexpected error occurred while fetching projects\",\n            timestamp: new Date().toISOString(),\n            suggestions: [\n                \"Check Vercel logs for detailed error information\",\n                \"Verify Zoho API configuration\",\n                \"Contact support if the issue persists\"\n            ]\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3Byb2plY3RzL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3RDtBQUNmO0FBRWxDLGVBQWVFLElBQUlDLE9BQW9CO0lBQzVDLElBQUk7UUFDRkMsUUFBUUMsSUFBSSxDQUFDO1FBRWIsTUFBTUMsV0FBVyxNQUFNTCxrREFBV0EsQ0FBQ00sV0FBVztRQUU5QyxJQUFJRCxTQUFTRSxNQUFNLEtBQUssR0FBRztZQUN6QkosUUFBUUssSUFBSSxDQUFDO1lBRWIsMkRBQTJEO1lBQzNELE9BQU9ULHFEQUFZQSxDQUFDVSxJQUFJLENBQUM7Z0JBQ3ZCQyxTQUFTO2dCQUNUQyxPQUFPO2dCQUNQQyxNQUFNLEVBQUU7Z0JBQ1JDLFNBQVM7Z0JBQ1RDLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztnQkFDakNDLGFBQWE7b0JBQ1g7b0JBQ0E7b0JBQ0E7aUJBQ0Q7WUFDSDtRQUNGO1FBRUFkLFFBQVFDLElBQUksQ0FBQyxDQUFDLHVCQUF1QixFQUFFQyxTQUFTRSxNQUFNLENBQUMsbUJBQW1CLENBQUM7UUFFM0UsT0FBT1IscURBQVlBLENBQUNVLElBQUksQ0FBQztZQUN2QkMsU0FBUztZQUNUQyxPQUFPTixTQUFTRSxNQUFNO1lBQ3RCSyxNQUFNUDtZQUNOUyxXQUFXLElBQUlDLE9BQU9DLFdBQVc7UUFDbkM7SUFFRixFQUFFLE9BQU9FLE9BQVk7UUFDbkJmLFFBQVFlLEtBQUssQ0FBQyx3Q0FBd0M7WUFDcERMLFNBQVNLLE1BQU1MLE9BQU87WUFDdEJNLE9BQU9ELE1BQU1DLEtBQUs7WUFDbEJMLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztRQUNuQztRQUVBLHNDQUFzQztRQUN0QyxJQUFJRSxNQUFNTCxPQUFPLEVBQUVPLFNBQVMsaUJBQWlCRixNQUFNTCxPQUFPLEVBQUVPLFNBQVMsc0JBQXNCO1lBQ3pGLE9BQU9yQixxREFBWUEsQ0FBQ1UsSUFBSSxDQUFDO2dCQUN2QkMsU0FBUztnQkFDVEMsT0FBTztnQkFDUEMsTUFBTSxFQUFFO2dCQUNSTSxPQUFPO2dCQUNQTCxTQUFTO2dCQUNUQyxXQUFXLElBQUlDLE9BQU9DLFdBQVc7Z0JBQ2pDSyxZQUFZO2dCQUNaSixhQUFhO29CQUNYO29CQUNBO29CQUNBO2lCQUNEO1lBQ0gsR0FBRztnQkFBRUssUUFBUTtZQUFJO1FBQ25CO1FBRUEsd0NBQXdDO1FBQ3hDLElBQUlKLE1BQU1MLE9BQU8sRUFBRU8sU0FBUyxxQkFBcUJGLE1BQU1MLE9BQU8sRUFBRU8sU0FBUyxVQUFVO1lBQ2pGLE9BQU9yQixxREFBWUEsQ0FBQ1UsSUFBSSxDQUFDO2dCQUN2QkMsU0FBUztnQkFDVEMsT0FBTztnQkFDUEMsTUFBTSxFQUFFO2dCQUNSTSxPQUFPO2dCQUNQTCxTQUFTO2dCQUNUQyxXQUFXLElBQUlDLE9BQU9DLFdBQVc7Z0JBQ2pDQyxhQUFhO29CQUNYO29CQUNBO29CQUNBO2lCQUNEO1lBQ0gsR0FBRztnQkFBRUssUUFBUTtZQUFJO1FBQ25CO1FBRUEseUJBQXlCO1FBQ3pCLE9BQU92QixxREFBWUEsQ0FBQ1UsSUFBSSxDQUFDO1lBQ3ZCQyxTQUFTO1lBQ1RDLE9BQU87WUFDUEMsTUFBTSxFQUFFO1lBQ1JNLE9BQU87WUFDUEwsU0FBU0ssTUFBTUwsT0FBTyxJQUFJO1lBQzFCQyxXQUFXLElBQUlDLE9BQU9DLFdBQVc7WUFDakNDLGFBQWE7Z0JBQ1g7Z0JBQ0E7Z0JBQ0E7YUFDRDtRQUNILEdBQUc7WUFBRUssUUFBUTtRQUFJO0lBQ25CO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96b2hvLWJpbGxpbmctcGxhdGZvcm0vLi9hcHAvYXBpL3Byb2plY3RzL3JvdXRlLnRzPzQ1NDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcclxuaW1wb3J0IHsgem9ob1NlcnZpY2UgfSBmcm9tICdAL2xpYi96b2hvJztcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc29sZS5pbmZvKCfwn5SEIEZldGNoaW5nIHByb2plY3RzIGZyb20gWm9oby4uLicpO1xyXG4gICAgXHJcbiAgICBjb25zdCBwcm9qZWN0cyA9IGF3YWl0IHpvaG9TZXJ2aWNlLmdldFByb2plY3RzKCk7XHJcbiAgICBcclxuICAgIGlmIChwcm9qZWN0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gTm8gcHJvamVjdHMgcmV0dXJuZWQgZnJvbSBab2hvIC0gdGhpcyBtYXkgaW5kaWNhdGUgYW4gQVBJIGlzc3VlIG9yIHJhdGUgbGltaXRpbmcnKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFJldHVybiBhIG1vcmUgaW5mb3JtYXRpdmUgcmVzcG9uc2UgaW5zdGVhZCBvZiBlbXB0eSBkYXRhXHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgZGF0YTogW10sXHJcbiAgICAgICAgbWVzc2FnZTogJ05vIHByb2plY3RzIGZvdW5kLiBUaGlzIG1heSBiZSBkdWUgdG8gWm9obyBBUEkgcmF0ZSBsaW1pdGluZyBvciBhdXRoZW50aWNhdGlvbiBpc3N1ZXMuJyxcclxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICBzdWdnZXN0aW9uczogW1xyXG4gICAgICAgICAgJ0NoZWNrIFpvaG8gQVBJIHJhdGUgbGltaXRzICgxMDAgcmVxdWVzdHMvbWludXRlKScsXHJcbiAgICAgICAgICAnVmVyaWZ5IGF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzJyxcclxuICAgICAgICAgICdUcnkgYWdhaW4gaW4gYSBmZXcgbWludXRlcydcclxuICAgICAgICBdXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmluZm8oYOKchSBTdWNjZXNzZnVsbHkgZmV0Y2hlZCAke3Byb2plY3RzLmxlbmd0aH0gcHJvamVjdHMgZnJvbSBab2hvYCk7XHJcbiAgICBcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIGNvdW50OiBwcm9qZWN0cy5sZW5ndGgsXHJcbiAgICAgIGRhdGE6IHByb2plY3RzLFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgfSk7XHJcbiAgICBcclxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgcHJvamVjdHMgZnJvbSBab2hvOicsIHtcclxuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcclxuICAgICAgc3RhY2s6IGVycm9yLnN0YWNrLFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIGl0J3MgYSByYXRlIGxpbWl0aW5nIGVycm9yXHJcbiAgICBpZiAoZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ3JhdGUgbGltaXQnKSB8fCBlcnJvci5tZXNzYWdlPy5pbmNsdWRlcygndG9vIG1hbnkgcmVxdWVzdHMnKSkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIGRhdGE6IFtdLFxyXG4gICAgICAgIGVycm9yOiAnWm9obyBBUEkgcmF0ZSBsaW1pdCBleGNlZWRlZCcsXHJcbiAgICAgICAgbWVzc2FnZTogJ1RvbyBtYW55IHJlcXVlc3RzIHRvIFpvaG8gQVBJLiBQbGVhc2UgdHJ5IGFnYWluIGluIGEgZmV3IG1pbnV0ZXMuJyxcclxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICByZXRyeUFmdGVyOiAnMi01IG1pbnV0ZXMnLFxyXG4gICAgICAgIHN1Z2dlc3Rpb25zOiBbXHJcbiAgICAgICAgICAnV2FpdCBhIGZldyBtaW51dGVzIGJlZm9yZSByZXRyeWluZycsXHJcbiAgICAgICAgICAnQ2hlY2sgeW91ciBab2hvIEFQSSB1c2FnZScsXHJcbiAgICAgICAgICAnQ29uc2lkZXIgaW1wbGVtZW50aW5nIHJlcXVlc3QgY2FjaGluZydcclxuICAgICAgICBdXHJcbiAgICAgIH0sIHsgc3RhdHVzOiA0MjkgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIGl0J3MgYW4gYXV0aGVudGljYXRpb24gZXJyb3JcclxuICAgIGlmIChlcnJvci5tZXNzYWdlPy5pbmNsdWRlcygnYXV0aGVudGljYXRpb24nKSB8fCBlcnJvci5tZXNzYWdlPy5pbmNsdWRlcygndG9rZW4nKSkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIGRhdGE6IFtdLFxyXG4gICAgICAgIGVycm9yOiAnWm9obyBhdXRoZW50aWNhdGlvbiBmYWlsZWQnLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gYXV0aGVudGljYXRlIHdpdGggWm9obyBBUEkuIFBsZWFzZSBjaGVjayB5b3VyIGNyZWRlbnRpYWxzLicsXHJcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgc3VnZ2VzdGlvbnM6IFtcclxuICAgICAgICAgICdWZXJpZnkgWm9obyBPQXV0aCBjcmVkZW50aWFscycsXHJcbiAgICAgICAgICAnQ2hlY2sgZW52aXJvbm1lbnQgdmFyaWFibGVzJyxcclxuICAgICAgICAgICdSZWZyZXNoIGF1dGhlbnRpY2F0aW9uIHRva2VucydcclxuICAgICAgICBdXHJcbiAgICAgIH0sIHsgc3RhdHVzOiA0MDEgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIEdlbmVyaWMgZXJyb3IgcmVzcG9uc2VcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBjb3VudDogMCxcclxuICAgICAgZGF0YTogW10sXHJcbiAgICAgIGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIHByb2plY3RzJyxcclxuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCAnQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCB3aGlsZSBmZXRjaGluZyBwcm9qZWN0cycsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICBzdWdnZXN0aW9uczogW1xyXG4gICAgICAgICdDaGVjayBWZXJjZWwgbG9ncyBmb3IgZGV0YWlsZWQgZXJyb3IgaW5mb3JtYXRpb24nLFxyXG4gICAgICAgICdWZXJpZnkgWm9obyBBUEkgY29uZmlndXJhdGlvbicsXHJcbiAgICAgICAgJ0NvbnRhY3Qgc3VwcG9ydCBpZiB0aGUgaXNzdWUgcGVyc2lzdHMnXHJcbiAgICAgIF1cclxuICAgIH0sIHsgc3RhdHVzOiA1MDAgfSk7XHJcbiAgfVxyXG59ICJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJ6b2hvU2VydmljZSIsIkdFVCIsInJlcXVlc3QiLCJjb25zb2xlIiwiaW5mbyIsInByb2plY3RzIiwiZ2V0UHJvamVjdHMiLCJsZW5ndGgiLCJ3YXJuIiwianNvbiIsInN1Y2Nlc3MiLCJjb3VudCIsImRhdGEiLCJtZXNzYWdlIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic3VnZ2VzdGlvbnMiLCJlcnJvciIsInN0YWNrIiwiaW5jbHVkZXMiLCJyZXRyeUFmdGVyIiwic3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/projects/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/zoho.ts":
/*!*********************!*\
  !*** ./lib/zoho.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchInvoices: () => (/* binding */ fetchInvoices),\n/* harmony export */   fetchProjects: () => (/* binding */ fetchProjects),\n/* harmony export */   zohoService: () => (/* binding */ zohoService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var p_limit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-limit */ \"(rsc)/./node_modules/p-limit/index.js\");\n/* harmony import */ var p_limit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(p_limit__WEBPACK_IMPORTED_MODULE_0__);\n\n\n// Type guard for errors with response property\nconst hasResponse = (err)=>{\n    return typeof err === \"object\" && err !== null && \"response\" in err;\n};\nclass ZohoService {\n    constructor(){\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.refreshPromise = null;\n        this.TOKEN_REFRESH_BUFFER = 10 * 60 * 1000 // 10 minutes buffer (increased for better caching)\n        ;\n        this.autoRefreshTimer = null;\n        this.AUTO_REFRESH_INTERVAL = 45 * 60 * 1000 // 45 minutes\n        ;\n        this.lastRefreshTime = 0 // Track when auto-refresh was last triggered\n        ;\n        this.ACCOUNTS_BASE = process.env.ZOHO_ACCOUNTS_BASE || \"https://accounts.zoho.com\";\n        this.API_BASE = process.env.ZOHO_API_BASE || \"https://www.zohoapis.com\";\n        this.organizationValidated = false;\n        // Rate limiting properties\n        this.requestCount = 0;\n        this.lastRequestTime = 0;\n        this.MAX_REQUESTS_PER_MINUTE = 80 // Conservative limit (Zoho allows 100, we use 80)\n        ;\n        this.MIN_REQUEST_INTERVAL = 2000 // 2 seconds between requests (reduced for better performance)\n        ;\n        this.retryCount = 0;\n        this.MAX_RETRIES = 5 // Increased from 3 to 5\n        ;\n        this.BASE_DELAY = 5000 // Increased from 2000 to 5000ms base delay for exponential backoff\n        ;\n        this.cachedAccessToken = null // Fallback cached token\n        ;\n        // p-limit rate limiter for concurrent API calls\n        this.rateLimiter = p_limit__WEBPACK_IMPORTED_MODULE_0___default()(50) // Limit to 50 concurrent calls\n        ;\n        // Start automatic token refresh\n        this._startAutoRefresh();\n        console.log(`Zoho API base: ${this.API_BASE} | Accounts base: ${this.ACCOUNTS_BASE}`);\n    }\n    _startAutoRefresh() {\n        // Clear any existing timer\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n        }\n        // Set up automatic refresh every 45 minutes\n        this.autoRefreshTimer = setInterval(async ()=>{\n            try {\n                console.log(\"Auto-refreshing Zoho token (45-minute interval)...\");\n                this.lastRefreshTime = Date.now(); // Track when refresh was triggered\n                await this.forceRefreshToken();\n                console.log(\"Auto-refresh completed successfully\");\n            } catch (error) {\n                console.error(\"Auto-refresh failed:\", error);\n            }\n        }, this.AUTO_REFRESH_INTERVAL);\n        // Set initial refresh time\n        this.lastRefreshTime = Date.now();\n        console.log(\"Automatic Zoho token refresh started (every 45 minutes)\");\n    }\n    _stopAutoRefresh() {\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n            this.autoRefreshTimer = null;\n            console.log(\"Automatic Zoho token refresh stopped\");\n        }\n    }\n    async getAccessToken() {\n        try {\n            const now = Date.now();\n            const timeUntilExpiry = this.tokenExpiry - now;\n            // Check if we have a valid token with sufficient buffer time\n            if (this.accessToken && timeUntilExpiry > this.TOKEN_REFRESH_BUFFER && process.env.ZOHO_FORCE_REFRESH !== \"true\") {\n                const minutesLeft = Math.round(timeUntilExpiry / 60000);\n                console.log(`🔐 Using cached token (expires in ${minutesLeft} minutes)`);\n                return this.accessToken;\n            }\n            // Log token status for debugging\n            if (this.accessToken && timeUntilExpiry > 0) {\n                const minutesLeft = Math.round(timeUntilExpiry / 60000);\n                console.log(`⚠️ Token expires soon (${minutesLeft} minutes), refreshing proactively`);\n            } else if (this.accessToken) {\n                console.log(\"\\uD83D\\uDD04 Token expired, refreshing...\");\n            } else {\n                console.log(\"\\uD83C\\uDD95 No token available, obtaining new one...\");\n            }\n            console.log(\"Token expired or missing, refreshing...\");\n            // Clear any existing token\n            this.accessToken = null;\n            this.tokenExpiry = 0;\n            if (false) {}\n            // Ensure only one refresh happens at a time across concurrent requests\n            if (!this.refreshPromise) {\n                this.refreshPromise = this._performTokenRefreshWithBackoff();\n            }\n            const token = await this.refreshPromise;\n            // Clear the in-flight promise after completion\n            this.refreshPromise = null;\n            return token;\n        } catch (error) {\n            console.error(\"Error refreshing Zoho access token:\", error);\n            // Log specific error details for debugging\n            if (axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(error)) {\n                console.error(\"Axios error details:\", {\n                    status: hasResponse(error) ? error.response?.status : undefined,\n                    statusText: hasResponse(error) ? error.response?.statusText : undefined,\n                    data: hasResponse(error) ? error.response?.data : undefined,\n                    message: error.message,\n                    headers: hasResponse(error) ? error.response?.headers : undefined // Log headers for rate limit info\n                });\n                // Log rate limit headers if available\n                if (hasResponse(error) && error.response?.headers) {\n                    const rateLimitHeaders = {\n                        \"X-Rate-Limit\": error.response.headers[\"x-rate-limit\"],\n                        \"X-Rate-Limit-Remaining\": error.response.headers[\"x-rate-limit-remaining\"],\n                        \"X-Rate-Limit-Reset\": error.response.headers[\"x-rate-limit-reset\"],\n                        \"Retry-After\": error.response.headers[\"retry-after\"]\n                    };\n                    console.error(\"Rate limit headers:\", rateLimitHeaders);\n                }\n            }\n            // Try to fall back to cached token if available\n            if (this.cachedAccessToken) {\n                console.warn(\"Falling back to cached access token due to refresh failure\");\n                return this.cachedAccessToken;\n            }\n            throw new Error(`Failed to authenticate with Zoho: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    // Perform the token refresh with form-encoded body and improved exponential backoff\n    async _performTokenRefreshWithBackoff() {\n        const maxAttempts = 5; // Increased from 3 to 5\n        for(let attempt = 1; attempt <= maxAttempts; attempt++){\n            try {\n                const formData = new URLSearchParams();\n                formData.append(\"refresh_token\", \"1000.347acbb43b4a925483b2a29677f38c00.1d602040864cf160552f3499af5e86d9\" || 0);\n                formData.append(\"client_id\", \"1000.8RL8WMTDXS0WIP2EJF2XUS6NDSLQEP\" || 0);\n                formData.append(\"client_secret\", \"8a7ee3c04f0a0d860dd215c4449deab9bf15d1d00b\" || 0);\n                formData.append(\"grant_type\", \"refresh_token\");\n                const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(`${this.ACCOUNTS_BASE}/oauth/v2/token`, formData, {\n                    headers: {\n                        \"Content-Type\": \"application/x-www-form-urlencoded\"\n                    },\n                    timeout: 15000\n                });\n                if (!response.data.access_token) {\n                    throw new Error(\"No access token received from Zoho\");\n                }\n                // Cache the successful token and expiry information\n                this.accessToken = response.data.access_token;\n                this.tokenExpiry = Date.now() + response.data.expires_in * 1000;\n                this.lastRefreshTime = Date.now();\n                // Cache the successful token as fallback\n                this.cachedAccessToken = response.data.access_token;\n                console.log(`Token refreshed successfully. Expires in ${Math.round(response.data.expires_in / 60)} minutes`);\n                console.log(\"Zoho token refresh response:\", response.data);\n                // Log token caching details\n                console.log(`🔐 Token cached: access_token=${this.accessToken.substring(0, 10)}..., expires_in=${response.data.expires_in}s, expiry=${new Date(this.tokenExpiry).toISOString()}`);\n                // Validate scopes on refreshed token\n                try {\n                    const scopeInfo = await this.checkTokenScopes(this.accessToken);\n                    console.log(\"Zoho granted scopes:\", scopeInfo?.scope || \"unknown\");\n                    if (typeof scopeInfo?.scope === \"string\" && !scopeInfo.scope.includes(\"ZohoBooks.reports.READ\")) {\n                        console.warn(\"⚠️ Missing ZohoBooks.reports.READ scope. Regenerate token.\");\n                    }\n                } catch (scopeErr) {\n                    console.error(\"Zoho token scope verification failed:\", scopeErr?.message);\n                }\n                return this.accessToken;\n            } catch (err) {\n                // If rate-limited by Zoho during token refresh, implement exponential backoff\n                const isAxios = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(err);\n                const status = isAxios && hasResponse(err) ? err.response?.status : undefined;\n                const description = isAxios && hasResponse(err) ? err.response?.data?.error_description : undefined;\n                if (status === 400 && typeof description === \"string\" && description.toLowerCase().includes(\"too many requests\")) {\n                    // Exponential backoff: delay = base * 2^attempt\n                    const delayMs = this.BASE_DELAY * Math.pow(2, attempt - 1) + Math.floor(Math.random() * 1000);\n                    console.warn(`Zoho token refresh rate-limited (attempt ${attempt}/${maxAttempts}). Waiting ${delayMs}ms before retry.`);\n                    await new Promise((resolve)=>setTimeout(resolve, delayMs));\n                    continue;\n                }\n                // For other errors, do not retry endlessly\n                if (attempt === maxAttempts) {\n                    console.error(`Zoho token refresh failed after ${maxAttempts} attempts:`, err);\n                    throw new Error(\"Zoho token refresh rate-limited. Check daily API limits or token validity.\");\n                }\n                throw err;\n            }\n        }\n        throw new Error(\"Zoho token refresh failed after maximum retries\");\n    }\n    async refreshAccessToken() {\n        try {\n            console.log(\"Refreshing Zoho access token...\");\n            // Create form data for the request\n            const formData = new URLSearchParams();\n            formData.append(\"refresh_token\", \"1000.347acbb43b4a925483b2a29677f38c00.1d602040864cf160552f3499af5e86d9\" || 0);\n            formData.append(\"client_id\", \"1000.8RL8WMTDXS0WIP2EJF2XUS6NDSLQEP\" || 0);\n            formData.append(\"client_secret\", \"8a7ee3c04f0a0d860dd215c4449deab9bf15d1d00b\" || 0);\n            formData.append(\"grant_type\", \"refresh_token\");\n            const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(`${this.ACCOUNTS_BASE}/oauth/v2/token`, formData, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            });\n            // Cache the successful token and expiry information\n            this.accessToken = response.data.access_token;\n            this.tokenExpiry = Date.now() + response.data.expires_in * 1000;\n            // Cache the successful token as fallback\n            this.cachedAccessToken = response.data.access_token;\n            console.log(`Token refreshed successfully. Expires in ${Math.round(response.data.expires_in / 60)} minutes`);\n            console.log(`🔐 Token cached: access_token=${this.accessToken.substring(0, 10)}..., expires_in=${response.data.expires_in}s, expiry=${new Date(this.tokenExpiry).toISOString()}`);\n            return this.accessToken;\n        } catch (error) {\n            console.error(\"Error refreshing Zoho access token:\", error);\n            throw new Error(\"Failed to authenticate with Zoho\");\n        }\n    }\n    async makeRequest(endpoint) {\n        // Use p-limit rate limiter to prevent 429 errors\n        return this.rateLimiter(async ()=>{\n            try {\n                // Apply rate limiting\n                await this.applyRateLimit();\n                const token = await this.getAccessToken();\n                // Log API call count for monitoring\n                this.requestCount++;\n                console.log(`📊 Zoho API call #${this.requestCount} to: ${endpoint}`);\n                // Validate token before making request\n                if (!token || token === \"undefined\") {\n                    throw new Error(\"Invalid or missing access token\");\n                }\n                // Validate organization before hitting reports endpoints\n                if (!this.organizationValidated && endpoint.startsWith(\"reports/\")) {\n                    await this.validateOrganization(token);\n                }\n                console.info(`Making Zoho API request to: ${endpoint}`);\n                console.info(`Token (first 10 chars): ${token?.substring(0, 10) ?? \"N/A\"}...`);\n                // Create AbortController for timeout\n                const controller = new AbortController();\n                const timeoutId = setTimeout(()=>controller.abort(), 15000); // 15 second timeout\n                try {\n                    const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(`${this.API_BASE}/books/v3/${endpoint}`, {\n                        headers: {\n                            \"Authorization\": `Bearer ${token}`,\n                            \"Content-Type\": \"application/json\"\n                        },\n                        params: {\n                            organization_id: \"652094923\"\n                        },\n                        timeout: 15000,\n                        signal: controller.signal\n                    });\n                    clearTimeout(timeoutId);\n                    // Reset retry count on success\n                    this.retryCount = 0;\n                    this.requestCount++;\n                    this.lastRequestTime = Date.now();\n                    console.info(`Zoho API request successful: ${endpoint}`);\n                    return response.data;\n                } catch (axiosError) {\n                    clearTimeout(timeoutId);\n                    // Handle timeout specifically\n                    if (axiosError.code === \"ECONNABORTED\" || axiosError.message?.includes(\"timeout\")) {\n                        throw new Error(`Zoho API request timed out for ${endpoint}`);\n                    }\n                    throw axiosError;\n                }\n            } catch (error) {\n                // Handle rate limiting (400 with specific error message)\n                if (hasResponse(error) && error.response?.status === 400 && error.response?.data?.error_description?.includes(\"too many requests\")) {\n                    console.warn(\"Zoho rate limit hit, implementing exponential backoff...\");\n                    await this.handleRateLimit();\n                    // Retry the request after backoff\n                    if (this.retryCount < this.MAX_RETRIES) {\n                        this.retryCount++;\n                        console.info(`Retrying request after rate limit backoff (attempt ${this.retryCount})`);\n                        return this.makeRequest(endpoint);\n                    } else {\n                        throw new Error(\"Zoho API rate limit exceeded after maximum retries. Please try again later.\");\n                    }\n                }\n                // Handle 429 Too Many Requests (explicit rate limit)\n                if (hasResponse(error) && error.response?.status === 429) {\n                    console.warn(\"Zoho 429 rate limit hit, implementing exponential backoff...\");\n                    await this.handleRateLimit();\n                    // Retry the request after backoff\n                    if (this.retryCount < this.MAX_RETRIES) {\n                        this.retryCount++;\n                        console.info(`Retrying request after 429 backoff (attempt ${this.retryCount})`);\n                        return this.makeRequest(endpoint);\n                    } else {\n                        throw new Error(\"Zoho API rate limit exceeded after maximum retries. Please try again later.\");\n                    }\n                }\n                // If we get a 401, try refreshing the token once\n                if (hasResponse(error) && error.response?.status === 401) {\n                    if (hasResponse(error) && error.response?.data?.code === 57) {\n                        console.error(\"Zoho API authorization error (code 57). Likely missing required scopes such as ZohoBooks.reports.READ.\");\n                    }\n                    console.info(\"Token expired, refreshing...\");\n                    // Clear the current token and force a refresh\n                    this.accessToken = null;\n                    this.tokenExpiry = 0;\n                    try {\n                        const newToken = await this.forceRefreshToken();\n                        // Validate the new token\n                        if (!newToken || newToken === \"undefined\") {\n                            throw new Error(\"Failed to obtain valid token after refresh\");\n                        }\n                        console.info(`Retrying request with new token: ${endpoint}`);\n                        // Retry the request with the new token\n                        const retryResponse = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(`${this.API_BASE}/books/v3/${endpoint}`, {\n                            headers: {\n                                \"Authorization\": `Bearer ${newToken}`,\n                                \"Content-Type\": \"application/json\"\n                            },\n                            params: {\n                                organization_id: \"652094923\"\n                            },\n                            timeout: 15000\n                        });\n                        console.info(\"Request retry successful after token refresh\");\n                        return retryResponse.data;\n                    } catch (refreshError) {\n                        console.error(\"Failed to refresh token or retry request:\", refreshError);\n                        // Log detailed refresh error information\n                        if (axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(refreshError)) {\n                            console.error(\"Token refresh Axios error details:\", {\n                                status: hasResponse(refreshError) ? refreshError.response?.status : undefined,\n                                statusText: hasResponse(refreshError) ? refreshError.response?.statusText : undefined,\n                                data: hasResponse(refreshError) ? refreshError.response?.data : undefined,\n                                message: refreshError.message,\n                                endpoint: endpoint\n                            });\n                        }\n                        // Check if it's a rate limiting issue during token refresh\n                        if (hasResponse(refreshError) && refreshError.response?.status === 400 && refreshError.response?.data?.error_description?.includes(\"too many requests\")) {\n                            throw new Error(`Zoho token refresh rate limited: ${endpoint}. Please wait before retrying.`);\n                        }\n                        // Check if it's an authentication issue during token refresh\n                        if (hasResponse(refreshError) && refreshError.response?.status === 400 && refreshError.response?.data?.error_description?.includes(\"invalid\")) {\n                            throw new Error(`Zoho token refresh failed - invalid credentials: ${endpoint}. Check your OAuth configuration.`);\n                        }\n                        throw new Error(`Zoho API authentication failed after token refresh: ${endpoint}. Error: ${refreshError.message}`);\n                    }\n                }\n                // Log the error details for debugging\n                console.error(`Zoho API request failed for ${endpoint}:`, {\n                    status: hasResponse(error) ? error.response?.status : undefined,\n                    statusText: hasResponse(error) ? error.response?.statusText : undefined,\n                    data: hasResponse(error) ? error.response?.data : undefined,\n                    message: error.message\n                });\n                if (hasResponse(error) && error.response?.data?.code === 57) {\n                    console.error(\"Zoho API authorization error (code 57). Verify organization_id and OAuth scopes (ZohoBooks.reports.READ).\");\n                }\n                throw error;\n            }\n        });\n    }\n    // Check granted scopes for current access token\n    async checkTokenScopes(token) {\n        try {\n            const url = `${this.ACCOUNTS_BASE}/oauth/v2/tokeninfo?token=${encodeURIComponent(token)}`;\n            const res = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(url, {\n                timeout: 10000\n            });\n            return res.data;\n        } catch (err) {\n            // Surface concise context but do not fail the main flow\n            const msg = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(err) ? (hasResponse(err) ? err.response?.data : undefined) || err.message : String(err);\n            throw new Error(typeof msg === \"string\" ? msg : JSON.stringify(msg));\n        }\n    }\n    // Validate the configured organization ID by calling organizations endpoint\n    async validateOrganization(token) {\n        try {\n            const orgId = \"652094923\";\n            if (!orgId) {\n                console.warn(\"ZOHO_ORGANIZATION_ID not set. Reports calls may fail.\");\n                return;\n            }\n            const url = `${this.API_BASE}/books/v3/organizations`;\n            const res = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(url, {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                timeout: 15000\n            });\n            const orgs = res.data?.organizations || [];\n            const found = orgs.some((o)=>String(o.organization_id) === String(orgId));\n            if (!found) {\n                console.error(`Provided organization_id=${orgId} not found in Zoho account. Fetched organizations: ${JSON.stringify(orgs)}`);\n            } else {\n                this.organizationValidated = true;\n                console.log(`Validated Zoho organization_id=${orgId}`);\n            }\n        } catch (err) {\n            const status = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(err) ? hasResponse(err) ? err.response?.status : undefined : undefined;\n            const data = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(err) ? hasResponse(err) ? err.response?.data : undefined : undefined;\n            console.error(\"Failed to validate Zoho organization:\", {\n                status,\n                data,\n                message: err.message\n            });\n        // Do not throw; allow request to proceed but logs will help diagnose\n        }\n    }\n    async applyRateLimit() {\n        const now = Date.now();\n        // Check if we need to wait between requests\n        if (this.lastRequestTime > 0) {\n            const timeSinceLastRequest = now - this.lastRequestTime;\n            if (timeSinceLastRequest < this.MIN_REQUEST_INTERVAL) {\n                const waitTime = this.MIN_REQUEST_INTERVAL - timeSinceLastRequest;\n                console.info(`Rate limiting: waiting ${waitTime}ms before next request`);\n                await new Promise((resolve)=>setTimeout(resolve, waitTime));\n            }\n        }\n        // Check if we've exceeded the per-minute limit\n        if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n            const timeSinceFirstRequest = now - this.lastRequestTime;\n            if (timeSinceFirstRequest < 60000) {\n                const waitTime = 60000 - timeSinceFirstRequest;\n                console.warn(`Rate limiting: exceeded ${this.MAX_REQUESTS_PER_MINUTE} requests per minute, waiting ${waitTime}ms`);\n                await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                this.requestCount = 0;\n            } else {\n                // Reset counter if more than 1 minute has passed\n                this.requestCount = 0;\n            }\n        }\n    }\n    async handleRateLimit() {\n        const delay = this.BASE_DELAY * Math.pow(2, this.retryCount);\n        const jitter = Math.random() * 1000; // Add up to 1 second of jitter\n        const totalDelay = delay + jitter;\n        console.warn(`Rate limit backoff: waiting ${totalDelay}ms before retry (attempt ${this.retryCount + 1})`);\n        await new Promise((resolve)=>setTimeout(resolve, totalDelay));\n        // Reset request counters to allow fresh start\n        this.requestCount = 0;\n        this.lastRequestTime = 0;\n    }\n    async getProjects() {\n        try {\n            let allProjects = [];\n            let page = 1;\n            const perPage = 200;\n            while(true){\n                const data = await this.makeRequest(`projects?page=${page}&per_page=${perPage}`);\n                const projects = data.projects?.map((project)=>{\n                    // Log the first project to see available fields\n                    if (page === 1 && allProjects.length === 0) {\n                        console.log(\"Sample Zoho project data:\", JSON.stringify(project, null, 2));\n                    }\n                    return {\n                        project_id: project.project_id,\n                        project_name: project.project_name || project.name || \"\",\n                        description: project.description || \"\",\n                        status: project.status || \"active\",\n                        start_date: project.start_date || \"\",\n                        end_date: project.end_date || \"\",\n                        budget_amount: project.budget_amount || 0,\n                        rate_per_hour: project.rate_per_hour || 0,\n                        customer_id: project.customer_id || \"\",\n                        customer_name: project.customer_name || \"\",\n                        signed_fee: undefined\n                    };\n                }) || [];\n                allProjects = allProjects.concat(projects);\n                // Check if we've reached the end\n                if (projects.length < perPage) {\n                    break;\n                }\n                page++;\n            }\n            console.log(`Fetched ${allProjects.length} projects from Zoho`);\n            return allProjects;\n        } catch (error) {\n            console.error(\"Error fetching projects:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithRevenueBudget() {\n        try {\n            console.log(\"Fetching projects with revenue budget data...\");\n            const projects = await this.getProjects();\n            // Log projects that have revenue_budget data\n            const projectsWithRevenueBudget = projects.filter((project)=>{\n                const hasRevenueBudget = project.signed_fee && project.signed_fee > 0;\n                if (hasRevenueBudget) {\n                    console.log(`Project ${project.project_name} has revenue budget: $${project.signed_fee}`);\n                }\n                return hasRevenueBudget;\n            });\n            console.log(`Found ${projectsWithRevenueBudget.length} projects with revenue budget data`);\n            return projects;\n        } catch (error) {\n            console.error(\"Error fetching projects with revenue budget:\", error);\n            return [];\n        }\n    }\n    async debugProjectFields() {\n        try {\n            console.log(\"Debugging Zoho project fields...\");\n            const data = await this.makeRequest(\"projects?page=1&per_page=5\");\n            if (data.projects && data.projects.length > 0) {\n                console.log(\"Available fields in Zoho project response:\");\n                const sampleProject = data.projects[0];\n                Object.keys(sampleProject).forEach((key)=>{\n                    console.log(`  ${key}: ${sampleProject[key]} (${typeof sampleProject[key]})`);\n                });\n                // Check specifically for revenue_budget\n                if (sampleProject.revenue_budget !== undefined) {\n                    console.log(`✅ Found revenue_budget field: ${sampleProject.revenue_budget}`);\n                } else {\n                    console.log(\"❌ revenue_budget field not found in Zoho response\");\n                    console.log(\"Available budget-related fields:\");\n                    Object.keys(sampleProject).forEach((key)=>{\n                        if (key.toLowerCase().includes(\"budget\") || key.toLowerCase().includes(\"revenue\")) {\n                            console.log(`  ${key}: ${sampleProject[key]}`);\n                        }\n                    });\n                }\n            } else {\n                console.log(\"No projects found in Zoho response\");\n            }\n        } catch (error) {\n            console.error(\"Error debugging project fields:\", error);\n        }\n    }\n    async getProjectsWithEstimates() {\n        try {\n            const projects = await this.getProjects();\n            // For the first few projects, try to get estimates to see if that contains the signed fee\n            const projectsWithEstimates = await Promise.all(projects.slice(0, 5).map(async (project)=>{\n                try {\n                    const estimates = await this.getProjectEstimates(project.project_id);\n                    const totalEstimateAmount = estimates.reduce((sum, estimate)=>sum + (estimate.total || 0), 0);\n                    console.log(`Project ${project.project_name} estimates:`, estimates.length, \"total amount:\", totalEstimateAmount);\n                    return {\n                        ...project,\n                        signed_fee: project.signed_fee || totalEstimateAmount || 0\n                    };\n                } catch (error) {\n                    console.error(`Error fetching estimates for project ${project.project_id}:`, error);\n                    return project;\n                }\n            }));\n            // Return all projects, with the first 5 having updated signed fees from estimates\n            return [\n                ...projectsWithEstimates,\n                ...projects.slice(5)\n            ];\n        } catch (error) {\n            console.error(\"Error fetching projects with estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithInvoiceTotals() {\n        try {\n            const [projects, invoices] = await Promise.all([\n                this.getProjects(),\n                this.getInvoices()\n            ]);\n            // Calculate signed fee as total of all invoices for each project\n            const projectsWithInvoiceTotals = projects.map((project)=>{\n                const projectInvoices = invoices.filter((invoice)=>invoice.project_id === project.project_id);\n                const totalInvoiceAmount = projectInvoices.reduce((sum, invoice)=>sum + invoice.amount, 0);\n                console.log(`Project ${project.project_name} invoices:`, projectInvoices.length, \"total amount:\", totalInvoiceAmount);\n                return {\n                    ...project,\n                    signed_fee: project.signed_fee || totalInvoiceAmount || 0\n                };\n            });\n            return projectsWithInvoiceTotals;\n        } catch (error) {\n            console.error(\"Error fetching projects with invoice totals:\", error);\n            return [];\n        }\n    }\n    async getInvoices() {\n        try {\n            console.log(\"\\uD83D\\uDCC4 Fetching invoices from Zoho...\");\n            const data = await this.makeRequest(\"invoices\");\n            const invoices = data.invoices?.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                })) || [];\n            // Log invoice counts and details\n            console.log(`📊 Zoho invoices fetched: ${invoices.length} total invoices`);\n            if (invoices.length > 0) {\n                const statusCounts = invoices.reduce((acc, inv)=>{\n                    acc[inv.status] = (acc[inv.status] || 0) + 1;\n                    return acc;\n                }, {});\n                console.log(\"\\uD83D\\uDCCB Invoice status breakdown:\", statusCounts);\n                // Log sample invoice data for debugging\n                const sampleInvoice = invoices[0];\n                console.log(\"\\uD83D\\uDCC4 Sample invoice data:\", {\n                    id: sampleInvoice.invoice_id,\n                    number: sampleInvoice.invoice_number,\n                    project: sampleInvoice.project_id,\n                    amount: sampleInvoice.amount,\n                    status: sampleInvoice.status\n                });\n            }\n            return invoices;\n        } catch (error) {\n            console.error(\"Error fetching invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectInvoices(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/invoices`);\n            return data.invoices?.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                })) || [];\n        } catch (error) {\n            console.error(\"Error fetching project invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectDetails(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}`);\n            console.log(`Project ${projectId} details:`, JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching project details:\", error);\n            return null;\n        }\n    }\n    async getProjectEstimates(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/estimates`);\n            console.log(`Project ${projectId} estimates:`, JSON.stringify(data, null, 2));\n            return data.estimates || [];\n        } catch (error) {\n            console.error(\"Error fetching project estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectContracts(projectId) {\n        try {\n            const data = await this.makeRequest(`projects/${projectId}/contracts`);\n            console.log(`Project ${projectId} contracts:`, JSON.stringify(data, null, 2));\n            return data.contracts || [];\n        } catch (error) {\n            console.error(\"Error fetching project contracts:\", error);\n            return [];\n        }\n    }\n    // New method to get Profit & Loss statement\n    async getProfitAndLoss(startDate, endDate) {\n        try {\n            console.info(`📊 Fetching Zoho Profit & Loss for ${startDate} to ${endDate}`);\n            const data = await this.makeRequest(`reports/profitandloss?from_date=${startDate}&to_date=${endDate}`);\n            const sizeBytes = JSON.stringify(data || {}).length;\n            const keys = Object.keys(data || {}).length;\n            console.info(`✅ Profit & Loss data fetched successfully (keys: ${keys}, bytes: ${sizeBytes})`);\n            if (!data || keys === 0) {\n                console.warn(\"No data for reports/profitandloss. Verify organization ID, date range (2025-01-01 to 2025-08-13), or data in Zoho dashboard.\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"❌ Error fetching Profit & Loss:\", error);\n            console.warn(\"\\uD83C\\uDFAD Profit & Loss data unavailable, will use defaults\");\n            return null;\n        }\n    }\n    // New method to get Cash Flow statement\n    async getCashFlow(startDate, endDate) {\n        try {\n            console.info(`💰 Fetching Zoho Cash Flow for ${startDate} to ${endDate}`);\n            const data = await this.makeRequest(`reports/cashflow?from_date=${startDate}&to_date=${endDate}`);\n            const sizeBytes = JSON.stringify(data || {}).length;\n            const keys = Object.keys(data || {}).length;\n            console.info(`✅ Cash Flow data fetched successfully (keys: ${keys}, bytes: ${sizeBytes})`);\n            if (!data || keys === 0) {\n                console.warn(\"No data for reports/cashflow. Verify organization ID, date range (2025-01-01 to 2025-08-13), or data in Zoho dashboard.\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"❌ Error fetching Cash Flow:\", error);\n            console.warn(\"\\uD83C\\uDFAD Cash Flow data unavailable, will use defaults\");\n            return null;\n        }\n    }\n    // New method to get Balance Sheet\n    async getBalanceSheet(date) {\n        try {\n            console.info(`📈 Fetching Zoho Balance Sheet for ${date}`);\n            const data = await this.makeRequest(`reports/balancesheet?date=${date}`);\n            const sizeBytes = JSON.stringify(data || {}).length;\n            const keys = Object.keys(data || {}).length;\n            console.info(`✅ Balance Sheet data fetched successfully (keys: ${keys}, bytes: ${sizeBytes})`);\n            if (!data || keys === 0) {\n                console.warn(\"No data for reports/balancesheet. Verify organization ID, date range (2025-01-01 to 2025-08-13), or data in Zoho dashboard.\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"❌ Error fetching Balance Sheet:\", error);\n            console.warn(\"\\uD83C\\uDFAD Balance Sheet data unavailable, will use defaults\");\n            return null;\n        }\n    }\n    // New method to get Chart of Accounts\n    async getChartOfAccounts() {\n        try {\n            const data = await this.makeRequest(\"chartofaccounts\");\n            console.log(\"Chart of Accounts data:\", JSON.stringify(data, null, 2));\n            return data.chartofaccounts || [];\n        } catch (error) {\n            console.error(\"Error fetching Chart of Accounts:\", error);\n            return [];\n        }\n    }\n    // New method to get Journal Entries for a date range\n    async getJournalEntries(startDate, endDate) {\n        try {\n            const data = await this.makeRequest(`journalentries?from_date=${startDate}&to_date=${endDate}`);\n            console.log(\"Journal Entries data:\", JSON.stringify(data, null, 2));\n            return data.journalentries || [];\n        } catch (error) {\n            console.error(\"Error fetching Journal Entries:\", error);\n            return [];\n        }\n    }\n    // New method to get comprehensive financial metrics\n    async getFinancialMetrics(startDate, endDate) {\n        try {\n            console.info(`💰 Fetching Zoho financial metrics for ${startDate} to ${endDate}`);\n            const [plData, cfData, bsData] = await Promise.allSettled([\n                this.getProfitAndLoss(startDate, endDate),\n                this.getCashFlow(startDate, endDate),\n                this.getBalanceSheet(endDate)\n            ]);\n            // Log raw response status and body length for each report\n            console.info(\"\\uD83D\\uDCCA Financial reports raw response details:\", {\n                profitLoss: {\n                    status: plData.status,\n                    bodyLength: plData.status === \"fulfilled\" ? JSON.stringify(plData.value || {}).length : \"N/A\",\n                    hasData: plData.status === \"fulfilled\" && plData.value && Object.keys(plData.value || {}).length > 0\n                },\n                cashFlow: {\n                    status: cfData.status,\n                    bodyLength: cfData.status === \"fulfilled\" ? JSON.stringify(cfData.value || {}).length : \"N/A\",\n                    hasData: cfData.status === \"fulfilled\" && cfData.value && Object.keys(cfData.value || {}).length > 0\n                },\n                balanceSheet: {\n                    status: bsData.status,\n                    bodyLength: bsData.status === \"fulfilled\" ? JSON.stringify(bsData.value || {}).length : \"N/A\",\n                    hasData: bsData.status === \"fulfilled\" && bsData.value && Object.keys(bsData.value || {}).length > 0\n                }\n            });\n            // Check for 404 errors and log specific warnings\n            if (plData.status === \"rejected\") {\n                const error = plData.reason;\n                if (hasResponse(error) && error.response?.status === 404) {\n                    console.warn(\"⚠️ Profit & Loss returned 404 - Invalid endpoint - check Zoho API docs\");\n                } else {\n                    console.warn(\"⚠️ Profit & Loss data failed:\", plData.reason);\n                }\n            }\n            if (cfData.status === \"rejected\") {\n                const error = cfData.reason;\n                if (hasResponse(error) && error.response?.status === 404) {\n                    console.warn(\"⚠️ Cash Flow returned 404 - Invalid endpoint - check Zoho API docs\");\n                } else {\n                    console.warn(\"⚠️ Cash Flow data failed:\", cfData.reason);\n                }\n            }\n            if (bsData.status === \"rejected\") {\n                const error = bsData.reason;\n                if (hasResponse(error) && error.response?.status === 404) {\n                    console.warn(\"⚠️ Balance Sheet returned 404 - Invalid endpoint - check Zoho API docs\");\n                } else {\n                    console.warn(\"⚠️ Balance Sheet data failed:\", bsData.reason);\n                }\n            }\n            // Extract financial metrics from the responses with fallbacks\n            const revenue = plData.status === \"fulfilled\" ? plData.value?.revenue?.total || 0 : 0;\n            const expenses = plData.status === \"fulfilled\" ? plData.value?.expenses?.total || 0 : 0;\n            const grossProfit = revenue - expenses;\n            // Calculate net profit (may need adjustment based on actual Zoho response structure)\n            const operatingExpenses = plData.status === \"fulfilled\" ? plData.value?.operating_expenses?.total || 0 : 0;\n            const netProfit = grossProfit - operatingExpenses;\n            const operatingIncome = grossProfit - operatingExpenses;\n            // Extract cash flow data\n            const cashFlow = cfData.status === \"fulfilled\" ? cfData.value?.net_cash_flow || 0 : 0;\n            const accountsReceivable = bsData.status === \"fulfilled\" ? bsData.value?.current_assets?.accounts_receivable || 0 : 0;\n            const accountsPayable = bsData.status === \"fulfilled\" ? bsData.value?.current_liabilities?.accounts_payable || 0 : 0;\n            const cashBalance = bsData.status === \"fulfilled\" ? bsData.value?.current_assets?.cash_and_bank || 0 : 0;\n            // Log which data sources succeeded/failed\n            console.info(\"\\uD83D\\uDCCA Financial metrics data sources:\", {\n                profitLoss: plData.status === \"fulfilled\" ? \"✅\" : \"❌\",\n                cashFlow: cfData.status === \"fulfilled\" ? \"✅\" : \"❌\",\n                balanceSheet: bsData.status === \"fulfilled\" ? \"✅\" : \"❌\"\n            });\n            return {\n                revenue,\n                expenses,\n                grossProfit,\n                netProfit,\n                operatingIncome,\n                cashFlow,\n                accountsReceivable,\n                accountsPayable,\n                cashBalance\n            };\n        } catch (error) {\n            console.error(\"❌ Error fetching financial metrics:\", error);\n            console.warn(\"\\uD83C\\uDFAD Returning default financial metrics due to API failure\");\n            // Return default values if API calls fail\n            return {\n                revenue: 0,\n                expenses: 0,\n                grossProfit: 0,\n                netProfit: 0,\n                operatingIncome: 0,\n                cashFlow: 0,\n                accountsReceivable: 0,\n                accountsPayable: 0,\n                cashBalance: 0\n            };\n        }\n    }\n    // Method to manually refresh token (for testing)\n    async forceRefreshToken() {\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.lastRefreshTime = Date.now(); // Track manual refresh time\n        return await this.getAccessToken();\n    }\n    // Get token status for debugging\n    getTokenStatus() {\n        const now = Date.now();\n        return {\n            hasToken: !!this.accessToken,\n            expiresIn: this.tokenExpiry - now,\n            isExpired: now >= this.tokenExpiry\n        };\n    }\n    // Method to get auto-refresh status\n    getAutoRefreshStatus() {\n        const now = Date.now();\n        const timeSinceLastRefresh = now - this.lastRefreshTime;\n        const nextRefreshIn = Math.max(0, this.AUTO_REFRESH_INTERVAL - timeSinceLastRefresh);\n        return {\n            isActive: !!this.autoRefreshTimer,\n            nextRefreshIn\n        };\n    }\n    // Public method to start auto-refresh\n    enableAutoRefresh() {\n        this._startAutoRefresh();\n    }\n    // Public method to stop auto-refresh\n    disableAutoRefresh() {\n        this._stopAutoRefresh();\n    }\n    // Public method to get comprehensive status\n    getStatus() {\n        return {\n            ...this.getTokenStatus(),\n            autoRefresh: this.getAutoRefreshStatus()\n        };\n    }\n}\nconst zohoService = new ZohoService();\n// Export the functions that are being imported in page.tsx\nconst fetchProjects = async ()=>{\n    try {\n        console.log(\"Client: Fetching projects from API\");\n        const response = await fetch(\"/api/projects\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"projects\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching projects:\", error);\n        throw error;\n    }\n};\nconst fetchInvoices = async ()=>{\n    try {\n        console.log(\"Client: Fetching invoices from API\");\n        const response = await fetch(\"/api/invoices\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"invoices\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching invoices:\", error);\n        throw error;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/zoho.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/form-data","vendor-chunks/get-intrinsic","vendor-chunks/asynckit","vendor-chunks/combined-stream","vendor-chunks/mime-types","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/p-limit","vendor-chunks/es-set-tostringtag","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/dunder-proto","vendor-chunks/yocto-queue","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/has-flag","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprojects%2Froute&page=%2Fapi%2Fprojects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprojects%2Froute.ts&appDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJohn%5CBillingPlatform%5CBilling&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();