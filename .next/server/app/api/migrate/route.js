"use strict";(()=>{var e={};e.id=896,e.ids=[896],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},64560:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>j,patchFetch:()=>w,requestAsyncStorage:()=>m,routeModule:()=>l,serverHooks:()=>g,staticGenerationAsyncStorage:()=>u});var r={};a.r(r),a.d(r,{POST:()=>d,dynamic:()=>p});var o=a(49303),s=a(88716),i=a(60670),n=a(87070),c=a(52663);let p="force-dynamic";async function d(){try{if(console.log("Attempting migration..."),await c.Z.projection.findFirst())return console.log("Data already exists in database, skipping migration"),n.NextResponse.json({success:!0,message:"Database schema already exists"});return console.log("Creating test data to verify migration..."),await c.Z.projection.create({data:{projectId:"test-project-1",month:"2024-01",value:1e3}}),await c.Z.status.create({data:{projectId:"test-project-1",month:"2024-01",status:"active"}}),await c.Z.comment.create({data:{projectId:"test-project-1",month:"2024-01",comment:"Test comment"}}),await c.Z.signedFee.create({data:{projectId:"test-project-1",value:500}}),await c.Z.asrFee.create({data:{projectId:"test-project-1",value:200}}),await c.Z.closedProject.create({data:{projectId:"test-project-2"}}),await c.Z.projectAssignment.create({data:{projectId:"test-project-1",managerId:"manager-1"}}),await c.Z.projectManager.create({data:{id:"manager-1",name:"Test Manager",color:"#ff0000"}}),await c.Z.projection.deleteMany({where:{projectId:"test-project-1"}}),await c.Z.status.deleteMany({where:{projectId:"test-project-1"}}),await c.Z.comment.deleteMany({where:{projectId:"test-project-1"}}),await c.Z.signedFee.deleteMany({where:{projectId:"test-project-1"}}),await c.Z.asrFee.deleteMany({where:{projectId:"test-project-1"}}),await c.Z.closedProject.deleteMany({where:{projectId:"test-project-2"}}),await c.Z.projectAssignment.deleteMany({where:{projectId:"test-project-1"}}),await c.Z.projectManager.deleteMany({where:{id:"manager-1"}}),console.log("Migration completed successfully"),n.NextResponse.json({success:!0,message:"Migration completed successfully"})}catch(e){return console.error("Migration error:",e),n.NextResponse.json({error:"Failed to migrate: "+e.message},{status:500})}}let l=new o.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/migrate/route",pathname:"/api/migrate",filename:"route",bundlePath:"app/api/migrate/route"},resolvedPagePath:"C:\\Users\\Jonathan\\Desktop\\Billing\\app\\api\\migrate\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:m,staticGenerationAsyncStorage:u,serverHooks:g}=l,j="/api/migrate/route";function w(){return(0,i.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:u})}},52663:(e,t,a)=>{a.d(t,{Z:()=>o});let r=require("@prisma/client"),o=globalThis.prisma??new r.PrismaClient({log:["error"]})}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[276,972],()=>a(64560));module.exports=r})();