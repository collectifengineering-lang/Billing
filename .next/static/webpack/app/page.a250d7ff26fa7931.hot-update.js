"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/zoho.ts":
/*!*********************!*\
  !*** ./lib/zoho.ts ***!
  \*********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchInvoices: function() { return /* binding */ fetchInvoices; },\n/* harmony export */   fetchProjects: function() { return /* binding */ fetchProjects; },\n/* harmony export */   zohoService: function() { return /* binding */ zohoService; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\nclass ZohoService {\n    _startAutoRefresh() {\n        // Clear any existing timer\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n        }\n        // Set up automatic refresh every 45 minutes\n        this.autoRefreshTimer = setInterval(async ()=>{\n            try {\n                console.log(\"Auto-refreshing Zoho token (45-minute interval)...\");\n                this.lastRefreshTime = Date.now(); // Track when refresh was triggered\n                await this.forceRefreshToken();\n                console.log(\"Auto-refresh completed successfully\");\n            } catch (error) {\n                console.error(\"Auto-refresh failed:\", error);\n            }\n        }, this.AUTO_REFRESH_INTERVAL);\n        // Set initial refresh time\n        this.lastRefreshTime = Date.now();\n        console.log(\"Automatic Zoho token refresh started (every 45 minutes)\");\n    }\n    _stopAutoRefresh() {\n        if (this.autoRefreshTimer) {\n            clearInterval(this.autoRefreshTimer);\n            this.autoRefreshTimer = null;\n            console.log(\"Automatic Zoho token refresh stopped\");\n        }\n    }\n    async getAccessToken() {\n        // Check if token is still valid (with buffer)\n        if (this.accessToken && Date.now() < this.tokenExpiry - this.TOKEN_REFRESH_BUFFER) {\n            return this.accessToken;\n        }\n        // If there's already a refresh in progress, wait for it\n        if (this.refreshPromise) {\n            return this.refreshPromise;\n        }\n        // Start a new refresh\n        this.refreshPromise = this.refreshAccessToken();\n        try {\n            const token = await this.refreshPromise;\n            return token;\n        } finally{\n            this.refreshPromise = null;\n        }\n    }\n    async refreshAccessToken() {\n        try {\n            console.log(\"Refreshing Zoho access token...\");\n            // Create form data for the request\n            const formData = new URLSearchParams();\n            formData.append(\"refresh_token\", \"1000.4bf26c4881dfba83aae32546453d662d.a9353e91362a18c457b5cbec86b10ed2\" || 0);\n            formData.append(\"client_id\", \"1000.8RL8WMTDXS0WIP2EJF2XUS6NDSLQEP\" || 0);\n            formData.append(\"client_secret\", \"8a7ee3c04f0a0d860dd215c4449deab9bf15d1d00b\" || 0);\n            formData.append(\"grant_type\", \"refresh_token\");\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"https://accounts.zoho.com/oauth/v2/token\", formData, {\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            });\n            this.accessToken = response.data.access_token;\n            this.tokenExpiry = Date.now() + response.data.expires_in * 1000;\n            console.log(\"Token refreshed successfully. Expires in \".concat(Math.round(response.data.expires_in / 60), \" minutes\"));\n            return this.accessToken;\n        } catch (error) {\n            console.error(\"Error refreshing Zoho access token:\", error);\n            throw new Error(\"Failed to authenticate with Zoho\");\n        }\n    }\n    async makeRequest(endpoint) {\n        try {\n            // Apply rate limiting\n            await this.applyRateLimit();\n            const token = await this.getAccessToken();\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://www.zohoapis.com/books/v3/\".concat(endpoint), {\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(token),\n                    \"Content-Type\": \"application/json\"\n                },\n                params: {\n                    organization_id: \"652094923\"\n                },\n                timeout: 30000\n            });\n            // Reset retry count on success\n            this.retryCount = 0;\n            this.requestCount++;\n            this.lastRequestTime = Date.now();\n            return response.data;\n        } catch (error) {\n            var _error_response, _error_response_data, _error_response1, _error_response_data_error_description, _error_response_data1, _error_response2, _error_response3, _error_response4;\n            // Handle rate limiting (400 with specific error message)\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 400 && ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : (_error_response_data = _error_response1.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.error) === \"Access Denied\" && ((_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : (_error_response_data1 = _error_response2.data) === null || _error_response_data1 === void 0 ? void 0 : (_error_response_data_error_description = _error_response_data1.error_description) === null || _error_response_data_error_description === void 0 ? void 0 : _error_response_data_error_description.includes(\"too many requests\"))) {\n                console.log(\"Zoho rate limit hit, implementing exponential backoff...\");\n                await this.handleRateLimit();\n                // Retry the request after backoff\n                if (this.retryCount < this.MAX_RETRIES) {\n                    this.retryCount++;\n                    console.log(\"Retrying request after rate limit backoff (attempt \".concat(this.retryCount, \")\"));\n                    return this.makeRequest(endpoint);\n                } else {\n                    throw new Error(\"Zoho API rate limit exceeded after maximum retries. Please try again later.\");\n                }\n            }\n            // If we get a 401, try refreshing the token once\n            if (((_error_response3 = error.response) === null || _error_response3 === void 0 ? void 0 : _error_response3.status) === 401) {\n                console.log(\"Token expired, refreshing...\");\n                // Clear the current token and force a refresh\n                this.accessToken = null;\n                this.tokenExpiry = 0;\n                try {\n                    const newToken = await this.forceRefreshToken();\n                    // Retry the request with the new token\n                    const retryResponse = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://www.zohoapis.com/books/v3/\".concat(endpoint), {\n                        headers: {\n                            \"Authorization\": \"Bearer \".concat(newToken),\n                            \"Content-Type\": \"application/json\"\n                        },\n                        params: {\n                            organization_id: \"652094923\"\n                        },\n                        timeout: 30000\n                    });\n                    console.log(\"Request retry successful after token refresh\");\n                    return retryResponse.data;\n                } catch (refreshError) {\n                    console.error(\"Failed to refresh token or retry request:\", refreshError);\n                    throw new Error(\"Zoho API authentication failed after token refresh: \".concat(endpoint));\n                }\n            }\n            // Handle other HTTP errors\n            if ((_error_response4 = error.response) === null || _error_response4 === void 0 ? void 0 : _error_response4.status) {\n                var _error_response_data2;\n                console.error(\"Zoho API error \".concat(error.response.status, \" for \").concat(endpoint, \":\"), error.response.data);\n                // Provide more specific error messages\n                if (error.response.status === 403) {\n                    throw new Error(\"Zoho API access forbidden - check your organization ID and permissions\");\n                } else if (error.response.status === 429) {\n                    throw new Error(\"Zoho API rate limit exceeded - please try again later\");\n                } else if (error.response.status >= 500) {\n                    throw new Error(\"Zoho API server error - please try again later\");\n                }\n                throw new Error(\"Zoho API error \".concat(error.response.status, \": \").concat(((_error_response_data2 = error.response.data) === null || _error_response_data2 === void 0 ? void 0 : _error_response_data2.message) || \"Unknown error\"));\n            }\n            console.error(\"Error making Zoho request to \".concat(endpoint, \":\"), error);\n            throw new Error(\"Failed to fetch data from Zoho: \".concat(endpoint));\n        }\n    }\n    async applyRateLimit() {\n        const now = Date.now();\n        // Check if we need to wait between requests\n        if (this.lastRequestTime > 0) {\n            const timeSinceLastRequest = now - this.lastRequestTime;\n            if (timeSinceLastRequest < this.MIN_REQUEST_INTERVAL) {\n                const waitTime = this.MIN_REQUEST_INTERVAL - timeSinceLastRequest;\n                console.log(\"Rate limiting: waiting \".concat(waitTime, \"ms before next request\"));\n                await new Promise((resolve)=>setTimeout(resolve, waitTime));\n            }\n        }\n        // Check if we've exceeded the per-minute limit\n        if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n            const timeSinceFirstRequest = now - this.lastRequestTime;\n            if (timeSinceFirstRequest < 60000) {\n                const waitTime = 60000 - timeSinceFirstRequest;\n                console.log(\"Rate limiting: exceeded \".concat(this.MAX_REQUESTS_PER_MINUTE, \" requests per minute, waiting \").concat(waitTime, \"ms\"));\n                await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                this.requestCount = 0;\n            } else {\n                // Reset counter if more than 1 minute has passed\n                this.requestCount = 0;\n            }\n        }\n    }\n    async handleRateLimit() {\n        const delay = this.BASE_DELAY * Math.pow(2, this.retryCount);\n        console.log(\"Rate limit backoff: waiting \".concat(delay, \"ms before retry\"));\n        await new Promise((resolve)=>setTimeout(resolve, delay));\n        // Reset request counters to allow fresh start\n        this.requestCount = 0;\n        this.lastRequestTime = 0;\n    }\n    async getProjects() {\n        try {\n            let allProjects = [];\n            let page = 1;\n            const perPage = 200;\n            while(true){\n                var _data_projects;\n                const data = await this.makeRequest(\"projects?page=\".concat(page, \"&per_page=\").concat(perPage));\n                const projects = ((_data_projects = data.projects) === null || _data_projects === void 0 ? void 0 : _data_projects.map((project)=>{\n                    // Log the first project to see available fields\n                    if (page === 1 && allProjects.length === 0) {\n                        console.log(\"Sample Zoho project data:\", JSON.stringify(project, null, 2));\n                    }\n                    return {\n                        project_id: project.project_id,\n                        project_name: project.project_name || project.name || \"\",\n                        description: project.description || \"\",\n                        status: project.status || \"active\",\n                        start_date: project.start_date || \"\",\n                        end_date: project.end_date || \"\",\n                        budget_amount: project.budget_amount || 0,\n                        rate_per_hour: project.rate_per_hour || 0,\n                        customer_id: project.customer_id || \"\",\n                        customer_name: project.customer_name || \"\",\n                        signed_fee: undefined\n                    };\n                })) || [];\n                allProjects = allProjects.concat(projects);\n                // Check if we've reached the end\n                if (projects.length < perPage) {\n                    break;\n                }\n                page++;\n            }\n            console.log(\"Fetched \".concat(allProjects.length, \" projects from Zoho\"));\n            return allProjects;\n        } catch (error) {\n            console.error(\"Error fetching projects:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithRevenueBudget() {\n        try {\n            console.log(\"Fetching projects with revenue budget data...\");\n            const projects = await this.getProjects();\n            // Log projects that have revenue_budget data\n            const projectsWithRevenueBudget = projects.filter((project)=>{\n                const hasRevenueBudget = project.signed_fee && project.signed_fee > 0;\n                if (hasRevenueBudget) {\n                    console.log(\"Project \".concat(project.project_name, \" has revenue budget: $\").concat(project.signed_fee));\n                }\n                return hasRevenueBudget;\n            });\n            console.log(\"Found \".concat(projectsWithRevenueBudget.length, \" projects with revenue budget data\"));\n            return projects;\n        } catch (error) {\n            console.error(\"Error fetching projects with revenue budget:\", error);\n            return [];\n        }\n    }\n    async debugProjectFields() {\n        try {\n            console.log(\"Debugging Zoho project fields...\");\n            const data = await this.makeRequest(\"projects?page=1&per_page=5\");\n            if (data.projects && data.projects.length > 0) {\n                console.log(\"Available fields in Zoho project response:\");\n                const sampleProject = data.projects[0];\n                Object.keys(sampleProject).forEach((key)=>{\n                    console.log(\"  \".concat(key, \": \").concat(sampleProject[key], \" (\").concat(typeof sampleProject[key], \")\"));\n                });\n                // Check specifically for revenue_budget\n                if (sampleProject.revenue_budget !== undefined) {\n                    console.log(\"✅ Found revenue_budget field: \".concat(sampleProject.revenue_budget));\n                } else {\n                    console.log(\"❌ revenue_budget field not found in Zoho response\");\n                    console.log(\"Available budget-related fields:\");\n                    Object.keys(sampleProject).forEach((key)=>{\n                        if (key.toLowerCase().includes(\"budget\") || key.toLowerCase().includes(\"revenue\")) {\n                            console.log(\"  \".concat(key, \": \").concat(sampleProject[key]));\n                        }\n                    });\n                }\n            } else {\n                console.log(\"No projects found in Zoho response\");\n            }\n        } catch (error) {\n            console.error(\"Error debugging project fields:\", error);\n        }\n    }\n    async getProjectsWithEstimates() {\n        try {\n            const projects = await this.getProjects();\n            // For the first few projects, try to get estimates to see if that contains the signed fee\n            const projectsWithEstimates = await Promise.all(projects.slice(0, 5).map(async (project)=>{\n                try {\n                    const estimates = await this.getProjectEstimates(project.project_id);\n                    const totalEstimateAmount = estimates.reduce((sum, estimate)=>sum + (estimate.total || 0), 0);\n                    console.log(\"Project \".concat(project.project_name, \" estimates:\"), estimates.length, \"total amount:\", totalEstimateAmount);\n                    return {\n                        ...project,\n                        signed_fee: project.signed_fee || totalEstimateAmount || 0\n                    };\n                } catch (error) {\n                    console.error(\"Error fetching estimates for project \".concat(project.project_id, \":\"), error);\n                    return project;\n                }\n            }));\n            // Return all projects, with the first 5 having updated signed fees from estimates\n            return [\n                ...projectsWithEstimates,\n                ...projects.slice(5)\n            ];\n        } catch (error) {\n            console.error(\"Error fetching projects with estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectsWithInvoiceTotals() {\n        try {\n            const [projects, invoices] = await Promise.all([\n                this.getProjects(),\n                this.getInvoices()\n            ]);\n            // Calculate signed fee as total of all invoices for each project\n            const projectsWithInvoiceTotals = projects.map((project)=>{\n                const projectInvoices = invoices.filter((invoice)=>invoice.project_id === project.project_id);\n                const totalInvoiceAmount = projectInvoices.reduce((sum, invoice)=>sum + invoice.amount, 0);\n                console.log(\"Project \".concat(project.project_name, \" invoices:\"), projectInvoices.length, \"total amount:\", totalInvoiceAmount);\n                return {\n                    ...project,\n                    signed_fee: project.signed_fee || totalInvoiceAmount || 0\n                };\n            });\n            return projectsWithInvoiceTotals;\n        } catch (error) {\n            console.error(\"Error fetching projects with invoice totals:\", error);\n            return [];\n        }\n    }\n    async getInvoices() {\n        try {\n            var _data_invoices;\n            const data = await this.makeRequest(\"invoices\");\n            return ((_data_invoices = data.invoices) === null || _data_invoices === void 0 ? void 0 : _data_invoices.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                }))) || [];\n        } catch (error) {\n            console.error(\"Error fetching invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectInvoices(projectId) {\n        try {\n            var _data_invoices;\n            const data = await this.makeRequest(\"projects/\".concat(projectId, \"/invoices\"));\n            return ((_data_invoices = data.invoices) === null || _data_invoices === void 0 ? void 0 : _data_invoices.map((invoice)=>({\n                    invoice_id: invoice.invoice_id,\n                    project_id: invoice.project_id,\n                    invoice_number: invoice.invoice_number,\n                    date: invoice.date,\n                    amount: invoice.total,\n                    status: invoice.status,\n                    billed_amount: invoice.billed_amount || 0,\n                    unbilled_amount: invoice.unbilled_amount || 0\n                }))) || [];\n        } catch (error) {\n            console.error(\"Error fetching project invoices:\", error);\n            return [];\n        }\n    }\n    async getProjectDetails(projectId) {\n        try {\n            const data = await this.makeRequest(\"projects/\".concat(projectId));\n            console.log(\"Project \".concat(projectId, \" details:\"), JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching project details:\", error);\n            return null;\n        }\n    }\n    async getProjectEstimates(projectId) {\n        try {\n            const data = await this.makeRequest(\"projects/\".concat(projectId, \"/estimates\"));\n            console.log(\"Project \".concat(projectId, \" estimates:\"), JSON.stringify(data, null, 2));\n            return data.estimates || [];\n        } catch (error) {\n            console.error(\"Error fetching project estimates:\", error);\n            return [];\n        }\n    }\n    async getProjectContracts(projectId) {\n        try {\n            const data = await this.makeRequest(\"projects/\".concat(projectId, \"/contracts\"));\n            console.log(\"Project \".concat(projectId, \" contracts:\"), JSON.stringify(data, null, 2));\n            return data.contracts || [];\n        } catch (error) {\n            console.error(\"Error fetching project contracts:\", error);\n            return [];\n        }\n    }\n    // New method to get Profit & Loss statement\n    async getProfitAndLoss(startDate, endDate) {\n        try {\n            const data = await this.makeRequest(\"reports/profitandloss?from_date=\".concat(startDate, \"&to_date=\").concat(endDate));\n            console.log(\"Profit & Loss data:\", JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching Profit & Loss:\", error);\n            return null;\n        }\n    }\n    // New method to get Cash Flow statement\n    async getCashFlow(startDate, endDate) {\n        try {\n            const data = await this.makeRequest(\"reports/cashflow?from_date=\".concat(startDate, \"&to_date=\").concat(endDate));\n            console.log(\"Cash Flow data:\", JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching Cash Flow:\", error);\n            return null;\n        }\n    }\n    // New method to get Balance Sheet\n    async getBalanceSheet(date) {\n        try {\n            const data = await this.makeRequest(\"reports/balancesheet?date=\".concat(date));\n            console.log(\"Balance Sheet data:\", JSON.stringify(data, null, 2));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching Balance Sheet:\", error);\n            return null;\n        }\n    }\n    // New method to get Chart of Accounts\n    async getChartOfAccounts() {\n        try {\n            const data = await this.makeRequest(\"chartofaccounts\");\n            console.log(\"Chart of Accounts data:\", JSON.stringify(data, null, 2));\n            return data.chartofaccounts || [];\n        } catch (error) {\n            console.error(\"Error fetching Chart of Accounts:\", error);\n            return [];\n        }\n    }\n    // New method to get Journal Entries for a date range\n    async getJournalEntries(startDate, endDate) {\n        try {\n            const data = await this.makeRequest(\"journalentries?from_date=\".concat(startDate, \"&to_date=\").concat(endDate));\n            console.log(\"Journal Entries data:\", JSON.stringify(data, null, 2));\n            return data.journalentries || [];\n        } catch (error) {\n            console.error(\"Error fetching Journal Entries:\", error);\n            return [];\n        }\n    }\n    // New method to get comprehensive financial metrics\n    async getFinancialMetrics(startDate, endDate) {\n        try {\n            var _plData_revenue, _plData_expenses, _plData_operating_expenses, _plData_operating_expenses1, _bsData_current_assets, _bsData_current_liabilities, _bsData_current_assets1;\n            const [plData, cfData, bsData] = await Promise.all([\n                this.getProfitAndLoss(startDate, endDate),\n                this.getCashFlow(startDate, endDate),\n                this.getBalanceSheet(endDate)\n            ]);\n            // Extract financial metrics from the responses\n            const revenue = (plData === null || plData === void 0 ? void 0 : (_plData_revenue = plData.revenue) === null || _plData_revenue === void 0 ? void 0 : _plData_revenue.total) || 0;\n            const expenses = (plData === null || plData === void 0 ? void 0 : (_plData_expenses = plData.expenses) === null || _plData_expenses === void 0 ? void 0 : _plData_expenses.total) || 0;\n            const grossProfit = revenue - expenses;\n            // Calculate net profit (may need adjustment based on actual Zoho response structure)\n            const netProfit = grossProfit - ((plData === null || plData === void 0 ? void 0 : (_plData_operating_expenses = plData.operating_expenses) === null || _plData_operating_expenses === void 0 ? void 0 : _plData_operating_expenses.total) || 0);\n            const operatingIncome = grossProfit - ((plData === null || plData === void 0 ? void 0 : (_plData_operating_expenses1 = plData.operating_expenses) === null || _plData_operating_expenses1 === void 0 ? void 0 : _plData_operating_expenses1.total) || 0);\n            // Extract cash flow data\n            const cashFlow = (cfData === null || cfData === void 0 ? void 0 : cfData.net_cash_flow) || 0;\n            const accountsReceivable = (bsData === null || bsData === void 0 ? void 0 : (_bsData_current_assets = bsData.current_assets) === null || _bsData_current_assets === void 0 ? void 0 : _bsData_current_assets.accounts_receivable) || 0;\n            const accountsPayable = (bsData === null || bsData === void 0 ? void 0 : (_bsData_current_liabilities = bsData.current_liabilities) === null || _bsData_current_liabilities === void 0 ? void 0 : _bsData_current_liabilities.accounts_payable) || 0;\n            const cashBalance = (bsData === null || bsData === void 0 ? void 0 : (_bsData_current_assets1 = bsData.current_assets) === null || _bsData_current_assets1 === void 0 ? void 0 : _bsData_current_assets1.cash_and_bank) || 0;\n            return {\n                revenue,\n                expenses,\n                grossProfit,\n                netProfit,\n                operatingIncome,\n                cashFlow,\n                accountsReceivable,\n                accountsPayable,\n                cashBalance\n            };\n        } catch (error) {\n            console.error(\"Error fetching financial metrics:\", error);\n            // Return default values if API calls fail\n            return {\n                revenue: 0,\n                expenses: 0,\n                grossProfit: 0,\n                netProfit: 0,\n                operatingIncome: 0,\n                cashFlow: 0,\n                accountsReceivable: 0,\n                accountsPayable: 0,\n                cashBalance: 0\n            };\n        }\n    }\n    // Method to manually refresh token (for testing)\n    async forceRefreshToken() {\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.lastRefreshTime = Date.now(); // Track manual refresh time\n        await this.getAccessToken();\n    }\n    // Get token status for debugging\n    getTokenStatus() {\n        const now = Date.now();\n        return {\n            hasToken: !!this.accessToken,\n            expiresIn: this.tokenExpiry - now,\n            isExpired: now >= this.tokenExpiry\n        };\n    }\n    // Method to get auto-refresh status\n    getAutoRefreshStatus() {\n        const now = Date.now();\n        const timeSinceLastRefresh = now - this.lastRefreshTime;\n        const nextRefreshIn = Math.max(0, this.AUTO_REFRESH_INTERVAL - timeSinceLastRefresh);\n        return {\n            isActive: !!this.autoRefreshTimer,\n            nextRefreshIn\n        };\n    }\n    // Public method to start auto-refresh\n    enableAutoRefresh() {\n        this._startAutoRefresh();\n    }\n    // Public method to stop auto-refresh\n    disableAutoRefresh() {\n        this._stopAutoRefresh();\n    }\n    // Public method to get comprehensive status\n    getStatus() {\n        return {\n            ...this.getTokenStatus(),\n            autoRefresh: this.getAutoRefreshStatus()\n        };\n    }\n    constructor(){\n        this.accessToken = null;\n        this.tokenExpiry = 0;\n        this.refreshPromise = null;\n        this.TOKEN_REFRESH_BUFFER = 5 * 60 * 1000 // 5 minutes buffer\n        ;\n        this.autoRefreshTimer = null;\n        this.AUTO_REFRESH_INTERVAL = 45 * 60 * 1000 // 45 minutes\n        ;\n        this.lastRefreshTime = 0 // Track when auto-refresh was last triggered\n        ;\n        // Rate limiting properties\n        this.requestCount = 0;\n        this.lastRequestTime = 0;\n        this.MAX_REQUESTS_PER_MINUTE = 30 // Conservative limit\n        ;\n        this.MIN_REQUEST_INTERVAL = 2000 // 2 seconds between requests\n        ;\n        this.retryCount = 0;\n        this.MAX_RETRIES = 3;\n        this.BASE_DELAY = 1000 // 1 second base delay for exponential backoff\n        ;\n        // Start automatic token refresh\n        this._startAutoRefresh();\n    }\n}\nconst zohoService = new ZohoService();\n// Export the functions that are being imported in page.tsx\nconst fetchProjects = async ()=>{\n    try {\n        console.log(\"Client: Fetching projects from API\");\n        const response = await fetch(\"/api/projects\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"projects\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching projects:\", error);\n        throw error;\n    }\n};\nconst fetchInvoices = async ()=>{\n    try {\n        console.log(\"Client: Fetching invoices from API\");\n        const response = await fetch(\"/api/invoices\");\n        const result = await response.json();\n        if (result.success) {\n            console.log(\"Client: Successfully fetched\", result.count, \"invoices\");\n            return result.data;\n        } else {\n            console.error(\"Client: API returned error:\", result.error);\n            throw new Error(result.error);\n        }\n    } catch (error) {\n        console.error(\"Client: Error fetching invoices:\", error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/zoho.ts\n"));

/***/ })

});