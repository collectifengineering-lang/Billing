"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAuthUser: function() { return /* binding */ getAuthUser; },\n/* harmony export */   graphConfig: function() { return /* binding */ graphConfig; },\n/* harmony export */   loginRequest: function() { return /* binding */ loginRequest; },\n/* harmony export */   msalInstance: function() { return /* binding */ msalInstance; },\n/* harmony export */   signIn: function() { return /* binding */ signIn; },\n/* harmony export */   signOut: function() { return /* binding */ signOut; }\n/* harmony export */ });\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-browser */ \"(app-pages-browser)/./node_modules/@azure/msal-browser/dist/app/PublicClientApplication.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// Check if required environment variables are set\nconst clientId = \"72ed6933-6bc6-430e-a75a-cb5d2e1c20e1\";\nconst tenantId = \"e4748cdc-321b-4db0-bc36-141b121a9117\";\nif (!clientId || !tenantId) {\n    console.warn(\"Azure AD environment variables are not set. Authentication will not work.\");\n    console.warn(\"Please set NEXT_PUBLIC_AZURE_AD_CLIENT_ID and NEXT_PUBLIC_AZURE_AD_TENANT_ID in your .env.local file\");\n}\nconst msalConfig = {\n    auth: {\n        clientId: clientId || \"dummy-client-id\",\n        authority: \"https://login.microsoftonline.com/\".concat(tenantId || \"dummy-tenant-id\"),\n        redirectUri:  true ? window.location.origin : 0\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\",\n        storeAuthStateInCookie: false\n    }\n};\nconst msalInstance = new _azure_msal_browser__WEBPACK_IMPORTED_MODULE_0__.PublicClientApplication(msalConfig);\nconst loginRequest = {\n    scopes: [\n        \"User.Read\",\n        \"Directory.Read.All\"\n    ]\n};\nconst graphConfig = {\n    graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\"\n};\nasync function signIn() {\n    try {\n        // Check if environment variables are set\n        if (!clientId || !tenantId) {\n            throw new Error(\"Azure AD environment variables are not configured. Please set NEXT_PUBLIC_AZURE_AD_CLIENT_ID and NEXT_PUBLIC_AZURE_AD_TENANT_ID in your .env.local file\");\n        }\n        // Use redirect flow instead of popup to avoid cross-origin issues\n        await msalInstance.loginRedirect(loginRequest);\n        return null; // Redirect will handle the flow\n    } catch (error) {\n        console.error(\"Sign in error:\", error);\n        throw error;\n    }\n}\nasync function signOut() {\n    try {\n        await msalInstance.logoutPopup();\n    } catch (error) {\n        console.error(\"Sign out error:\", error);\n    }\n}\nasync function getAuthUser() {\n    try {\n        var _process_env_NEXT_PUBLIC_ADMIN_EMAILS, _userData_mail, // Collectif domain\n        _userData_mail1, _userData_mail2, _userData_mail3;\n        const account = msalInstance.getActiveAccount();\n        if (!account) return null;\n        // Get user details from Microsoft Graph to check roles\n        const token = await msalInstance.acquireTokenSilent({\n            scopes: [\n                \"User.Read\",\n                \"Directory.Read.All\"\n            ]\n        });\n        const response = await fetch(\"https://graph.microsoft.com/v1.0/me\", {\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token.accessToken)\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch user details\");\n        }\n        const userData = await response.json();\n        // Check if user has admin role by looking at their email domain or specific admin emails\n        // You can customize this logic based on your Azure AD setup\n        const adminEmails = ((_process_env_NEXT_PUBLIC_ADMIN_EMAILS = process.env.NEXT_PUBLIC_ADMIN_EMAILS) === null || _process_env_NEXT_PUBLIC_ADMIN_EMAILS === void 0 ? void 0 : _process_env_NEXT_PUBLIC_ADMIN_EMAILS.split(\",\")) || [];\n        const isAdmin = adminEmails.includes(userData.mail) || adminEmails.includes(userData.userPrincipalName) || ((_userData_mail = userData.mail) === null || _userData_mail === void 0 ? void 0 : _userData_mail.endsWith(\"@collectif.nyc\")) || ((_userData_mail1 = userData.mail) === null || _userData_mail1 === void 0 ? void 0 : _userData_mail1.endsWith(\"@yourcompany.com\")); // Legacy domain\n        // Debug logging\n        console.log(\"Auth Debug:\", {\n            userEmail: userData.mail,\n            userPrincipalName: userData.userPrincipalName,\n            adminEmails,\n            isAdmin,\n            adminEmailsIncludes: adminEmails.includes(userData.mail),\n            adminEmailsIncludesPrincipal: adminEmails.includes(userData.userPrincipalName),\n            endsWithCollectif: (_userData_mail2 = userData.mail) === null || _userData_mail2 === void 0 ? void 0 : _userData_mail2.endsWith(\"@collectif.nyc\"),\n            endsWithLegacy: (_userData_mail3 = userData.mail) === null || _userData_mail3 === void 0 ? void 0 : _userData_mail3.endsWith(\"@yourcompany.com\"),\n            envVar: process.env.NEXT_PUBLIC_ADMIN_EMAILS\n        });\n        return {\n            id: account.localAccountId,\n            name: account.name || \"\",\n            email: account.username || \"\",\n            isAdmin: isAdmin,\n            isBasic: true\n        };\n    } catch (error) {\n        console.error(\"Get auth user error:\", error);\n        // Fallback to basic user if Graph API fails\n        const account = msalInstance.getActiveAccount();\n        console.log(\"Auth Fallback Debug:\", {\n            accountEmail: account === null || account === void 0 ? void 0 : account.username,\n            accountName: account === null || account === void 0 ? void 0 : account.name,\n            isAdmin: false\n        });\n        return {\n            id: (account === null || account === void 0 ? void 0 : account.localAccountId) || \"\",\n            name: (account === null || account === void 0 ? void 0 : account.name) || \"\",\n            email: (account === null || account === void 0 ? void 0 : account.username) || \"\",\n            isAdmin: false,\n            isBasic: true\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/auth.ts\n"));

/***/ })

});