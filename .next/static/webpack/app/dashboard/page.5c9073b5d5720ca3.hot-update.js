"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateDashboardStats: function() { return /* binding */ calculateDashboardStats; },\n/* harmony export */   calculateProfitabilityMetrics: function() { return /* binding */ calculateProfitabilityMetrics; },\n/* harmony export */   calculateTimeTrackingKPIs: function() { return /* binding */ calculateTimeTrackingKPIs; },\n/* harmony export */   cn: function() { return /* binding */ cn; },\n/* harmony export */   createChartData: function() { return /* binding */ createChartData; },\n/* harmony export */   enhanceBillingDataWithClockify: function() { return /* binding */ enhanceBillingDataWithClockify; },\n/* harmony export */   formatCurrency: function() { return /* binding */ formatCurrency; },\n/* harmony export */   formatEfficiency: function() { return /* binding */ formatEfficiency; },\n/* harmony export */   formatHours: function() { return /* binding */ formatHours; },\n/* harmony export */   formatMonth: function() { return /* binding */ formatMonth; },\n/* harmony export */   generateMonthRange: function() { return /* binding */ generateMonthRange; },\n/* harmony export */   getChartMonthRange: function() { return /* binding */ getChartMonthRange; },\n/* harmony export */   getCurrentMonthRange: function() { return /* binding */ getCurrentMonthRange; },\n/* harmony export */   getProjectionsMonthRange: function() { return /* binding */ getProjectionsMonthRange; },\n/* harmony export */   initializeProjectionsTable: function() { return /* binding */ initializeProjectionsTable; },\n/* harmony export */   isCurrentMonth: function() { return /* binding */ isCurrentMonth; },\n/* harmony export */   isFutureMonth: function() { return /* binding */ isFutureMonth; },\n/* harmony export */   isLocalStorageAvailable: function() { return /* binding */ isLocalStorageAvailable; },\n/* harmony export */   isPastMonth: function() { return /* binding */ isPastMonth; },\n/* harmony export */   processBillingData: function() { return /* binding */ processBillingData; },\n/* harmony export */   safeLocalStorageGet: function() { return /* binding */ safeLocalStorageGet; },\n/* harmony export */   safeLocalStorageRemove: function() { return /* binding */ safeLocalStorageRemove; },\n/* harmony export */   safeLocalStorageSet: function() { return /* binding */ safeLocalStorageSet; }\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/startOfMonth/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/endOfMonth/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/format/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/addMonths/index.js\");\n/* harmony import */ var _barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=addMonths,endOfMonth,format,startOfMonth,subMonths!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/subMonths/index.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind-merge */ \"(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n\n\n\nfunction cn() {\n    for(var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++){\n        inputs[_key] = arguments[_key];\n    }\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_1__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\nfunction generateMonthRange(startDate, endDate) {\n    const months = [];\n    let currentDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(startDate);\n    const end = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(endDate);\n    while(currentDate <= end){\n        months.push((0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(currentDate, \"yyyy-MM\"));\n        currentDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(currentDate, 1);\n    }\n    return months;\n}\nfunction getCurrentMonthRange() {\n    let monthsBack = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 12, monthsForward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 24;\n    const today = new Date();\n    const startDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(today, monthsBack);\n    const endDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(today, monthsForward);\n    return generateMonthRange(startDate, endDate);\n}\nfunction getProjectionsMonthRange() {\n    const startDate = new Date(2022, 0, 1); // January 1, 2022\n    const today = new Date();\n    const endDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(today, 24); // 24 months beyond current month\n    return generateMonthRange(startDate, endDate);\n}\nfunction getChartMonthRange() {\n    const today = new Date();\n    const startDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(today, 12); // 1 year in the past\n    const endDate = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(today, 12); // 1 year in the future\n    return generateMonthRange(startDate, endDate);\n}\nfunction processBillingData(projects, invoices, projections) {\n    // Handle undefined or null inputs\n    const safeProjects = projects || [];\n    const safeInvoices = invoices || [];\n    const safeProjections = projections || {};\n    const monthRange = getProjectionsMonthRange();\n    return safeProjects.map((project)=>{\n        const projectInvoices = safeInvoices.filter((invoice)=>invoice.project_id === project.project_id);\n        const monthlyData = monthRange.map((month)=>{\n            var _safeProjections_project_project_id_months_month, _safeProjections_project_project_id_months, _safeProjections_project_project_id;\n            const monthInvoices = projectInvoices.filter((invoice)=>{\n                const invoiceMonth = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(invoice.date), \"yyyy-MM\");\n                return invoiceMonth === month;\n            });\n            const billed = monthInvoices.reduce((sum, invoice)=>sum + invoice.billed_amount, 0);\n            const unbilled = monthInvoices.reduce((sum, invoice)=>sum + invoice.unbilled_amount, 0);\n            const projected = ((_safeProjections_project_project_id = safeProjections[project.project_id]) === null || _safeProjections_project_project_id === void 0 ? void 0 : (_safeProjections_project_project_id_months = _safeProjections_project_project_id.months) === null || _safeProjections_project_project_id_months === void 0 ? void 0 : (_safeProjections_project_project_id_months_month = _safeProjections_project_project_id_months[month]) === null || _safeProjections_project_project_id_months_month === void 0 ? void 0 : _safeProjections_project_project_id_months_month.value) || 0;\n            const actual = billed + unbilled;\n            return {\n                month,\n                billed,\n                unbilled,\n                projected,\n                actual\n            };\n        });\n        const totalBilled = monthlyData.reduce((sum, data)=>sum + data.billed, 0);\n        const totalUnbilled = monthlyData.reduce((sum, data)=>sum + data.unbilled, 0);\n        const totalProjected = monthlyData.reduce((sum, data)=>sum + data.projected, 0);\n        return {\n            projectId: project.project_id,\n            projectName: project.project_name,\n            customerName: project.customer_name,\n            signedFee: undefined,\n            monthlyData,\n            totalBilled,\n            totalUnbilled,\n            totalProjected\n        };\n    });\n}\nfunction calculateDashboardStats(billingData, closedProjects, monthlyProjections, monthlyStatuses) {\n    // Handle undefined or null billingData\n    if (!billingData || !Array.isArray(billingData)) {\n        return {\n            totalProjects: 0,\n            totalBilled: 0,\n            totalUnbilled: 0,\n            totalProjected: 0,\n            activeProjects: 0,\n            // Clockify KPIs\n            totalHours: 0,\n            billableHours: 0,\n            nonBillableHours: 0,\n            averageHourlyRate: 0,\n            totalTimeValue: 0,\n            efficiency: 0,\n            averageHoursPerProject: 0,\n            topPerformingProjects: []\n        };\n    }\n    const totalProjects = billingData.length;\n    const closedProjectsCount = closedProjects ? closedProjects.size : 0;\n    const activeProjects = totalProjects - closedProjectsCount;\n    // Use database projections and statuses if provided, otherwise fall back to localStorage\n    const projections = monthlyProjections || safeLocalStorageGet(\"monthlyProjections\") || {};\n    const statuses = monthlyStatuses || safeLocalStorageGet(\"monthlyStatuses\") || {};\n    // Optimize calculations by pre-calculating current year and month\n    const currentYear = new Date().getFullYear().toString();\n    const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n    // Batch calculate financial metrics to reduce iterations\n    let totalBilledYTD = 0;\n    let backlog = 0;\n    let totalProjected = 0;\n    // Single pass through projections for better performance\n    Object.keys(projections).forEach((projectId)=>{\n        const projectProjections = projections[projectId];\n        const projectStatuses = statuses[projectId];\n        if (projectProjections) {\n            Object.keys(projectProjections).forEach((month)=>{\n                const projectionValue = projectProjections[month] || 0;\n                // Check if month is in current year and status is \"Billed\"\n                if (month.startsWith(currentYear) && (projectStatuses === null || projectStatuses === void 0 ? void 0 : projectStatuses[month]) === \"Billed\") {\n                    totalBilledYTD += projectionValue;\n                }\n                // Check if month is current or future and status is NOT \"Billed\"\n                if (month >= currentMonth && (projectStatuses === null || projectStatuses === void 0 ? void 0 : projectStatuses[month]) !== \"Billed\") {\n                    backlog += projectionValue;\n                }\n                // Include all projections for current and future months\n                if (month >= currentMonth) {\n                    totalProjected += projectionValue;\n                }\n            });\n        }\n    });\n    // Calculate Clockify KPIs - optimized single pass\n    let totalHours = 0;\n    let billableHours = 0;\n    let nonBillableHours = 0;\n    let totalTimeValue = 0;\n    let totalHourlyRate = 0;\n    let projectsWithTimeData = 0;\n    const projectEfficiencies = [];\n    // Single pass through billing data for time tracking\n    billingData.forEach((project)=>{\n        if (project.clockifyData) {\n            const timeData = project.clockifyData;\n            totalHours += timeData.totalHours;\n            billableHours += timeData.billableHours;\n            nonBillableHours += timeData.nonBillableHours;\n            totalTimeValue += timeData.billableAmount;\n            if (timeData.totalHours > 0) {\n                const efficiency = timeData.billableHours / timeData.totalHours;\n                projectEfficiencies.push({\n                    projectId: project.projectId,\n                    efficiency,\n                    hours: timeData.totalHours\n                });\n                projectsWithTimeData++;\n            }\n        }\n    });\n    // Calculate derived metrics\n    const averageHourlyRate = projectsWithTimeData > 0 && billableHours > 0 ? totalTimeValue / billableHours : 0;\n    const efficiency = totalHours > 0 ? billableHours / totalHours : 0;\n    const averageHoursPerProject = projectsWithTimeData > 0 ? totalHours / projectsWithTimeData : 0;\n    // Get top performing projects (by efficiency and hours) - limit to top 5 for performance\n    const topPerformingProjects = projectEfficiencies.sort((a, b)=>b.efficiency * b.hours - a.efficiency * a.hours).slice(0, 5).map((p)=>p.projectId);\n    return {\n        totalProjects,\n        totalBilled: totalBilledYTD,\n        totalUnbilled: backlog,\n        totalProjected,\n        activeProjects,\n        // Clockify KPIs\n        totalHours,\n        billableHours,\n        nonBillableHours,\n        averageHourlyRate,\n        totalTimeValue,\n        efficiency,\n        averageHoursPerProject,\n        topPerformingProjects\n    };\n}\nfunction formatCurrency(amount) {\n    return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\"\n    }).format(amount);\n}\nfunction formatMonth(monthString) {\n    const [year, month] = monthString.split(\"-\");\n    const date = new Date(parseInt(year), parseInt(month) - 1);\n    return (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(date, \"MMM yyyy\");\n}\nfunction isCurrentMonth(monthString) {\n    const currentMonth = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(), \"yyyy-MM\");\n    return monthString === currentMonth;\n}\nfunction isFutureMonth(monthString) {\n    const currentMonth = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(), \"yyyy-MM\");\n    return monthString > currentMonth;\n}\nfunction isPastMonth(monthString) {\n    const currentMonth = (0,_barrel_optimize_names_addMonths_endOfMonth_format_startOfMonth_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(new Date(), \"yyyy-MM\");\n    return monthString < currentMonth;\n}\n// localStorage utility functions\nfunction isLocalStorageAvailable() {\n    try {\n        const test = \"__localStorage_test__\";\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction safeLocalStorageGet(key) {\n    if (!isLocalStorageAvailable()) {\n        console.warn(\"localStorage is not available\");\n        return null;\n    }\n    try {\n        const item = localStorage.getItem(key);\n        return item ? JSON.parse(item) : null;\n    } catch (error) {\n        console.error(\"Error reading from localStorage key '\".concat(key, \"':\"), error);\n        return null;\n    }\n}\nfunction safeLocalStorageSet(key, value) {\n    if (!isLocalStorageAvailable()) {\n        console.warn(\"localStorage is not available\");\n        return false;\n    }\n    try {\n        localStorage.setItem(key, JSON.stringify(value));\n        return true;\n    } catch (error) {\n        console.error(\"Error writing to localStorage key '\".concat(key, \"':\"), error);\n        return false;\n    }\n}\nfunction safeLocalStorageRemove(key) {\n    if (!isLocalStorageAvailable()) {\n        return false;\n    }\n    try {\n        localStorage.removeItem(key);\n        return true;\n    } catch (error) {\n        console.error(\"Error removing localStorage key '\".concat(key, \"':\"), error);\n        return false;\n    }\n}\nfunction createChartData(billingData) {\n    return billingData.map((data)=>({\n            name: data.projectName,\n            billed: data.totalBilled,\n            unbilled: data.totalUnbilled,\n            projected: data.totalProjected\n        }));\n}\nfunction initializeProjectionsTable(projects) {\n    // Handle undefined or null projects\n    const safeProjects = projects || [];\n    const monthRange = getProjectionsMonthRange();\n    const table = {};\n    safeProjects.forEach((project)=>{\n        table[project.project_id] = {\n            months: {},\n            asrFee: 0\n        };\n        monthRange.forEach((month)=>{\n            const isEditable = isFutureMonth(month);\n            table[project.project_id].months[month] = {\n                value: 0,\n                isEditable,\n                isProjected: isEditable\n            };\n        });\n    });\n    return table;\n}\n// New functions for Clockify integration\nfunction calculateTimeTrackingKPIs(clockifyData) {\n    const efficiency = clockifyData.totalHours > 0 ? clockifyData.billableHours / clockifyData.totalHours : 0;\n    const averageHourlyRate = clockifyData.billableHours > 0 ? clockifyData.billableAmount / clockifyData.billableHours : 0;\n    return {\n        projectId: clockifyData.projectId,\n        projectName: clockifyData.projectName,\n        totalHours: clockifyData.totalHours,\n        billableHours: clockifyData.billableHours,\n        nonBillableHours: clockifyData.nonBillableHours,\n        hourlyRate: averageHourlyRate,\n        totalValue: clockifyData.billableAmount,\n        efficiency,\n        period: clockifyData.period\n    };\n}\nfunction enhanceBillingDataWithClockify(billingData, clockifyReports) {\n    return billingData.map((project)=>{\n        const clockifyReport = clockifyReports.find((report)=>report.projectId === project.projectId || report.projectName.toLowerCase().includes(project.projectName.toLowerCase()));\n        if (clockifyReport) {\n            const timeTrackingKPI = calculateTimeTrackingKPIs(clockifyReport);\n            return {\n                ...project,\n                clockifyData: clockifyReport,\n                totalHours: clockifyReport.totalHours,\n                billableHours: clockifyReport.billableHours,\n                nonBillableHours: clockifyReport.nonBillableHours,\n                hourlyRate: timeTrackingKPI.hourlyRate,\n                efficiency: timeTrackingKPI.efficiency\n            };\n        }\n        return project;\n    });\n}\nfunction calculateProfitabilityMetrics(billingData, timeTrackingKPI) {\n    const revenue = billingData.totalBilled + billingData.totalUnbilled;\n    const cost = timeTrackingKPI ? timeTrackingKPI.totalValue : 0;\n    const profit = revenue - cost;\n    const margin = revenue > 0 ? profit / revenue * 100 : 0;\n    return {\n        revenue,\n        cost,\n        profit,\n        margin\n    };\n}\nfunction formatHours(hours) {\n    const wholeHours = Math.floor(hours);\n    const minutes = Math.round((hours - wholeHours) * 60);\n    return \"\".concat(wholeHours, \"h \").concat(minutes, \"m\");\n}\nfunction formatEfficiency(efficiency) {\n    return \"\".concat((efficiency * 100).toFixed(1), \"%\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/utils.ts\n"));

/***/ })

});