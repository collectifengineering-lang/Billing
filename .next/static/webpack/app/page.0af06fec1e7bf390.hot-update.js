"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/csvUtils.ts":
/*!*************************!*\
  !*** ./lib/csvUtils.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downloadCSV: function() { return /* binding */ downloadCSV; },\n/* harmony export */   exportProjectionsToCSV: function() { return /* binding */ exportProjectionsToCSV; },\n/* harmony export */   generateCSVFilename: function() { return /* binding */ generateCSVFilename; },\n/* harmony export */   importProjectionsFromCSV: function() { return /* binding */ importProjectionsFromCSV; },\n/* harmony export */   readCSVFile: function() { return /* binding */ readCSVFile; }\n/* harmony export */ });\n/**\r\n * Export projections table to CSV format\r\n */ function exportProjectionsToCSV(billingData, monthlyProjections, asrFees, signedFees, monthRange) {\n    // Create CSV header\n    const headers = [\n        \"Project ID\",\n        \"Project Name\",\n        \"Customer Name\",\n        \"Signed Fee\",\n        \"ASR Fee\",\n        ...monthRange.map((month)=>formatMonthForCSV(month))\n    ];\n    // Create CSV rows\n    const rows = billingData.map((project)=>{\n        const row = {\n            projectId: project.projectId,\n            projectName: project.projectName,\n            customerName: project.customerName,\n            signedFee: signedFees[project.projectId] || project.signedFee || 0,\n            asrFee: asrFees[project.projectId] || 0\n        };\n        // Add monthly projections\n        monthRange.forEach((month)=>{\n            var _monthlyProjections_project_projectId;\n            const value = ((_monthlyProjections_project_projectId = monthlyProjections[project.projectId]) === null || _monthlyProjections_project_projectId === void 0 ? void 0 : _monthlyProjections_project_projectId[month]) || 0;\n            row[month] = value;\n        });\n        return row;\n    });\n    // Convert to CSV format\n    const csvContent = [\n        headers.join(\",\"),\n        ...rows.map((row)=>headers.map((header)=>{\n                let value;\n                if (header === \"Project ID\") {\n                    // Ensure Project ID is always treated as a string to prevent scientific notation\n                    const projectId = row.projectId;\n                    console.log(\"CSV Export - Project ID type:\", typeof projectId, \"value:\", projectId);\n                    // Fix: Avoid using toLocaleString on 'never' type, ensure projectId is string or number\n                    // Ensure projectId is string or number before converting to string\n                    if (typeof projectId === \"number\" || typeof projectId === \"string\") {\n                        value = String(projectId);\n                    } else {\n                        value = \"\";\n                    }\n                    console.log(\"CSV Export - Final Project ID value:\", value);\n                } else if (header === \"Project Name\") {\n                    value = row.projectName;\n                } else if (header === \"Customer Name\") {\n                    value = row.customerName;\n                } else if (header === \"Signed Fee\") {\n                    value = row.signedFee;\n                } else if (header === \"ASR Fee\") {\n                    value = row.asrFee;\n                } else {\n                    // For month columns, find the corresponding month in the original format\n                    const monthKey = monthRange.find((month)=>formatMonthForCSV(month) === header);\n                    value = monthKey ? row[monthKey] : 0;\n                }\n                // Escape commas and quotes in the value\n                const escapedValue = String(value).replace(/\"/g, '\"\"');\n                return '\"'.concat(escapedValue, '\"');\n            }).join(\",\"))\n    ].join(\"\\n\");\n    return csvContent;\n}\n/**\r\n * Import projections from CSV format\r\n */ function importProjectionsFromCSV(csvContent, billingData) {\n    try {\n        const lines = csvContent.trim().split(\"\\n\");\n        if (lines.length < 2) {\n            return {\n                success: false,\n                errors: [\n                    \"CSV file must have at least a header row and one data row\"\n                ]\n            };\n        }\n        const headers = parseCSVRow(lines[0]);\n        const dataRows = lines.slice(1);\n        // Validate headers\n        const requiredHeaders = [\n            \"Project ID\",\n            \"Project Name\",\n            \"Customer Name\",\n            \"Signed Fee\",\n            \"ASR Fee\"\n        ];\n        const missingHeaders = requiredHeaders.filter((header)=>!headers.includes(header));\n        if (missingHeaders.length > 0) {\n            return {\n                success: false,\n                errors: [\n                    \"Missing required headers: \".concat(missingHeaders.join(\", \"))\n                ]\n            };\n        }\n        // Extract month columns (everything after the required headers)\n        const monthColumns = headers.slice(5);\n        // Validate month format\n        const invalidMonths = monthColumns.filter((month)=>!/^\\d{4}-\\d{2}$/.test(month));\n        if (invalidMonths.length > 0) {\n            return {\n                success: false,\n                errors: [\n                    \"Invalid month format found: \".concat(invalidMonths.join(\", \"), \". Expected format: YYYY-MM\")\n                ]\n            };\n        }\n        const importedData = {};\n        const errors = [];\n        dataRows.forEach((row, index)=>{\n            const values = parseCSVRow(row);\n            if (values.length !== headers.length) {\n                errors.push(\"Row \".concat(index + 2, \": Column count mismatch. Expected \").concat(headers.length, \", got \").concat(values.length));\n                return;\n            }\n            const projectId = values[0].trim(); // Ensure it's treated as a string\n            const projectName = values[1];\n            const customerName = values[2];\n            const signedFee = parseFloat(values[3]) || 0;\n            const asrFee = parseFloat(values[4]) || 0;\n            // Validate project exists in billing data\n            const projectExists = billingData.some((p)=>p.projectId === projectId);\n            if (!projectExists) {\n                errors.push(\"Row \".concat(index + 2, ': Project ID \"').concat(projectId, '\" not found in current data'));\n                return;\n            }\n            // Parse monthly projections\n            const monthlyData = {};\n            monthColumns.forEach((month, monthIndex)=>{\n                const value = parseFloat(values[5 + monthIndex]) || 0;\n                monthlyData[month] = value;\n            });\n            importedData[projectId] = monthlyData;\n        });\n        if (errors.length > 0) {\n            return {\n                success: false,\n                errors,\n                data: importedData // Return partial data even with errors\n            };\n        }\n        return {\n            success: true,\n            data: importedData,\n            message: \"Successfully imported \".concat(Object.keys(importedData).length, \" projects with \").concat(monthColumns.length, \" months of data\")\n        };\n    } catch (error) {\n        return {\n            success: false,\n            errors: [\n                \"Error parsing CSV: \".concat(error instanceof Error ? error.message : \"Unknown error\")\n            ]\n        };\n    }\n}\n/**\r\n * Parse a CSV row, handling quoted values and commas\r\n */ function parseCSVRow(row) {\n    const values = [];\n    let current = \"\";\n    let inQuotes = false;\n    for(let i = 0; i < row.length; i++){\n        const char = row[i];\n        if (char === '\"') {\n            if (inQuotes && row[i + 1] === '\"') {\n                // Escaped quote\n                current += '\"';\n                i++; // Skip next quote\n            } else {\n                // Toggle quote state\n                inQuotes = !inQuotes;\n            }\n        } else if (char === \",\" && !inQuotes) {\n            // End of value\n            values.push(current.trim());\n            current = \"\";\n        } else {\n            current += char;\n        }\n    }\n    // Add the last value\n    values.push(current.trim());\n    return values;\n}\n/**\r\n * Format month for CSV display (e.g., \"2024-01\" -> \"Jan 2024\")\r\n */ function formatMonthForCSV(month) {\n    const [year, monthNum] = month.split(\"-\");\n    const date = new Date(parseInt(year), parseInt(monthNum) - 1);\n    return date.toLocaleDateString(\"en-US\", {\n        month: \"short\",\n        year: \"numeric\"\n    });\n}\n/**\r\n * Generate a filename for the CSV export\r\n */ function generateCSVFilename() {\n    const now = new Date();\n    const dateStr = now.toISOString().slice(0, 10); // YYYY-MM-DD\n    const timeStr = now.toTimeString().slice(0, 8).replace(/:/g, \"-\"); // HH-MM-SS\n    return \"projections-export-\".concat(dateStr, \"-\").concat(timeStr, \".csv\");\n}\n/**\r\n * Download CSV content as a file\r\n */ function downloadCSV(csvContent, filename) {\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: \"text/csv;charset=utf-8;\"\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute(\"href\", url);\n        link.setAttribute(\"download\", filename);\n        link.style.visibility = \"hidden\";\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n}\n/**\r\n * Read CSV file from input element\r\n */ function readCSVFile(file) {\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (event)=>{\n            var _event_target;\n            const content = (_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.result;\n            resolve(content);\n        };\n        reader.onerror = ()=>{\n            reject(new Error(\"Failed to read CSV file\"));\n        };\n        reader.readAsText(file);\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/csvUtils.ts\n"));

/***/ })

});